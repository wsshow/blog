{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/0.jpg","path":"img/0.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/1.jpg","path":"img/1.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/11.jpg","path":"img/11.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/10.jpg","path":"img/10.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/12.jpg","path":"img/12.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/13.jpg","path":"img/13.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/14.jpg","path":"img/14.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/15.jpg","path":"img/15.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/17.jpg","path":"img/17.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/18.jpg","path":"img/18.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/19.jpg","path":"img/19.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/2.jpg","path":"img/2.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/20.jpg","path":"img/20.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/3.jpg","path":"img/3.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/4.jpg","path":"img/4.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/5.jpg","path":"img/5.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/6.jpg","path":"img/6.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/7.jpg","path":"img/7.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/8.jpg","path":"img/8.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/9.jpg","path":"img/9.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/default.jpg","path":"img/default.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/ws.jpg","path":"img/ws.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/archives/index.md","hash":"4c230d75d06f3b0b9e044cc779b0738f5f749db6","modified":1681175107640},{"_id":"source/_posts/ws_front-matter.md","hash":"a8347a84eeed4a030a05f3dbe2da8232b94c372f","modified":1681175109197},{"_id":"source/_posts/ws_gitcommit.md","hash":"5ac1ff4b179dc706d24845f2804defe34d34e90d","modified":1681175109099},{"_id":"source/_posts/ws_golang_stringEx.md","hash":"b408be65d88d0416cfbf39b8ad1bba5f5f1a4438","modified":1681175108808},{"_id":"source/_posts/ws_golang_array.md","hash":"18bba3a265e7b2943f288f0de329d5c258789d35","modified":1681175109002},{"_id":"source/_posts/ws_golang_reflect_call_func.md","hash":"414d0683294142350a4b16462355eb6867d5a405","modified":1681175108905},{"_id":"source/_posts/ws_highresolutionimage.md","hash":"ac7d28bbe03fa2efa80675a86d20cce3f451cfa0","modified":1681175108710},{"_id":"source/_posts/ws_iterator.md","hash":"5feb862c83833952b5384bd00ff3198b250cd4d1","modified":1681175108495},{"_id":"source/_posts/ws_list.md","hash":"3c70f17fcb8d51fca7d66dcb86aad315f3a8f726","modified":1681175108395},{"_id":"source/_posts/ws_test.md","hash":"de2ee9f84ef5292b74e780f65f1edaf012c80572","modified":1681175108265},{"_id":"source/about/index.md","hash":"d1c6586c5d69d24890b95ee5e07122b9aaf1acd9","modified":1681175107738},{"_id":"source/_posts/ws_vector.md","hash":"f90cb5e1eb89f503dfb9dbde3e3b8d3c39aac103","modified":1681175107966},{"_id":"source/_posts/ws_utilities.md","hash":"caea155073191679429c4c5200cff0975be920bb","modified":1681175108064},{"_id":"source/categories/index.md","hash":"f36557e3e7214fffdd5b1680e4d69d789fbcab98","modified":1681175107535},{"_id":"source/_posts/ws_vector_iterator.md","hash":"a590dc2e703feaec4d2ca085387e5c937573b4f0","modified":1681175107869},{"_id":"source/comment/index.md","hash":"9f51fd1f59ad1e949ed51c229a98d5de7d0589cc","modified":1681175107437},{"_id":"source/links/index.md","hash":"a7f517a9d7bd382353319230e8290415e9024840","modified":1681175107339},{"_id":"source/movies/index.md","hash":"a3f722bff76ecf5b0e611f1d91539dfebd404934","modified":1681175107160},{"_id":"source/music/index.md","hash":"6e517a229d22d598792b6517d9d012e8fd93c3a9","modified":1681175107064},{"_id":"source/photos/index.md","hash":"92b972ea4d7ad7a5a195f64b2e386749d72eb2bc","modified":1681175106966},{"_id":"source/tags/index.md","hash":"3e79f926229f588d15e7f8c3004fbe73545d1284","modified":1681175106671},{"_id":"source/resources/links/links.json","hash":"f9ab81f043eb7bf27174fe538e033b820f508617","modified":1681175106767},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"52967a864c244af4db8c63902586cb617ee5b8aa","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"e19021371184361261ddef1d98eb308d78922714","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"adc8f25ce9d499c18731b55735e5bc37262383ca","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"b915538c63cca03126e468e89413bd59454450f7","modified":1681176716695},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"c7a060713f72ec8b4a45244b3aa8d51d772f5ce8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"2e74fe8ae5ac20067668a18df5985459faf419f9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"021ccdca211cce0438a378ada37897a8ffcb9574","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"68cda524337dfe2e1467318a4a6c124b4c3845a7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"35223531f8e086d57caec2d17d45ddbcb39deb74","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"e24046fad288a13897195038cb7a63d1014cd7b8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"ca39e634668ed4fbb43267ec4782c2b55c44e698","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"4f5636c326f794417296bdb6bcfd6a8b207d69d8","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"7ff0c456fae2717ddbbb9f8fae2734d449a5448b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"e4b9d6164e97b30c84e1218c7543c60f6b29edcc","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"678e56ad2e46b630364540fc6a881d6801192dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"8a0547ecb33ad2939450152adf54fca58e22a424","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"cabb3a06f8ef297a1ea3d91ced8abeaa0831aa14","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"95738f110598f999d627234e78ff9e9decac1b9b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"3ce0461534b786cb71d9141dff35fa5cb70e22b9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3ba842bf4801b2f115c2cfe5657f35a732ce589f","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"a833715eec2171ff05664d6d5752a57c954192ce","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"9c16ff9cdc444ebf47eed33ea35b8366459a18f0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c3a87393cb49915940c2dd206356c2a16549767","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"26ba1fc99117993087b1c6e02daa2626627d8eb1","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"0ea633b11b357afa50c200290d19c32467d58a1d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"e6ebbe137dd86b6d8750a6843e350fcd16030981","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"441d87067d87d9996b53b25c05b8e620bd94b027","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":499162500000},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":499162500000},{"_id":"themes/butterfly/README.md","hash":"52967a864c244af4db8c63902586cb617ee5b8aa","modified":499162500000},{"_id":"themes/butterfly/README_CN.md","hash":"e19021371184361261ddef1d98eb308d78922714","modified":499162500000},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":499162500000},{"_id":"themes/butterfly/_config.yml","hash":"adc8f25ce9d499c18731b55735e5bc37262383ca","modified":499162500000},{"_id":"themes/butterfly/package.json","hash":"b915538c63cca03126e468e89413bd59454450f7","modified":1681176716695},{"_id":"themes/butterfly/plugins.yml","hash":"c7a060713f72ec8b4a45244b3aa8d51d772f5ce8","modified":499162500000},{"_id":"themes/butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":499162500000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":499162500000},{"_id":"themes/butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":499162500000},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":499162500000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":499162500000},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":499162500000},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":499162500000},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":499162500000},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":499162500000},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":499162500000},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":499162500000},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":499162500000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":499162500000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":499162500000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":499162500000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":499162500000},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":499162500000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":499162500000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":499162500000},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":499162500000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":499162500000},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":499162500000},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":499162500000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":499162500000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":499162500000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":499162500000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":499162500000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":499162500000},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":499162500000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":499162500000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":499162500000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":499162500000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":499162500000},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":499162500000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":499162500000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":499162500000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":499162500000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":499162500000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":499162500000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":499162500000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":499162500000},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":499162500000},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":499162500000},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":499162500000},{"_id":"themes/butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":499162500000},{"_id":"themes/butterfly/source/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":499162500000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":499162500000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":499162500000},{"_id":"themes/butterfly/source/js/utils.js","hash":"2e74fe8ae5ac20067668a18df5985459faf419f9","modified":499162500000},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":499162500000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":499162500000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":499162500000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":499162500000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":499162500000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"021ccdca211cce0438a378ada37897a8ffcb9574","modified":499162500000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":499162500000},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":499162500000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":499162500000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":499162500000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":499162500000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":499162500000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":499162500000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":499162500000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":499162500000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":499162500000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":499162500000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":499162500000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":499162500000},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":499162500000},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"68cda524337dfe2e1467318a4a6c124b4c3845a7","modified":499162500000},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":499162500000},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":499162500000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":499162500000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":499162500000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":499162500000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"35223531f8e086d57caec2d17d45ddbcb39deb74","modified":499162500000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":499162500000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":499162500000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":499162500000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":499162500000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":499162500000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":499162500000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":499162500000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":499162500000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":499162500000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":499162500000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":499162500000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":499162500000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":499162500000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":499162500000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4f5636c326f794417296bdb6bcfd6a8b207d69d8","modified":499162500000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":499162500000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":499162500000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":499162500000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":499162500000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":499162500000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":499162500000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":499162500000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"e24046fad288a13897195038cb7a63d1014cd7b8","modified":499162500000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":499162500000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":499162500000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":499162500000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"ca39e634668ed4fbb43267ec4782c2b55c44e698","modified":499162500000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":499162500000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":499162500000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"7ff0c456fae2717ddbbb9f8fae2734d449a5448b","modified":499162500000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":499162500000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":499162500000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":499162500000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":499162500000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"e4b9d6164e97b30c84e1218c7543c60f6b29edcc","modified":499162500000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":499162500000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":499162500000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":499162500000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":499162500000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"678e56ad2e46b630364540fc6a881d6801192dcd","modified":499162500000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":499162500000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":499162500000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":499162500000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":499162500000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":499162500000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":499162500000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":499162500000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":499162500000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":499162500000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":499162500000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":499162500000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":499162500000},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":499162500000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"8a0547ecb33ad2939450152adf54fca58e22a424","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"cabb3a06f8ef297a1ea3d91ced8abeaa0831aa14","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"95738f110598f999d627234e78ff9e9decac1b9b","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"3ce0461534b786cb71d9141dff35fa5cb70e22b9","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3ba842bf4801b2f115c2cfe5657f35a732ce589f","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"a833715eec2171ff05664d6d5752a57c954192ce","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"9c16ff9cdc444ebf47eed33ea35b8366459a18f0","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c3a87393cb49915940c2dd206356c2a16549767","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"26ba1fc99117993087b1c6e02daa2626627d8eb1","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"e6ebbe137dd86b6d8750a6843e350fcd16030981","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"0ea633b11b357afa50c200290d19c32467d58a1d","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"441d87067d87d9996b53b25c05b8e620bd94b027","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":499162500000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":499162500000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":499162500000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":499162500000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":499162500000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":499162500000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":499162500000}],"Category":[{"name":"butterfly","_id":"clgbl83rp0004w07kaxjc2nqq"},{"name":"git","_id":"clgbl83rw000cw07k74f1bhs5"},{"name":"数据结构","_id":"clgbl83s1000jw07khi0m6swv"},{"name":"golang","_id":"clgbl83s6000sw07k17a1514s"},{"name":"utils","_id":"clgbl83sa000zw07kgu9ugyu8"},{"name":"网站链接","_id":"clgbl83sb0013w07k5mkgcwjr"},{"name":"单元测试","_id":"clgbl83sf001bw07k1eqhdrd9"}],"Data":[],"Page":[{"title":"archives","date":"2022-05-10T13:06:17.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2022-05-10 21:06:17\ntype: \"archives\"\n---\n","updated":"2023-04-11T01:05:07.640Z","path":"archives/index.html","comments":1,"layout":"page","_id":"clgbl83rf0000w07kh6hy1psi","content":"","site":{"data":{}},"cover":"/img/15.jpg","cover_type":"img","excerpt":"","more":""},{"title":"about","date":"2022-05-10T13:08:54.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-05-10 21:08:54\n---\n","updated":"2023-04-11T01:05:07.738Z","path":"about/index.html","comments":1,"layout":"page","_id":"clgbl83rn0002w07khrh543st","content":"","site":{"data":{}},"cover":"/img/18.jpg","cover_type":"img","excerpt":"","more":""},{"title":"comment","date":"2022-05-10T13:08:45.000Z","_content":"","source":"comment/index.md","raw":"---\ntitle: comment\ndate: 2022-05-10 21:08:45\n---\n","updated":"2023-04-11T01:05:07.437Z","path":"comment/index.html","comments":1,"layout":"page","_id":"clgbl83rr0006w07kaglpc4co","content":"","site":{"data":{}},"cover":"/img/5.jpg","cover_type":"img","excerpt":"","more":""},{"title":"categories","date":"2022-05-10T13:01:40.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-05-10 21:01:40\ntype: \"categories\"\n---\n","updated":"2023-04-11T01:05:07.535Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clgbl83rt0008w07k2kyoat0n","content":"","site":{"data":{}},"cover":"/img/4.jpg","cover_type":"img","excerpt":"","more":""},{"title":"links","date":"2022-05-10T13:01:53.000Z","type":"link","flink_url":"/resources/links/links.json","_content":"","source":"links/index.md","raw":"---\ntitle: links\ndate: 2022-05-10 21:01:53\ntype: \"link\"\nflink_url: /resources/links/links.json\n---","updated":"2023-04-11T01:05:07.339Z","path":"links/index.html","comments":1,"layout":"page","_id":"clgbl83rv000aw07k8q4lf95i","content":"","site":{"data":{}},"cover":"/img/14.jpg","cover_type":"img","excerpt":"","more":""},{"title":"movies","date":"2022-05-10T13:08:33.000Z","_content":"","source":"movies/index.md","raw":"---\ntitle: movies\ndate: 2022-05-10 21:08:33\n---\n","updated":"2023-04-11T01:05:07.160Z","path":"movies/index.html","comments":1,"layout":"page","_id":"clgbl83rx000ew07k2yhhf4ih","content":"","site":{"data":{}},"cover":"/img/12.jpg","cover_type":"img","excerpt":"","more":""},{"title":"music","date":"2022-05-10T13:08:16.000Z","_content":"","source":"music/index.md","raw":"---\ntitle: music\ndate: 2022-05-10 21:08:16\n---\n","updated":"2023-04-11T01:05:07.064Z","path":"music/index.html","comments":1,"layout":"page","_id":"clgbl83s0000gw07ka7y7gcjf","content":"","site":{"data":{}},"cover":"/img/4.jpg","cover_type":"img","excerpt":"","more":""},{"title":"photos","date":"2022-05-10T13:07:10.000Z","type":"photos","_content":"","source":"photos/index.md","raw":"---\ntitle: photos\ndate: 2022-05-10 21:07:10\ntype: \"photos\"\n---\n","updated":"2023-04-11T01:05:06.966Z","path":"photos/index.html","comments":1,"layout":"page","_id":"clgbl83s3000lw07kaz517yqy","content":"","site":{"data":{}},"cover":"/img/19.jpg","cover_type":"img","excerpt":"","more":""},{"title":"tags","date":"2022-05-10T13:00:15.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-05-10 21:00:15\ntype: \"tags\"\n---\n","updated":"2023-04-11T01:05:06.671Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clgbl83s5000ow07k2lh05vy3","content":"","site":{"data":{}},"cover":"/img/10.jpg","cover_type":"img","excerpt":"","more":""},{"_content":"[\n  {\n      \"class_name\": \"代码托管网站\",\n      \"class_desc\": \"\",\n      \"link_list\": [\n          {\n              \"name\": \"Github\",\n              \"link\": \"https://github.com/\",\n              \"avatar\": \"https://github.com/favicon.ico\",\n              \"descr\": \"代码托管网站\"\n          },\n          {\n              \"name\": \"Gitee\",\n              \"link\": \"https://gitee.com/\",\n              \"avatar\": \"https://gitee.com/favicon.ico\",\n              \"descr\": \"代码托管网站\"\n          },\n          {\n              \"name\": \"Gitlab\",\n              \"link\": \"https://gitlab.com/\",\n              \"avatar\": \"https://gitlab.com/favicon.ico\",\n              \"descr\": \"代码托管网站\"\n          }\n      ]\n  }\n]","source":"resources/links/links.json","raw":"[\n  {\n      \"class_name\": \"代码托管网站\",\n      \"class_desc\": \"\",\n      \"link_list\": [\n          {\n              \"name\": \"Github\",\n              \"link\": \"https://github.com/\",\n              \"avatar\": \"https://github.com/favicon.ico\",\n              \"descr\": \"代码托管网站\"\n          },\n          {\n              \"name\": \"Gitee\",\n              \"link\": \"https://gitee.com/\",\n              \"avatar\": \"https://gitee.com/favicon.ico\",\n              \"descr\": \"代码托管网站\"\n          },\n          {\n              \"name\": \"Gitlab\",\n              \"link\": \"https://gitlab.com/\",\n              \"avatar\": \"https://gitlab.com/favicon.ico\",\n              \"descr\": \"代码托管网站\"\n          }\n      ]\n  }\n]","date":"2023-04-11T01:05:06.767Z","updated":"2023-04-11T01:05:06.767Z","path":"resources/links/links.json","layout":"false","title":"","comments":1,"_id":"clgbl83s7000uw07k15sqfkes","content":"[{\"class_name\":\"代码托管网站\",\"class_desc\":\"\",\"link_list\":[{\"name\":\"Github\",\"link\":\"https://github.com/\",\"avatar\":\"https://github.com/favicon.ico\",\"descr\":\"代码托管网站\"},{\"name\":\"Gitee\",\"link\":\"https://gitee.com/\",\"avatar\":\"https://gitee.com/favicon.ico\",\"descr\":\"代码托管网站\"},{\"name\":\"Gitlab\",\"link\":\"https://gitlab.com/\",\"avatar\":\"https://gitlab.com/favicon.ico\",\"descr\":\"代码托管网站\"}]}]","site":{"data":{}},"cover":"/img/1.jpg","cover_type":"img","excerpt":"","more":"[{\"class_name\":\"代码托管网站\",\"class_desc\":\"\",\"link_list\":[{\"name\":\"Github\",\"link\":\"https://github.com/\",\"avatar\":\"https://github.com/favicon.ico\",\"descr\":\"代码托管网站\"},{\"name\":\"Gitee\",\"link\":\"https://gitee.com/\",\"avatar\":\"https://gitee.com/favicon.ico\",\"descr\":\"代码托管网站\"},{\"name\":\"Gitlab\",\"link\":\"https://gitlab.com/\",\"avatar\":\"https://gitlab.com/favicon.ico\",\"descr\":\"代码托管网站\"}]}]"}],"Post":[{"title":"butterfly中设置front-matter","date":"2022-12-06T15:20:30.000Z","author":"ws","description":"butterfly主题下设置文章信息","cover":false,"_content":"\n| 关键字                | 解释                                                     | 重要性     |\n| :-------------------- | :------------------------------------------------------- | ---------- |\n| title                 | 文章标题                                                 | **`必须`** |\n| date                  | 文章创建日期                                             | **`必须`** |\n| updated               | 文章更新日期                                             | *可选*     |\n| tags                  | 文章标签                                                 | *可选*     |\n| categories            | 文章分类                                                 | *可选*     |\n| keywords              | 文章关键字                                               | *可选*     |\n| description           | 文章描述                                                 | *可选*     |\n| top_img               | 文章顶部图片                                             | *可选*     |\n| cover                 | 文章缩略图                                               | *可选*     |\n| comments              | 显示文章评论模块                                         | *可选*     |\n| toc                   | 显示文章TOC(默认为设置中toc的enable配置)                 | *可选*     |\n| toc_number            | 显示TOC序号                                              | *可选*     |\n| toc_style_simple      | 显示TOC简洁模式                                          | *可选*     |\n| copyright             | 显示文章版权模块(默认为设置中post_copyright的enable设置) | *可选*     |\n| copyright_author      | 文章版权模块的文章作者                                   | *可选*     |\n| copyright_author_href | 文章版权模块的文章作者链接                               | *可选*     |\n| copyright_url         | 文章版权模块的文章链接                                   | *可选*     |\n| copyright_info        | 文章版权模块的版权声明                                   | *可选*     |\n| mathjax               | 显示mathjax(默认为false)                                 | *可选*     |\n| katex                 | 显示katex(默认为false)                                   | *可选*     |\n| aplayer               | 在需要的页面加载aplayer的js和css                         | *可选*     |\n| highlight_shrink      | 配置代码框是否展开(默认为设置中highlight_shrink的配置)   | *可选*     |\n| aside                 | 显示侧边栏(默认为true)                                   | *可选*     |\n\n","source":"_posts/ws_front-matter.md","raw":"---\ntitle: butterfly中设置front-matter\ndate: 2022-12-06 23:20:30\nauthor: ws\ndescription: butterfly主题下设置文章信息\ncategories: butterfly\ntags: [hexo, butterfly]\ncover: false\n---\n\n| 关键字                | 解释                                                     | 重要性     |\n| :-------------------- | :------------------------------------------------------- | ---------- |\n| title                 | 文章标题                                                 | **`必须`** |\n| date                  | 文章创建日期                                             | **`必须`** |\n| updated               | 文章更新日期                                             | *可选*     |\n| tags                  | 文章标签                                                 | *可选*     |\n| categories            | 文章分类                                                 | *可选*     |\n| keywords              | 文章关键字                                               | *可选*     |\n| description           | 文章描述                                                 | *可选*     |\n| top_img               | 文章顶部图片                                             | *可选*     |\n| cover                 | 文章缩略图                                               | *可选*     |\n| comments              | 显示文章评论模块                                         | *可选*     |\n| toc                   | 显示文章TOC(默认为设置中toc的enable配置)                 | *可选*     |\n| toc_number            | 显示TOC序号                                              | *可选*     |\n| toc_style_simple      | 显示TOC简洁模式                                          | *可选*     |\n| copyright             | 显示文章版权模块(默认为设置中post_copyright的enable设置) | *可选*     |\n| copyright_author      | 文章版权模块的文章作者                                   | *可选*     |\n| copyright_author_href | 文章版权模块的文章作者链接                               | *可选*     |\n| copyright_url         | 文章版权模块的文章链接                                   | *可选*     |\n| copyright_info        | 文章版权模块的版权声明                                   | *可选*     |\n| mathjax               | 显示mathjax(默认为false)                                 | *可选*     |\n| katex                 | 显示katex(默认为false)                                   | *可选*     |\n| aplayer               | 在需要的页面加载aplayer的js和css                         | *可选*     |\n| highlight_shrink      | 配置代码框是否展开(默认为设置中highlight_shrink的配置)   | *可选*     |\n| aside                 | 显示侧边栏(默认为true)                                   | *可选*     |\n\n","slug":"ws_front-matter","published":1,"updated":"2023-04-11T01:05:09.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgbl83ri0001w07k0dq0eem1","content":"<table>\n<thead>\n<tr>\n<th align=\"left\">关键字</th>\n<th align=\"left\">解释</th>\n<th>重要性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">title</td>\n<td align=\"left\">文章标题</td>\n<td><strong><code>必须</code></strong></td>\n</tr>\n<tr>\n<td align=\"left\">date</td>\n<td align=\"left\">文章创建日期</td>\n<td><strong><code>必须</code></strong></td>\n</tr>\n<tr>\n<td align=\"left\">updated</td>\n<td align=\"left\">文章更新日期</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">tags</td>\n<td align=\"left\">文章标签</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">categories</td>\n<td align=\"left\">文章分类</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">keywords</td>\n<td align=\"left\">文章关键字</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">description</td>\n<td align=\"left\">文章描述</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">top_img</td>\n<td align=\"left\">文章顶部图片</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">cover</td>\n<td align=\"left\">文章缩略图</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">comments</td>\n<td align=\"left\">显示文章评论模块</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">toc</td>\n<td align=\"left\">显示文章TOC(默认为设置中toc的enable配置)</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">toc_number</td>\n<td align=\"left\">显示TOC序号</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">toc_style_simple</td>\n<td align=\"left\">显示TOC简洁模式</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">copyright</td>\n<td align=\"left\">显示文章版权模块(默认为设置中post_copyright的enable设置)</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">copyright_author</td>\n<td align=\"left\">文章版权模块的文章作者</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">copyright_author_href</td>\n<td align=\"left\">文章版权模块的文章作者链接</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">copyright_url</td>\n<td align=\"left\">文章版权模块的文章链接</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">copyright_info</td>\n<td align=\"left\">文章版权模块的版权声明</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">mathjax</td>\n<td align=\"left\">显示mathjax(默认为false)</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">katex</td>\n<td align=\"left\">显示katex(默认为false)</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">aplayer</td>\n<td align=\"left\">在需要的页面加载aplayer的js和css</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">highlight_shrink</td>\n<td align=\"left\">配置代码框是否展开(默认为设置中highlight_shrink的配置)</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">aside</td>\n<td align=\"left\">显示侧边栏(默认为true)</td>\n<td><em>可选</em></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th align=\"left\">关键字</th>\n<th align=\"left\">解释</th>\n<th>重要性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">title</td>\n<td align=\"left\">文章标题</td>\n<td><strong><code>必须</code></strong></td>\n</tr>\n<tr>\n<td align=\"left\">date</td>\n<td align=\"left\">文章创建日期</td>\n<td><strong><code>必须</code></strong></td>\n</tr>\n<tr>\n<td align=\"left\">updated</td>\n<td align=\"left\">文章更新日期</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">tags</td>\n<td align=\"left\">文章标签</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">categories</td>\n<td align=\"left\">文章分类</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">keywords</td>\n<td align=\"left\">文章关键字</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">description</td>\n<td align=\"left\">文章描述</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">top_img</td>\n<td align=\"left\">文章顶部图片</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">cover</td>\n<td align=\"left\">文章缩略图</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">comments</td>\n<td align=\"left\">显示文章评论模块</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">toc</td>\n<td align=\"left\">显示文章TOC(默认为设置中toc的enable配置)</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">toc_number</td>\n<td align=\"left\">显示TOC序号</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">toc_style_simple</td>\n<td align=\"left\">显示TOC简洁模式</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">copyright</td>\n<td align=\"left\">显示文章版权模块(默认为设置中post_copyright的enable设置)</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">copyright_author</td>\n<td align=\"left\">文章版权模块的文章作者</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">copyright_author_href</td>\n<td align=\"left\">文章版权模块的文章作者链接</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">copyright_url</td>\n<td align=\"left\">文章版权模块的文章链接</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">copyright_info</td>\n<td align=\"left\">文章版权模块的版权声明</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">mathjax</td>\n<td align=\"left\">显示mathjax(默认为false)</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">katex</td>\n<td align=\"left\">显示katex(默认为false)</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">aplayer</td>\n<td align=\"left\">在需要的页面加载aplayer的js和css</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">highlight_shrink</td>\n<td align=\"left\">配置代码框是否展开(默认为设置中highlight_shrink的配置)</td>\n<td><em>可选</em></td>\n</tr>\n<tr>\n<td align=\"left\">aside</td>\n<td align=\"left\">显示侧边栏(默认为true)</td>\n<td><em>可选</em></td>\n</tr>\n</tbody></table>\n"},{"title":"git提交规范","date":"2022-12-07T14:20:30.000Z","author":"ws","description":"git commit规范","cover":false,"_content":"\n## commit message格式\n\n`<type>(<scope>): <subject>`\n\n## type(必须)\n\n| 关键字   | 描述                                    |\n| :------- | :-------------------------------------- |\n| feat     | 功能新增                                |\n| fix      | BUG修复                                 |\n| docs     | 文档更新                                |\n| style    | 不影响程序逻辑的代码修改                |\n| refactor | 重构代码(既没有新增功能，也没有修复BUG) |\n| perf     | 性能、体验优化                          |\n| test     | 新增测试用例或更新现有测试              |\n| build    | 修改项目构建系统配置(Makefile等)        |\n| ci       | 项目自动构建流程相关的提交              |\n| chore    | 构建过程或辅助工具的变动                |\n| revert   | 回滚到早前提交                          |\n\n## scope(可选)\n\n用于说明commit影响的范围\n\n## subject(必须)\n\n用于说明commit目的的简短描述","source":"_posts/ws_gitcommit.md","raw":"---\ntitle: git提交规范\ndate: 2022-12-07 22:20:30\nauthor: ws\ndescription: git commit规范\ncategories: git\ntags: [git]\ncover: false\n---\n\n## commit message格式\n\n`<type>(<scope>): <subject>`\n\n## type(必须)\n\n| 关键字   | 描述                                    |\n| :------- | :-------------------------------------- |\n| feat     | 功能新增                                |\n| fix      | BUG修复                                 |\n| docs     | 文档更新                                |\n| style    | 不影响程序逻辑的代码修改                |\n| refactor | 重构代码(既没有新增功能，也没有修复BUG) |\n| perf     | 性能、体验优化                          |\n| test     | 新增测试用例或更新现有测试              |\n| build    | 修改项目构建系统配置(Makefile等)        |\n| ci       | 项目自动构建流程相关的提交              |\n| chore    | 构建过程或辅助工具的变动                |\n| revert   | 回滚到早前提交                          |\n\n## scope(可选)\n\n用于说明commit影响的范围\n\n## subject(必须)\n\n用于说明commit目的的简短描述","slug":"ws_gitcommit","published":1,"updated":"2023-04-11T01:05:09.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgbl83rn0003w07kgb6ibrpr","content":"<h2 id=\"commit-message格式\"><a href=\"#commit-message格式\" class=\"headerlink\" title=\"commit message格式\"></a>commit message格式</h2><p><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></p>\n<h2 id=\"type-必须\"><a href=\"#type-必须\" class=\"headerlink\" title=\"type(必须)\"></a>type(必须)</h2><table>\n<thead>\n<tr>\n<th align=\"left\">关键字</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">feat</td>\n<td align=\"left\">功能新增</td>\n</tr>\n<tr>\n<td align=\"left\">fix</td>\n<td align=\"left\">BUG修复</td>\n</tr>\n<tr>\n<td align=\"left\">docs</td>\n<td align=\"left\">文档更新</td>\n</tr>\n<tr>\n<td align=\"left\">style</td>\n<td align=\"left\">不影响程序逻辑的代码修改</td>\n</tr>\n<tr>\n<td align=\"left\">refactor</td>\n<td align=\"left\">重构代码(既没有新增功能，也没有修复BUG)</td>\n</tr>\n<tr>\n<td align=\"left\">perf</td>\n<td align=\"left\">性能、体验优化</td>\n</tr>\n<tr>\n<td align=\"left\">test</td>\n<td align=\"left\">新增测试用例或更新现有测试</td>\n</tr>\n<tr>\n<td align=\"left\">build</td>\n<td align=\"left\">修改项目构建系统配置(Makefile等)</td>\n</tr>\n<tr>\n<td align=\"left\">ci</td>\n<td align=\"left\">项目自动构建流程相关的提交</td>\n</tr>\n<tr>\n<td align=\"left\">chore</td>\n<td align=\"left\">构建过程或辅助工具的变动</td>\n</tr>\n<tr>\n<td align=\"left\">revert</td>\n<td align=\"left\">回滚到早前提交</td>\n</tr>\n</tbody></table>\n<h2 id=\"scope-可选\"><a href=\"#scope-可选\" class=\"headerlink\" title=\"scope(可选)\"></a>scope(可选)</h2><p>用于说明commit影响的范围</p>\n<h2 id=\"subject-必须\"><a href=\"#subject-必须\" class=\"headerlink\" title=\"subject(必须)\"></a>subject(必须)</h2><p>用于说明commit目的的简短描述</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"commit-message格式\"><a href=\"#commit-message格式\" class=\"headerlink\" title=\"commit message格式\"></a>commit message格式</h2><p><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code></p>\n<h2 id=\"type-必须\"><a href=\"#type-必须\" class=\"headerlink\" title=\"type(必须)\"></a>type(必须)</h2><table>\n<thead>\n<tr>\n<th align=\"left\">关键字</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">feat</td>\n<td align=\"left\">功能新增</td>\n</tr>\n<tr>\n<td align=\"left\">fix</td>\n<td align=\"left\">BUG修复</td>\n</tr>\n<tr>\n<td align=\"left\">docs</td>\n<td align=\"left\">文档更新</td>\n</tr>\n<tr>\n<td align=\"left\">style</td>\n<td align=\"left\">不影响程序逻辑的代码修改</td>\n</tr>\n<tr>\n<td align=\"left\">refactor</td>\n<td align=\"left\">重构代码(既没有新增功能，也没有修复BUG)</td>\n</tr>\n<tr>\n<td align=\"left\">perf</td>\n<td align=\"left\">性能、体验优化</td>\n</tr>\n<tr>\n<td align=\"left\">test</td>\n<td align=\"left\">新增测试用例或更新现有测试</td>\n</tr>\n<tr>\n<td align=\"left\">build</td>\n<td align=\"left\">修改项目构建系统配置(Makefile等)</td>\n</tr>\n<tr>\n<td align=\"left\">ci</td>\n<td align=\"left\">项目自动构建流程相关的提交</td>\n</tr>\n<tr>\n<td align=\"left\">chore</td>\n<td align=\"left\">构建过程或辅助工具的变动</td>\n</tr>\n<tr>\n<td align=\"left\">revert</td>\n<td align=\"left\">回滚到早前提交</td>\n</tr>\n</tbody></table>\n<h2 id=\"scope-可选\"><a href=\"#scope-可选\" class=\"headerlink\" title=\"scope(可选)\"></a>scope(可选)</h2><p>用于说明commit影响的范围</p>\n<h2 id=\"subject-必须\"><a href=\"#subject-必须\" class=\"headerlink\" title=\"subject(必须)\"></a>subject(必须)</h2><p>用于说明commit目的的简短描述</p>\n"},{"title":"golang自定义动态数组","date":"2022-04-29T15:18:30.000Z","author":"ws","description":"自定义动态数组","cover":"/img/13.jpg","_content":"\n# golang自定义动态数组\n\n## 完整代码\n\n```go\npackage array\n\nimport (\n\t\"sort\"\n)\n\ntype Array struct {\n\tdata []interface{}\n}\n\nfunc NewArray() *Array {\n\treturn new(Array)\n}\n\nfunc (a *Array) Add(elems ...interface{}) {\n\ta.data = append(a.data, elems...)\n}\n\nfunc (a *Array) Remove(e interface{}) {\n\td := a.data\n\tcnt := len(d)\n\tfor i := 0; i < cnt; i++ {\n\t\tif d[i] == e {\n\t\t\td = append(d[:i], d[i+1:]...)\n\t\t\tbreak\n\t\t}\n\t}\n\ta.data = d\n}\n\nfunc (a *Array) RemoveAll(e interface{}) {\n\td := a.data\n\tcnt := len(d)\n\tfor i := 0; i < cnt; i++ {\n\t\tif d[i] == e {\n\t\t\td = append(d[:i], d[i+1:]...)\n\t\t\tcontinue\n\t\t}\n\t}\n\ta.data = d\n}\n\nfunc (a *Array) Contain(e interface{}) bool {\n\td := a.data\n\tcnt := len(d)\n\tfor i := 0; i < cnt; i++ {\n\t\tif d[i] == e {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc (a *Array) Count() int {\n\treturn len(a.data)\n}\n\nfunc (a *Array) ForEach(f func(e interface{})) {\n\td := a.data\n\tcnt := len(d)\n\tfor i := 0; i < cnt; i++ {\n\t\tf(d[i])\n\t}\n}\n\nfunc (a *Array) Clear() {\n\ta.data = nil\n}\n\nfunc (a *Array) Data() []interface{} {\n\treturn a.data\n}\n\nfunc (a *Array) Sort(less func(i, j int) bool) {\n\tsort.Slice(a.data, less)\n}\n\nfunc (a *Array) Filter(f func(e interface{}) bool) *Array {\n\tnewArr := NewArray()\n\td := a.data\n\tcnt := len(d)\n\tfor i := 0; i < cnt; i++ {\n\t\tif f(d[i]) {\n\t\t\tnewArr.Add(d[i])\n\t\t}\n\t}\n\treturn newArr\n}\n```\n\n## 测试代码\n\n```go\npackage array\n\nimport (\n\t\"log\"\n\t\"testing\"\n)\n\nvar arr = NewArray()\n\nfunc TestAdd(t *testing.T) {\n\tarr.Add(1, 2, 3, 4, 5)\n\tif arr.Count() != 5 {\n\t\tt.Fatal(\"arr count should equal 5\")\n\t}\n\tarr.ForEach(func(e interface{}) { e = e.(int) * 2; log.Println(e) })\n}\n\nfunc TestRemove(t *testing.T) {\n\tarr.Add(1, 2, 3, 4, 5)\n\tarr.Remove(2)\n\tarr.Remove(1)\n\tif arr.Count() != 3 {\n\t\tt.Fatal(\"arr count should equal 3\")\n\t}\n\tarr.ForEach(func(e interface{}) { log.Println(e) })\n}\n\nfunc TestClear(t *testing.T) {\n\tarr.Add(1, 2, 3, 4, 5)\n\tarr.Clear()\n\tif arr.Count() != 0 {\n\t\tt.Fatal(\"arr count should equal 0\")\n\t}\n\tarr.ForEach(func(e interface{}) { log.Println(e) })\n}\n\nfunc TestSort(t *testing.T) {\n\tarr.Add(5, 3, 1, 2, 4)\n\tarr2 := NewArray()\n\tarr2.Add(1, 2, 3, 4, 5)\n\tarr.Sort(func(i, j int) bool {\n\t\treturn arr.Data()[i].(int) < arr.Data()[j].(int)\n\t})\n\td1 := arr.Data()\n\td2 := arr2.Data()\n\tfor i := 0; i < 5; i++ {\n\t\tif d1[i] != d2[i] {\n\t\t\tt.FailNow()\n\t\t}\n\t}\n}\n\nfunc TestFilter(t *testing.T) {\n\tarr.Add(1, 2, 3, 4, 5)\n\ta2 := arr.Filter(func(e interface{}) bool {\n\t\treturn e.(int) > 3\n\t}).Filter(func(e interface{}) bool {\n\t\treturn e.(int) > 4\n\t})\n\tif a2.data[0] != 5 {\n\t\tt.FailNow()\n\t}\n}\n```","source":"_posts/ws_golang_array.md","raw":"---\ntitle: golang自定义动态数组\ndate: 2022-04-29 23:18:30\nauthor: ws\ndescription: 自定义动态数组\ncategories: 数据结构\ntags: [golang, 数据结构]\ncover:\n---\n\n# golang自定义动态数组\n\n## 完整代码\n\n```go\npackage array\n\nimport (\n\t\"sort\"\n)\n\ntype Array struct {\n\tdata []interface{}\n}\n\nfunc NewArray() *Array {\n\treturn new(Array)\n}\n\nfunc (a *Array) Add(elems ...interface{}) {\n\ta.data = append(a.data, elems...)\n}\n\nfunc (a *Array) Remove(e interface{}) {\n\td := a.data\n\tcnt := len(d)\n\tfor i := 0; i < cnt; i++ {\n\t\tif d[i] == e {\n\t\t\td = append(d[:i], d[i+1:]...)\n\t\t\tbreak\n\t\t}\n\t}\n\ta.data = d\n}\n\nfunc (a *Array) RemoveAll(e interface{}) {\n\td := a.data\n\tcnt := len(d)\n\tfor i := 0; i < cnt; i++ {\n\t\tif d[i] == e {\n\t\t\td = append(d[:i], d[i+1:]...)\n\t\t\tcontinue\n\t\t}\n\t}\n\ta.data = d\n}\n\nfunc (a *Array) Contain(e interface{}) bool {\n\td := a.data\n\tcnt := len(d)\n\tfor i := 0; i < cnt; i++ {\n\t\tif d[i] == e {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc (a *Array) Count() int {\n\treturn len(a.data)\n}\n\nfunc (a *Array) ForEach(f func(e interface{})) {\n\td := a.data\n\tcnt := len(d)\n\tfor i := 0; i < cnt; i++ {\n\t\tf(d[i])\n\t}\n}\n\nfunc (a *Array) Clear() {\n\ta.data = nil\n}\n\nfunc (a *Array) Data() []interface{} {\n\treturn a.data\n}\n\nfunc (a *Array) Sort(less func(i, j int) bool) {\n\tsort.Slice(a.data, less)\n}\n\nfunc (a *Array) Filter(f func(e interface{}) bool) *Array {\n\tnewArr := NewArray()\n\td := a.data\n\tcnt := len(d)\n\tfor i := 0; i < cnt; i++ {\n\t\tif f(d[i]) {\n\t\t\tnewArr.Add(d[i])\n\t\t}\n\t}\n\treturn newArr\n}\n```\n\n## 测试代码\n\n```go\npackage array\n\nimport (\n\t\"log\"\n\t\"testing\"\n)\n\nvar arr = NewArray()\n\nfunc TestAdd(t *testing.T) {\n\tarr.Add(1, 2, 3, 4, 5)\n\tif arr.Count() != 5 {\n\t\tt.Fatal(\"arr count should equal 5\")\n\t}\n\tarr.ForEach(func(e interface{}) { e = e.(int) * 2; log.Println(e) })\n}\n\nfunc TestRemove(t *testing.T) {\n\tarr.Add(1, 2, 3, 4, 5)\n\tarr.Remove(2)\n\tarr.Remove(1)\n\tif arr.Count() != 3 {\n\t\tt.Fatal(\"arr count should equal 3\")\n\t}\n\tarr.ForEach(func(e interface{}) { log.Println(e) })\n}\n\nfunc TestClear(t *testing.T) {\n\tarr.Add(1, 2, 3, 4, 5)\n\tarr.Clear()\n\tif arr.Count() != 0 {\n\t\tt.Fatal(\"arr count should equal 0\")\n\t}\n\tarr.ForEach(func(e interface{}) { log.Println(e) })\n}\n\nfunc TestSort(t *testing.T) {\n\tarr.Add(5, 3, 1, 2, 4)\n\tarr2 := NewArray()\n\tarr2.Add(1, 2, 3, 4, 5)\n\tarr.Sort(func(i, j int) bool {\n\t\treturn arr.Data()[i].(int) < arr.Data()[j].(int)\n\t})\n\td1 := arr.Data()\n\td2 := arr2.Data()\n\tfor i := 0; i < 5; i++ {\n\t\tif d1[i] != d2[i] {\n\t\t\tt.FailNow()\n\t\t}\n\t}\n}\n\nfunc TestFilter(t *testing.T) {\n\tarr.Add(1, 2, 3, 4, 5)\n\ta2 := arr.Filter(func(e interface{}) bool {\n\t\treturn e.(int) > 3\n\t}).Filter(func(e interface{}) bool {\n\t\treturn e.(int) > 4\n\t})\n\tif a2.data[0] != 5 {\n\t\tt.FailNow()\n\t}\n}\n```","slug":"ws_golang_array","published":1,"updated":"2023-04-11T01:05:09.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgbl83rs0007w07k941ua0c1","content":"<h1 id=\"golang自定义动态数组\"><a href=\"#golang自定义动态数组\" class=\"headerlink\" title=\"golang自定义动态数组\"></a>golang自定义动态数组</h1><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> array</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;sort&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Array <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tdata []<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewArray</span><span class=\"params\">()</span></span> *Array &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">new</span>(Array)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Add(elems ...<span class=\"keyword\">interface</span>&#123;&#125;) &#123;</span><br><span class=\"line\">\ta.data = <span class=\"built_in\">append</span>(a.data, elems...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Remove(e <span class=\"keyword\">interface</span>&#123;&#125;) &#123;</span><br><span class=\"line\">\td := a.data</span><br><span class=\"line\">\tcnt := <span class=\"built_in\">len</span>(d)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d[i] == e &#123;</span><br><span class=\"line\">\t\t\td = <span class=\"built_in\">append</span>(d[:i], d[i+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta.data = d</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> RemoveAll(e <span class=\"keyword\">interface</span>&#123;&#125;) &#123;</span><br><span class=\"line\">\td := a.data</span><br><span class=\"line\">\tcnt := <span class=\"built_in\">len</span>(d)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d[i] == e &#123;</span><br><span class=\"line\">\t\t\td = <span class=\"built_in\">append</span>(d[:i], d[i+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta.data = d</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Contain(e <span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\td := a.data</span><br><span class=\"line\">\tcnt := <span class=\"built_in\">len</span>(d)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d[i] == e &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Count() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(a.data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> ForEach(f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span>) &#123;</span><br><span class=\"line\">\td := a.data</span><br><span class=\"line\">\tcnt := <span class=\"built_in\">len</span>(d)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\tf(d[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Clear() &#123;</span><br><span class=\"line\">\ta.data = <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Data() []<span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.data</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Sort(less <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i, j <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span>) &#123;</span><br><span class=\"line\">\tsort.Slice(a.data, less)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Filter(f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) *Array &#123;</span><br><span class=\"line\">\tnewArr := NewArray()</span><br><span class=\"line\">\td := a.data</span><br><span class=\"line\">\tcnt := <span class=\"built_in\">len</span>(d)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> f(d[i]) &#123;</span><br><span class=\"line\">\t\t\tnewArr.Add(d[i])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> array</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = NewArray()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestAdd</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr.Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> arr.Count() != <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">\t\tt.Fatal(<span class=\"string\">&quot;arr count should equal 5&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tarr.ForEach(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123; e = e.(<span class=\"type\">int</span>) * <span class=\"number\">2</span>; log.Println(e) &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestRemove</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr.Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tarr.Remove(<span class=\"number\">2</span>)</span><br><span class=\"line\">\tarr.Remove(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> arr.Count() != <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\tt.Fatal(<span class=\"string\">&quot;arr count should equal 3&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tarr.ForEach(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123; log.Println(e) &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestClear</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr.Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tarr.Clear()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> arr.Count() != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tt.Fatal(<span class=\"string\">&quot;arr count should equal 0&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tarr.ForEach(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123; log.Println(e) &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSort</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr.Add(<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">\tarr2 := NewArray()</span><br><span class=\"line\">\tarr2.Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tarr.Sort(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i, j <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr.Data()[i].(<span class=\"type\">int</span>) &lt; arr.Data()[j].(<span class=\"type\">int</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\td1 := arr.Data()</span><br><span class=\"line\">\td2 := arr2.Data()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d1[i] != d2[i] &#123;</span><br><span class=\"line\">\t\t\tt.FailNow()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestFilter</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr.Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\ta2 := arr.Filter(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e.(<span class=\"type\">int</span>) &gt; <span class=\"number\">3</span></span><br><span class=\"line\">\t&#125;).Filter(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e.(<span class=\"type\">int</span>) &gt; <span class=\"number\">4</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a2.data[<span class=\"number\">0</span>] != <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">\t\tt.FailNow()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"golang自定义动态数组\"><a href=\"#golang自定义动态数组\" class=\"headerlink\" title=\"golang自定义动态数组\"></a>golang自定义动态数组</h1><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> array</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;sort&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Array <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tdata []<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewArray</span><span class=\"params\">()</span></span> *Array &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">new</span>(Array)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Add(elems ...<span class=\"keyword\">interface</span>&#123;&#125;) &#123;</span><br><span class=\"line\">\ta.data = <span class=\"built_in\">append</span>(a.data, elems...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Remove(e <span class=\"keyword\">interface</span>&#123;&#125;) &#123;</span><br><span class=\"line\">\td := a.data</span><br><span class=\"line\">\tcnt := <span class=\"built_in\">len</span>(d)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d[i] == e &#123;</span><br><span class=\"line\">\t\t\td = <span class=\"built_in\">append</span>(d[:i], d[i+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta.data = d</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> RemoveAll(e <span class=\"keyword\">interface</span>&#123;&#125;) &#123;</span><br><span class=\"line\">\td := a.data</span><br><span class=\"line\">\tcnt := <span class=\"built_in\">len</span>(d)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d[i] == e &#123;</span><br><span class=\"line\">\t\t\td = <span class=\"built_in\">append</span>(d[:i], d[i+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta.data = d</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Contain(e <span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\td := a.data</span><br><span class=\"line\">\tcnt := <span class=\"built_in\">len</span>(d)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d[i] == e &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Count() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(a.data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> ForEach(f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span>) &#123;</span><br><span class=\"line\">\td := a.data</span><br><span class=\"line\">\tcnt := <span class=\"built_in\">len</span>(d)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\tf(d[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Clear() &#123;</span><br><span class=\"line\">\ta.data = <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Data() []<span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.data</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Sort(less <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i, j <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span>) &#123;</span><br><span class=\"line\">\tsort.Slice(a.data, less)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Array)</span></span> Filter(f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) *Array &#123;</span><br><span class=\"line\">\tnewArr := NewArray()</span><br><span class=\"line\">\td := a.data</span><br><span class=\"line\">\tcnt := <span class=\"built_in\">len</span>(d)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> f(d[i]) &#123;</span><br><span class=\"line\">\t\t\tnewArr.Add(d[i])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> newArr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> array</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = NewArray()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestAdd</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr.Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> arr.Count() != <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">\t\tt.Fatal(<span class=\"string\">&quot;arr count should equal 5&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tarr.ForEach(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123; e = e.(<span class=\"type\">int</span>) * <span class=\"number\">2</span>; log.Println(e) &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestRemove</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr.Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tarr.Remove(<span class=\"number\">2</span>)</span><br><span class=\"line\">\tarr.Remove(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> arr.Count() != <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\tt.Fatal(<span class=\"string\">&quot;arr count should equal 3&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tarr.ForEach(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123; log.Println(e) &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestClear</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr.Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tarr.Clear()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> arr.Count() != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tt.Fatal(<span class=\"string\">&quot;arr count should equal 0&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tarr.ForEach(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123; log.Println(e) &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSort</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr.Add(<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">\tarr2 := NewArray()</span><br><span class=\"line\">\tarr2.Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tarr.Sort(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i, j <span class=\"type\">int</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr.Data()[i].(<span class=\"type\">int</span>) &lt; arr.Data()[j].(<span class=\"type\">int</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\td1 := arr.Data()</span><br><span class=\"line\">\td2 := arr2.Data()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d1[i] != d2[i] &#123;</span><br><span class=\"line\">\t\t\tt.FailNow()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestFilter</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr.Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\ta2 := arr.Filter(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e.(<span class=\"type\">int</span>) &gt; <span class=\"number\">3</span></span><br><span class=\"line\">\t&#125;).Filter(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> e.(<span class=\"type\">int</span>) &gt; <span class=\"number\">4</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a2.data[<span class=\"number\">0</span>] != <span class=\"number\">5</span> &#123;</span><br><span class=\"line\">\t\tt.FailNow()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"golang中使用反射调用函数","date":"2022-12-13T14:00:30.000Z","author":"ws","description":"golang中使用reflect包动态调用函数","cover":false,"_content":"\n## reflect包中的方法/函数介绍\n\n| 方法/函数                                       | 描述                                                         |\n| :---------------------------------------------- | :----------------------------------------------------------- |\n| `TypeOf(i interface{}) Type`                    | 返回一个值的类型的反射值                                     |\n| `ValueOf(i interface{}) Value`                  | 返回一个值的反射值                                           |\n| `New(t Type) Value`                             | 返回类型 t 的零值的反射值                                    |\n| `Value.Elem() Value`                            | 返回指针或接口指向的值的反射值                               |\n| `Value.Kind() Kind`                             | 返回一个值的类型                                             |\n| `Value.Type() Type`                             | 返回一个值的类型                                             |\n| `Value.Interface() interface{}`                 | 返回一个值的接口类型                                         |\n| `Value.IsValid() bool`                          | 判断一个值是否合法                                           |\n| `Value.NumField() int`                          | 返回一个结构体类型的字段数                                   |\n| `Value.Field(i int) Value`                      | 返回结构体类型的第 i 个字段的反射值                          |\n| `Value.MethodByName(name string) (Value, bool)` | 返回一个方法的反射值，根据方法名查找                         |\n| `Value.Call(args []Value) []Value`              | 调用函数，args 为函数的参数，返回 Value 的切片               |\n| `Value.CanSet() bool`                           | 判断一个值是否可以修改                                       |\n| `Value.Set(value Value)`                        | 修改一个值的内容                                             |\n| `Type.NumMethod() int`                          | 返回一个类型的方法数                                         |\n| `Type.Method(i int) Method`                     | 返回一个类型的第 i 个方法的反射值                            |\n| `Type.MethodByName(name string) (Method, bool)` | 返回一个类型的方法的反射值，根据方法名查找                   |\n| `Type.Field(i int) StructField`                 | 返回一个结构体类型的第 i 个字段的反射值                      |\n| `Type.NumField() int`                           | 返回一个结构体类型的字段数                                   |\n| `Type.Kind() Kind`                              | 返回一个类型的种类                                           |\n| `Type.Name() string`                            | 返回一个类型的名称                                           |\n| `Type.PkgPath() string`                         | 返回一个类型的包路径                                         |\n| `Type.String() string`                          | 返回一个类型的字符串表示                                     |\n| `FuncOf(in, out []Type, variadic bool) Type`    | 返回一个函数类型的反射值，参数 in 是入参类型，out 是出参类型 |\n\n## 动态调用函数\n\n```go\nfunc CallFunc(fn interface{}, arguments ...interface{}) ([]interface{}, error) {\n\tvar args []reflect.Value\n\trv := reflect.ValueOf(fn)\n\tif rv.Kind() != reflect.Func {\n\t\treturn nil, fmt.Errorf(\"not a function, kind: %s\", rv.Kind())\n\t}\n\tfor numArgs, rt, i := len(arguments), rv.Type(), 0; i < numArgs; i++ {\n\t\tif arguments[i] == nil {\n\t\t\targs = append(args, reflect.New(rt.In(i)).Elem())\n\t\t} else {\n\t\t\targs = append(args, reflect.ValueOf(arguments[i]))\n\t\t}\n\t}\n\tres := rv.Call(args)\n\tinterfaces := make([]interface{}, len(res))\n\tfor i, v := range res {\n\t\tinterfaces[i] = v.Interface()\n\t}\n\treturn interfaces, nil\n}\n```\n\n## 根据方法名调用函数\n\n```go\nfunc CallFuncByName(obj interface{}, methodName interface{}, arguments ...interface{}) ([]interface{}, error) {\n\tvar args []reflect.Value\n\tf := reflect.ValueOf(obj).MethodByName(methodName.(string))\n\tif !f.IsValid() {\n\t\treturn nil, fmt.Errorf(\"method not found, current: %s\", methodName)\n\t}\n\tfor numArgs, rt, i := len(arguments), f.Type(), 0; i < numArgs; i++ {\n\t\tif arguments[i] == nil {\n\t\t\targs = append(args, reflect.New(rt.In(i)).Elem())\n\t\t} else {\n\t\t\targs = append(args, reflect.ValueOf(arguments[i]))\n\t\t}\n\t}\n\tres := f.Call(args)\n\tinterfaces := make([]interface{}, len(res))\n\tfor i, v := range res {\n\t\tinterfaces[i] = v.Interface()\n\t}\n\treturn interfaces, nil\n}\n```\n\n## 完整代码\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"strconv\"\n)\n\ntype DynamicFunc struct {\n\tName string\n\tArgs []interface{}\n}\n\nfunc (DynamicFunc) AddFunc(args ...int) (res int) {\n\tfor _, v := range args {\n\t\tres += v\n\t}\n\treturn\n}\n\nfunc CallFuncByName(obj interface{}, methodName interface{}, arguments ...interface{}) ([]interface{}, error) {\n\tvar args []reflect.Value\n\tf := reflect.ValueOf(obj).MethodByName(methodName.(string))\n\tif !f.IsValid() {\n\t\treturn nil, fmt.Errorf(\"method not found, current: %s\", methodName)\n\t}\n\tfor numArgs, rt, i := len(arguments), f.Type(), 0; i < numArgs; i++ {\n\t\tif arguments[i] == nil {\n\t\t\targs = append(args, reflect.New(rt.In(i)).Elem())\n\t\t} else {\n\t\t\targs = append(args, reflect.ValueOf(arguments[i]))\n\t\t}\n\t}\n\tres := f.Call(args)\n\tinterfaces := make([]interface{}, len(res))\n\tfor i, v := range res {\n\t\tinterfaces[i] = v.Interface()\n\t}\n\treturn interfaces, nil\n}\n\nfunc CallFunc(fn interface{}, arguments ...interface{}) ([]interface{}, error) {\n\tvar args []reflect.Value\n\trv := reflect.ValueOf(fn)\n\tif rv.Kind() != reflect.Func {\n\t\treturn nil, fmt.Errorf(\"not a function, kind: %s\", rv.Kind())\n\t}\n\tfor numArgs, rt, i := len(arguments), rv.Type(), 0; i < numArgs; i++ {\n\t\tif arguments[i] == nil {\n\t\t\targs = append(args, reflect.New(rt.In(i)).Elem())\n\t\t} else {\n\t\t\targs = append(args, reflect.ValueOf(arguments[i]))\n\t\t}\n\t}\n\tres := rv.Call(args)\n\tinterfaces := make([]interface{}, len(res))\n\tfor i, v := range res {\n\t\tinterfaces[i] = v.Interface()\n\t}\n\treturn interfaces, nil\n}\n\nfunc AnyAdd(args ...interface{}) (res int, err error) {\n\tfor i, param := range args {\n\t\tval := reflect.ValueOf(param)\n\t\tswitch val.Kind() {\n\t\tcase reflect.String:\n\t\t\tiVal, err := strconv.Atoi(val.String())\n\t\t\tif err != nil {\n\t\t\t\treturn 0, err\n\t\t\t}\n\t\t\tres += iVal\n\t\tcase reflect.Int:\n\t\t\tres += int(val.Int())\n\t\tcase reflect.Array, reflect.Slice:\n\t\t\tcnt := val.Len()\n\t\t\tfor i := 0; i < cnt; i++ {\n\t\t\t\tres += int(val.Index(i).Int())\n\t\t\t}\n\t\tdefault:\n\t\t\treturn 0, fmt.Errorf(\"param invalid, index: %d\", i)\n\t\t}\n\t}\n\treturn\n}\n\nfunc TestCallFuncByName() {\n\t// 不存在的函数调用的检验\n\tdf := DynamicFunc{Name: \"FmtFunc\"}\n\t_, err := CallFuncByName(df, df.Name, df.Args...)\n\tfmt.Println(\"CallFuncByName FmtFunc Expect:\", \"method not found, current: FmtFunc\")\n\tfmt.Println(\"CallFuncByName FmtFunc Actual:\", err)\n\tfmt.Println()\n\t// 通过名称调用函数的检验\n\tdf = DynamicFunc{Name: \"AddFunc\", Args: []interface{}{1, 2, 3, 4, 5}}\n\tfmt.Println(\"CallFuncByName AddFunc Args:\", df.Args)\n\tres, err := CallFuncByName(df, df.Name, df.Args...)\n\tif err != nil {\n\t\tfmt.Println(err)\n        return\n\t}\n\tfmt.Println(\"CallFuncByName AddFunc Expect:\", 15)\n\tfmt.Println(\"CallFuncByName AddFunc Actual:\", res, \"error:\", err)\n\tfmt.Println()\n}\n\nfunc TestCallFunc() {\n\t// 动态调用函数的检验\n\tres, err := CallFunc(AnyAdd, 1, \"2\", []int{3, 6, 9})\n\tfmt.Println(\"CallFunc AnyAdd Args:\", 1, \"2\", []int{3, 6, 9})\n\tif err != nil {\n\t\tfmt.Println(err)\n        return\n\t}\n\tfmt.Println(\"CallFunc AnyAdd Expect:\", 21)\n\tfmt.Println(\"CallFunc AnyAdd Actual:\", res, \"error:\", err)\n}\n\nfunc main() {\n\tTestCallFuncByName()\n\tTestCallFunc()\n}\n```\n\n## 输出结果\n\n> CallFuncByName FmtFunc Expect: method not found, current: FmtFunc\n> CallFuncByName FmtFunc Actual: method not found, current: FmtFunc\n>\n> CallFuncByName AddFunc Args: [1 2 3 4 5]\n> CallFuncByName AddFunc Expect: 15\n> CallFuncByName AddFunc Actual: [15] error: <nil>\n>\n> CallFunc AnyAdd Args: 1 2 [3 6 9]\n> CallFunc AnyAdd Expect: 21\n> CallFunc AnyAdd Actual: [21 <nil>] error: <nil>","source":"_posts/ws_golang_reflect_call_func.md","raw":"---\ntitle: golang中使用反射调用函数\ndate: 2022-12-13 22:00:30\nauthor: ws\ndescription: golang中使用reflect包动态调用函数\ncategories: golang\ntags: [golang, reflect]\ncover: false\n---\n\n## reflect包中的方法/函数介绍\n\n| 方法/函数                                       | 描述                                                         |\n| :---------------------------------------------- | :----------------------------------------------------------- |\n| `TypeOf(i interface{}) Type`                    | 返回一个值的类型的反射值                                     |\n| `ValueOf(i interface{}) Value`                  | 返回一个值的反射值                                           |\n| `New(t Type) Value`                             | 返回类型 t 的零值的反射值                                    |\n| `Value.Elem() Value`                            | 返回指针或接口指向的值的反射值                               |\n| `Value.Kind() Kind`                             | 返回一个值的类型                                             |\n| `Value.Type() Type`                             | 返回一个值的类型                                             |\n| `Value.Interface() interface{}`                 | 返回一个值的接口类型                                         |\n| `Value.IsValid() bool`                          | 判断一个值是否合法                                           |\n| `Value.NumField() int`                          | 返回一个结构体类型的字段数                                   |\n| `Value.Field(i int) Value`                      | 返回结构体类型的第 i 个字段的反射值                          |\n| `Value.MethodByName(name string) (Value, bool)` | 返回一个方法的反射值，根据方法名查找                         |\n| `Value.Call(args []Value) []Value`              | 调用函数，args 为函数的参数，返回 Value 的切片               |\n| `Value.CanSet() bool`                           | 判断一个值是否可以修改                                       |\n| `Value.Set(value Value)`                        | 修改一个值的内容                                             |\n| `Type.NumMethod() int`                          | 返回一个类型的方法数                                         |\n| `Type.Method(i int) Method`                     | 返回一个类型的第 i 个方法的反射值                            |\n| `Type.MethodByName(name string) (Method, bool)` | 返回一个类型的方法的反射值，根据方法名查找                   |\n| `Type.Field(i int) StructField`                 | 返回一个结构体类型的第 i 个字段的反射值                      |\n| `Type.NumField() int`                           | 返回一个结构体类型的字段数                                   |\n| `Type.Kind() Kind`                              | 返回一个类型的种类                                           |\n| `Type.Name() string`                            | 返回一个类型的名称                                           |\n| `Type.PkgPath() string`                         | 返回一个类型的包路径                                         |\n| `Type.String() string`                          | 返回一个类型的字符串表示                                     |\n| `FuncOf(in, out []Type, variadic bool) Type`    | 返回一个函数类型的反射值，参数 in 是入参类型，out 是出参类型 |\n\n## 动态调用函数\n\n```go\nfunc CallFunc(fn interface{}, arguments ...interface{}) ([]interface{}, error) {\n\tvar args []reflect.Value\n\trv := reflect.ValueOf(fn)\n\tif rv.Kind() != reflect.Func {\n\t\treturn nil, fmt.Errorf(\"not a function, kind: %s\", rv.Kind())\n\t}\n\tfor numArgs, rt, i := len(arguments), rv.Type(), 0; i < numArgs; i++ {\n\t\tif arguments[i] == nil {\n\t\t\targs = append(args, reflect.New(rt.In(i)).Elem())\n\t\t} else {\n\t\t\targs = append(args, reflect.ValueOf(arguments[i]))\n\t\t}\n\t}\n\tres := rv.Call(args)\n\tinterfaces := make([]interface{}, len(res))\n\tfor i, v := range res {\n\t\tinterfaces[i] = v.Interface()\n\t}\n\treturn interfaces, nil\n}\n```\n\n## 根据方法名调用函数\n\n```go\nfunc CallFuncByName(obj interface{}, methodName interface{}, arguments ...interface{}) ([]interface{}, error) {\n\tvar args []reflect.Value\n\tf := reflect.ValueOf(obj).MethodByName(methodName.(string))\n\tif !f.IsValid() {\n\t\treturn nil, fmt.Errorf(\"method not found, current: %s\", methodName)\n\t}\n\tfor numArgs, rt, i := len(arguments), f.Type(), 0; i < numArgs; i++ {\n\t\tif arguments[i] == nil {\n\t\t\targs = append(args, reflect.New(rt.In(i)).Elem())\n\t\t} else {\n\t\t\targs = append(args, reflect.ValueOf(arguments[i]))\n\t\t}\n\t}\n\tres := f.Call(args)\n\tinterfaces := make([]interface{}, len(res))\n\tfor i, v := range res {\n\t\tinterfaces[i] = v.Interface()\n\t}\n\treturn interfaces, nil\n}\n```\n\n## 完整代码\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"strconv\"\n)\n\ntype DynamicFunc struct {\n\tName string\n\tArgs []interface{}\n}\n\nfunc (DynamicFunc) AddFunc(args ...int) (res int) {\n\tfor _, v := range args {\n\t\tres += v\n\t}\n\treturn\n}\n\nfunc CallFuncByName(obj interface{}, methodName interface{}, arguments ...interface{}) ([]interface{}, error) {\n\tvar args []reflect.Value\n\tf := reflect.ValueOf(obj).MethodByName(methodName.(string))\n\tif !f.IsValid() {\n\t\treturn nil, fmt.Errorf(\"method not found, current: %s\", methodName)\n\t}\n\tfor numArgs, rt, i := len(arguments), f.Type(), 0; i < numArgs; i++ {\n\t\tif arguments[i] == nil {\n\t\t\targs = append(args, reflect.New(rt.In(i)).Elem())\n\t\t} else {\n\t\t\targs = append(args, reflect.ValueOf(arguments[i]))\n\t\t}\n\t}\n\tres := f.Call(args)\n\tinterfaces := make([]interface{}, len(res))\n\tfor i, v := range res {\n\t\tinterfaces[i] = v.Interface()\n\t}\n\treturn interfaces, nil\n}\n\nfunc CallFunc(fn interface{}, arguments ...interface{}) ([]interface{}, error) {\n\tvar args []reflect.Value\n\trv := reflect.ValueOf(fn)\n\tif rv.Kind() != reflect.Func {\n\t\treturn nil, fmt.Errorf(\"not a function, kind: %s\", rv.Kind())\n\t}\n\tfor numArgs, rt, i := len(arguments), rv.Type(), 0; i < numArgs; i++ {\n\t\tif arguments[i] == nil {\n\t\t\targs = append(args, reflect.New(rt.In(i)).Elem())\n\t\t} else {\n\t\t\targs = append(args, reflect.ValueOf(arguments[i]))\n\t\t}\n\t}\n\tres := rv.Call(args)\n\tinterfaces := make([]interface{}, len(res))\n\tfor i, v := range res {\n\t\tinterfaces[i] = v.Interface()\n\t}\n\treturn interfaces, nil\n}\n\nfunc AnyAdd(args ...interface{}) (res int, err error) {\n\tfor i, param := range args {\n\t\tval := reflect.ValueOf(param)\n\t\tswitch val.Kind() {\n\t\tcase reflect.String:\n\t\t\tiVal, err := strconv.Atoi(val.String())\n\t\t\tif err != nil {\n\t\t\t\treturn 0, err\n\t\t\t}\n\t\t\tres += iVal\n\t\tcase reflect.Int:\n\t\t\tres += int(val.Int())\n\t\tcase reflect.Array, reflect.Slice:\n\t\t\tcnt := val.Len()\n\t\t\tfor i := 0; i < cnt; i++ {\n\t\t\t\tres += int(val.Index(i).Int())\n\t\t\t}\n\t\tdefault:\n\t\t\treturn 0, fmt.Errorf(\"param invalid, index: %d\", i)\n\t\t}\n\t}\n\treturn\n}\n\nfunc TestCallFuncByName() {\n\t// 不存在的函数调用的检验\n\tdf := DynamicFunc{Name: \"FmtFunc\"}\n\t_, err := CallFuncByName(df, df.Name, df.Args...)\n\tfmt.Println(\"CallFuncByName FmtFunc Expect:\", \"method not found, current: FmtFunc\")\n\tfmt.Println(\"CallFuncByName FmtFunc Actual:\", err)\n\tfmt.Println()\n\t// 通过名称调用函数的检验\n\tdf = DynamicFunc{Name: \"AddFunc\", Args: []interface{}{1, 2, 3, 4, 5}}\n\tfmt.Println(\"CallFuncByName AddFunc Args:\", df.Args)\n\tres, err := CallFuncByName(df, df.Name, df.Args...)\n\tif err != nil {\n\t\tfmt.Println(err)\n        return\n\t}\n\tfmt.Println(\"CallFuncByName AddFunc Expect:\", 15)\n\tfmt.Println(\"CallFuncByName AddFunc Actual:\", res, \"error:\", err)\n\tfmt.Println()\n}\n\nfunc TestCallFunc() {\n\t// 动态调用函数的检验\n\tres, err := CallFunc(AnyAdd, 1, \"2\", []int{3, 6, 9})\n\tfmt.Println(\"CallFunc AnyAdd Args:\", 1, \"2\", []int{3, 6, 9})\n\tif err != nil {\n\t\tfmt.Println(err)\n        return\n\t}\n\tfmt.Println(\"CallFunc AnyAdd Expect:\", 21)\n\tfmt.Println(\"CallFunc AnyAdd Actual:\", res, \"error:\", err)\n}\n\nfunc main() {\n\tTestCallFuncByName()\n\tTestCallFunc()\n}\n```\n\n## 输出结果\n\n> CallFuncByName FmtFunc Expect: method not found, current: FmtFunc\n> CallFuncByName FmtFunc Actual: method not found, current: FmtFunc\n>\n> CallFuncByName AddFunc Args: [1 2 3 4 5]\n> CallFuncByName AddFunc Expect: 15\n> CallFuncByName AddFunc Actual: [15] error: <nil>\n>\n> CallFunc AnyAdd Args: 1 2 [3 6 9]\n> CallFunc AnyAdd Expect: 21\n> CallFunc AnyAdd Actual: [21 <nil>] error: <nil>","slug":"ws_golang_reflect_call_func","published":1,"updated":"2023-04-11T01:05:08.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgbl83ru0009w07kal6ce0yi","content":"<h2 id=\"reflect包中的方法-x2F-函数介绍\"><a href=\"#reflect包中的方法-x2F-函数介绍\" class=\"headerlink\" title=\"reflect包中的方法&#x2F;函数介绍\"></a>reflect包中的方法&#x2F;函数介绍</h2><table>\n<thead>\n<tr>\n<th align=\"left\">方法&#x2F;函数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>TypeOf(i interface&#123;&#125;) Type</code></td>\n<td align=\"left\">返回一个值的类型的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ValueOf(i interface&#123;&#125;) Value</code></td>\n<td align=\"left\">返回一个值的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>New(t Type) Value</code></td>\n<td align=\"left\">返回类型 t 的零值的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Elem() Value</code></td>\n<td align=\"left\">返回指针或接口指向的值的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Kind() Kind</code></td>\n<td align=\"left\">返回一个值的类型</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Type() Type</code></td>\n<td align=\"left\">返回一个值的类型</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Interface() interface&#123;&#125;</code></td>\n<td align=\"left\">返回一个值的接口类型</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.IsValid() bool</code></td>\n<td align=\"left\">判断一个值是否合法</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.NumField() int</code></td>\n<td align=\"left\">返回一个结构体类型的字段数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Field(i int) Value</code></td>\n<td align=\"left\">返回结构体类型的第 i 个字段的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.MethodByName(name string) (Value, bool)</code></td>\n<td align=\"left\">返回一个方法的反射值，根据方法名查找</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Call(args []Value) []Value</code></td>\n<td align=\"left\">调用函数，args 为函数的参数，返回 Value 的切片</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.CanSet() bool</code></td>\n<td align=\"left\">判断一个值是否可以修改</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Set(value Value)</code></td>\n<td align=\"left\">修改一个值的内容</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.NumMethod() int</code></td>\n<td align=\"left\">返回一个类型的方法数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.Method(i int) Method</code></td>\n<td align=\"left\">返回一个类型的第 i 个方法的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.MethodByName(name string) (Method, bool)</code></td>\n<td align=\"left\">返回一个类型的方法的反射值，根据方法名查找</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.Field(i int) StructField</code></td>\n<td align=\"left\">返回一个结构体类型的第 i 个字段的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.NumField() int</code></td>\n<td align=\"left\">返回一个结构体类型的字段数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.Kind() Kind</code></td>\n<td align=\"left\">返回一个类型的种类</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.Name() string</code></td>\n<td align=\"left\">返回一个类型的名称</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.PkgPath() string</code></td>\n<td align=\"left\">返回一个类型的包路径</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.String() string</code></td>\n<td align=\"left\">返回一个类型的字符串表示</td>\n</tr>\n<tr>\n<td align=\"left\"><code>FuncOf(in, out []Type, variadic bool) Type</code></td>\n<td align=\"left\">返回一个函数类型的反射值，参数 in 是入参类型，out 是出参类型</td>\n</tr>\n</tbody></table>\n<h2 id=\"动态调用函数\"><a href=\"#动态调用函数\" class=\"headerlink\" title=\"动态调用函数\"></a>动态调用函数</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CallFunc</span><span class=\"params\">(fn <span class=\"keyword\">interface</span>&#123;&#125;, arguments ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> ([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> args []reflect.Value</span><br><span class=\"line\">\trv := reflect.ValueOf(fn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> rv.Kind() != reflect.Func &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;not a function, kind: %s&quot;</span>, rv.Kind())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> numArgs, rt, i := <span class=\"built_in\">len</span>(arguments), rv.Type(), <span class=\"number\">0</span>; i &lt; numArgs; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> arguments[i] == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.New(rt.In(i)).Elem())</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.ValueOf(arguments[i]))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := rv.Call(args)</span><br><span class=\"line\">\tinterfaces := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"built_in\">len</span>(res))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> res &#123;</span><br><span class=\"line\">\t\tinterfaces[i] = v.Interface()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> interfaces, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"根据方法名调用函数\"><a href=\"#根据方法名调用函数\" class=\"headerlink\" title=\"根据方法名调用函数\"></a>根据方法名调用函数</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CallFuncByName</span><span class=\"params\">(obj <span class=\"keyword\">interface</span>&#123;&#125;, methodName <span class=\"keyword\">interface</span>&#123;&#125;, arguments ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> ([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> args []reflect.Value</span><br><span class=\"line\">\tf := reflect.ValueOf(obj).MethodByName(methodName.(<span class=\"type\">string</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !f.IsValid() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;method not found, current: %s&quot;</span>, methodName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> numArgs, rt, i := <span class=\"built_in\">len</span>(arguments), f.Type(), <span class=\"number\">0</span>; i &lt; numArgs; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> arguments[i] == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.New(rt.In(i)).Elem())</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.ValueOf(arguments[i]))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := f.Call(args)</span><br><span class=\"line\">\tinterfaces := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"built_in\">len</span>(res))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> res &#123;</span><br><span class=\"line\">\t\tinterfaces[i] = v.Interface()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> interfaces, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DynamicFunc <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tArgs []<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(DynamicFunc)</span></span> AddFunc(args ...<span class=\"type\">int</span>) (res <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> args &#123;</span><br><span class=\"line\">\t\tres += v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CallFuncByName</span><span class=\"params\">(obj <span class=\"keyword\">interface</span>&#123;&#125;, methodName <span class=\"keyword\">interface</span>&#123;&#125;, arguments ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> ([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> args []reflect.Value</span><br><span class=\"line\">\tf := reflect.ValueOf(obj).MethodByName(methodName.(<span class=\"type\">string</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !f.IsValid() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;method not found, current: %s&quot;</span>, methodName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> numArgs, rt, i := <span class=\"built_in\">len</span>(arguments), f.Type(), <span class=\"number\">0</span>; i &lt; numArgs; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> arguments[i] == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.New(rt.In(i)).Elem())</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.ValueOf(arguments[i]))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := f.Call(args)</span><br><span class=\"line\">\tinterfaces := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"built_in\">len</span>(res))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> res &#123;</span><br><span class=\"line\">\t\tinterfaces[i] = v.Interface()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> interfaces, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CallFunc</span><span class=\"params\">(fn <span class=\"keyword\">interface</span>&#123;&#125;, arguments ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> ([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> args []reflect.Value</span><br><span class=\"line\">\trv := reflect.ValueOf(fn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> rv.Kind() != reflect.Func &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;not a function, kind: %s&quot;</span>, rv.Kind())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> numArgs, rt, i := <span class=\"built_in\">len</span>(arguments), rv.Type(), <span class=\"number\">0</span>; i &lt; numArgs; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> arguments[i] == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.New(rt.In(i)).Elem())</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.ValueOf(arguments[i]))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := rv.Call(args)</span><br><span class=\"line\">\tinterfaces := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"built_in\">len</span>(res))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> res &#123;</span><br><span class=\"line\">\t\tinterfaces[i] = v.Interface()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> interfaces, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AnyAdd</span><span class=\"params\">(args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> (res <span class=\"type\">int</span>, err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, param := <span class=\"keyword\">range</span> args &#123;</span><br><span class=\"line\">\t\tval := reflect.ValueOf(param)</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> val.Kind() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> reflect.String:</span><br><span class=\"line\">\t\t\tiVal, err := strconv.Atoi(val.String())</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tres += iVal</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> reflect.Int:</span><br><span class=\"line\">\t\t\tres += <span class=\"type\">int</span>(val.Int())</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> reflect.Array, reflect.Slice:</span><br><span class=\"line\">\t\t\tcnt := val.Len()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t\t\tres += <span class=\"type\">int</span>(val.Index(i).Int())</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, fmt.Errorf(<span class=\"string\">&quot;param invalid, index: %d&quot;</span>, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestCallFuncByName</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 不存在的函数调用的检验</span></span><br><span class=\"line\">\tdf := DynamicFunc&#123;Name: <span class=\"string\">&quot;FmtFunc&quot;</span>&#125;</span><br><span class=\"line\">\t_, err := CallFuncByName(df, df.Name, df.Args...)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFuncByName FmtFunc Expect:&quot;</span>, <span class=\"string\">&quot;method not found, current: FmtFunc&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFuncByName FmtFunc Actual:&quot;</span>, err)</span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">\t<span class=\"comment\">// 通过名称调用函数的检验</span></span><br><span class=\"line\">\tdf = DynamicFunc&#123;Name: <span class=\"string\">&quot;AddFunc&quot;</span>, Args: []<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFuncByName AddFunc Args:&quot;</span>, df.Args)</span><br><span class=\"line\">\tres, err := CallFuncByName(df, df.Name, df.Args...)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFuncByName AddFunc Expect:&quot;</span>, <span class=\"number\">15</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFuncByName AddFunc Actual:&quot;</span>, res, <span class=\"string\">&quot;error:&quot;</span>, err)</span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestCallFunc</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 动态调用函数的检验</span></span><br><span class=\"line\">\tres, err := CallFunc(AnyAdd, <span class=\"number\">1</span>, <span class=\"string\">&quot;2&quot;</span>, []<span class=\"type\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>&#125;)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFunc AnyAdd Args:&quot;</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;2&quot;</span>, []<span class=\"type\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFunc AnyAdd Expect:&quot;</span>, <span class=\"number\">21</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFunc AnyAdd Actual:&quot;</span>, res, <span class=\"string\">&quot;error:&quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tTestCallFuncByName()</span><br><span class=\"line\">\tTestCallFunc()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h2><blockquote>\n<p>CallFuncByName FmtFunc Expect: method not found, current: FmtFunc<br>CallFuncByName FmtFunc Actual: method not found, current: FmtFunc</p>\n<p>CallFuncByName AddFunc Args: [1 2 3 4 5]<br>CallFuncByName AddFunc Expect: 15<br>CallFuncByName AddFunc Actual: [15] error: <nil></p>\n<p>CallFunc AnyAdd Args: 1 2 [3 6 9]<br>CallFunc AnyAdd Expect: 21<br>CallFunc AnyAdd Actual: [21 <nil>] error: <nil></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"reflect包中的方法-x2F-函数介绍\"><a href=\"#reflect包中的方法-x2F-函数介绍\" class=\"headerlink\" title=\"reflect包中的方法&#x2F;函数介绍\"></a>reflect包中的方法&#x2F;函数介绍</h2><table>\n<thead>\n<tr>\n<th align=\"left\">方法&#x2F;函数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>TypeOf(i interface&#123;&#125;) Type</code></td>\n<td align=\"left\">返回一个值的类型的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ValueOf(i interface&#123;&#125;) Value</code></td>\n<td align=\"left\">返回一个值的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>New(t Type) Value</code></td>\n<td align=\"left\">返回类型 t 的零值的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Elem() Value</code></td>\n<td align=\"left\">返回指针或接口指向的值的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Kind() Kind</code></td>\n<td align=\"left\">返回一个值的类型</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Type() Type</code></td>\n<td align=\"left\">返回一个值的类型</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Interface() interface&#123;&#125;</code></td>\n<td align=\"left\">返回一个值的接口类型</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.IsValid() bool</code></td>\n<td align=\"left\">判断一个值是否合法</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.NumField() int</code></td>\n<td align=\"left\">返回一个结构体类型的字段数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Field(i int) Value</code></td>\n<td align=\"left\">返回结构体类型的第 i 个字段的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.MethodByName(name string) (Value, bool)</code></td>\n<td align=\"left\">返回一个方法的反射值，根据方法名查找</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Call(args []Value) []Value</code></td>\n<td align=\"left\">调用函数，args 为函数的参数，返回 Value 的切片</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.CanSet() bool</code></td>\n<td align=\"left\">判断一个值是否可以修改</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Value.Set(value Value)</code></td>\n<td align=\"left\">修改一个值的内容</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.NumMethod() int</code></td>\n<td align=\"left\">返回一个类型的方法数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.Method(i int) Method</code></td>\n<td align=\"left\">返回一个类型的第 i 个方法的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.MethodByName(name string) (Method, bool)</code></td>\n<td align=\"left\">返回一个类型的方法的反射值，根据方法名查找</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.Field(i int) StructField</code></td>\n<td align=\"left\">返回一个结构体类型的第 i 个字段的反射值</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.NumField() int</code></td>\n<td align=\"left\">返回一个结构体类型的字段数</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.Kind() Kind</code></td>\n<td align=\"left\">返回一个类型的种类</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.Name() string</code></td>\n<td align=\"left\">返回一个类型的名称</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.PkgPath() string</code></td>\n<td align=\"left\">返回一个类型的包路径</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Type.String() string</code></td>\n<td align=\"left\">返回一个类型的字符串表示</td>\n</tr>\n<tr>\n<td align=\"left\"><code>FuncOf(in, out []Type, variadic bool) Type</code></td>\n<td align=\"left\">返回一个函数类型的反射值，参数 in 是入参类型，out 是出参类型</td>\n</tr>\n</tbody></table>\n<h2 id=\"动态调用函数\"><a href=\"#动态调用函数\" class=\"headerlink\" title=\"动态调用函数\"></a>动态调用函数</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CallFunc</span><span class=\"params\">(fn <span class=\"keyword\">interface</span>&#123;&#125;, arguments ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> ([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> args []reflect.Value</span><br><span class=\"line\">\trv := reflect.ValueOf(fn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> rv.Kind() != reflect.Func &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;not a function, kind: %s&quot;</span>, rv.Kind())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> numArgs, rt, i := <span class=\"built_in\">len</span>(arguments), rv.Type(), <span class=\"number\">0</span>; i &lt; numArgs; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> arguments[i] == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.New(rt.In(i)).Elem())</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.ValueOf(arguments[i]))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := rv.Call(args)</span><br><span class=\"line\">\tinterfaces := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"built_in\">len</span>(res))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> res &#123;</span><br><span class=\"line\">\t\tinterfaces[i] = v.Interface()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> interfaces, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"根据方法名调用函数\"><a href=\"#根据方法名调用函数\" class=\"headerlink\" title=\"根据方法名调用函数\"></a>根据方法名调用函数</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CallFuncByName</span><span class=\"params\">(obj <span class=\"keyword\">interface</span>&#123;&#125;, methodName <span class=\"keyword\">interface</span>&#123;&#125;, arguments ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> ([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> args []reflect.Value</span><br><span class=\"line\">\tf := reflect.ValueOf(obj).MethodByName(methodName.(<span class=\"type\">string</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !f.IsValid() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;method not found, current: %s&quot;</span>, methodName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> numArgs, rt, i := <span class=\"built_in\">len</span>(arguments), f.Type(), <span class=\"number\">0</span>; i &lt; numArgs; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> arguments[i] == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.New(rt.In(i)).Elem())</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.ValueOf(arguments[i]))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := f.Call(args)</span><br><span class=\"line\">\tinterfaces := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"built_in\">len</span>(res))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> res &#123;</span><br><span class=\"line\">\t\tinterfaces[i] = v.Interface()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> interfaces, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DynamicFunc <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tArgs []<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(DynamicFunc)</span></span> AddFunc(args ...<span class=\"type\">int</span>) (res <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> args &#123;</span><br><span class=\"line\">\t\tres += v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CallFuncByName</span><span class=\"params\">(obj <span class=\"keyword\">interface</span>&#123;&#125;, methodName <span class=\"keyword\">interface</span>&#123;&#125;, arguments ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> ([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> args []reflect.Value</span><br><span class=\"line\">\tf := reflect.ValueOf(obj).MethodByName(methodName.(<span class=\"type\">string</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !f.IsValid() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;method not found, current: %s&quot;</span>, methodName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> numArgs, rt, i := <span class=\"built_in\">len</span>(arguments), f.Type(), <span class=\"number\">0</span>; i &lt; numArgs; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> arguments[i] == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.New(rt.In(i)).Elem())</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.ValueOf(arguments[i]))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := f.Call(args)</span><br><span class=\"line\">\tinterfaces := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"built_in\">len</span>(res))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> res &#123;</span><br><span class=\"line\">\t\tinterfaces[i] = v.Interface()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> interfaces, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CallFunc</span><span class=\"params\">(fn <span class=\"keyword\">interface</span>&#123;&#125;, arguments ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> ([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> args []reflect.Value</span><br><span class=\"line\">\trv := reflect.ValueOf(fn)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> rv.Kind() != reflect.Func &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;not a function, kind: %s&quot;</span>, rv.Kind())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> numArgs, rt, i := <span class=\"built_in\">len</span>(arguments), rv.Type(), <span class=\"number\">0</span>; i &lt; numArgs; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> arguments[i] == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.New(rt.In(i)).Elem())</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\targs = <span class=\"built_in\">append</span>(args, reflect.ValueOf(arguments[i]))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres := rv.Call(args)</span><br><span class=\"line\">\tinterfaces := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"built_in\">len</span>(res))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> res &#123;</span><br><span class=\"line\">\t\tinterfaces[i] = v.Interface()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> interfaces, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AnyAdd</span><span class=\"params\">(args ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> (res <span class=\"type\">int</span>, err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, param := <span class=\"keyword\">range</span> args &#123;</span><br><span class=\"line\">\t\tval := reflect.ValueOf(param)</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> val.Kind() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> reflect.String:</span><br><span class=\"line\">\t\t\tiVal, err := strconv.Atoi(val.String())</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tres += iVal</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> reflect.Int:</span><br><span class=\"line\">\t\t\tres += <span class=\"type\">int</span>(val.Int())</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> reflect.Array, reflect.Slice:</span><br><span class=\"line\">\t\t\tcnt := val.Len()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t\t\tres += <span class=\"type\">int</span>(val.Index(i).Int())</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, fmt.Errorf(<span class=\"string\">&quot;param invalid, index: %d&quot;</span>, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestCallFuncByName</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 不存在的函数调用的检验</span></span><br><span class=\"line\">\tdf := DynamicFunc&#123;Name: <span class=\"string\">&quot;FmtFunc&quot;</span>&#125;</span><br><span class=\"line\">\t_, err := CallFuncByName(df, df.Name, df.Args...)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFuncByName FmtFunc Expect:&quot;</span>, <span class=\"string\">&quot;method not found, current: FmtFunc&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFuncByName FmtFunc Actual:&quot;</span>, err)</span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">\t<span class=\"comment\">// 通过名称调用函数的检验</span></span><br><span class=\"line\">\tdf = DynamicFunc&#123;Name: <span class=\"string\">&quot;AddFunc&quot;</span>, Args: []<span class=\"keyword\">interface</span>&#123;&#125;&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFuncByName AddFunc Args:&quot;</span>, df.Args)</span><br><span class=\"line\">\tres, err := CallFuncByName(df, df.Name, df.Args...)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFuncByName AddFunc Expect:&quot;</span>, <span class=\"number\">15</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFuncByName AddFunc Actual:&quot;</span>, res, <span class=\"string\">&quot;error:&quot;</span>, err)</span><br><span class=\"line\">\tfmt.Println()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestCallFunc</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 动态调用函数的检验</span></span><br><span class=\"line\">\tres, err := CallFunc(AnyAdd, <span class=\"number\">1</span>, <span class=\"string\">&quot;2&quot;</span>, []<span class=\"type\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>&#125;)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFunc AnyAdd Args:&quot;</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;2&quot;</span>, []<span class=\"type\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFunc AnyAdd Expect:&quot;</span>, <span class=\"number\">21</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;CallFunc AnyAdd Actual:&quot;</span>, res, <span class=\"string\">&quot;error:&quot;</span>, err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tTestCallFuncByName()</span><br><span class=\"line\">\tTestCallFunc()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h2><blockquote>\n<p>CallFuncByName FmtFunc Expect: method not found, current: FmtFunc<br>CallFuncByName FmtFunc Actual: method not found, current: FmtFunc</p>\n<p>CallFuncByName AddFunc Args: [1 2 3 4 5]<br>CallFuncByName AddFunc Expect: 15<br>CallFuncByName AddFunc Actual: [15] error: <nil></p>\n<p>CallFunc AnyAdd Args: 1 2 [3 6 9]<br>CallFunc AnyAdd Expect: 21<br>CallFunc AnyAdd Actual: [21 <nil>] error: <nil></p>\n</blockquote>\n"},{"title":"golang扩展string","date":"2022-04-29T15:18:30.000Z","author":"ws","description":"golang扩展string","cover":"/img/17.jpg","_content":"\n# golang扩展string\n\n## 完整代码\n\n```go\npackage stringEx\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype String struct {\n\tstr string\n}\n\nfunc NewString(s string) *String {\n\treturn &String{str: s}\n}\n\nfunc (s *String) Contain(substr string) bool {\n\treturn strings.Contains(s.str, substr)\n}\n\nfunc (s *String) Index(substr string) int {\n\treturn strings.Index(s.str, substr)\n}\n\nfunc (s *String) LastIndex(substr string) int {\n\treturn strings.LastIndex(s.str, substr)\n}\n\nfunc (s *String) Split(sep string) []string {\n\treturn strings.Split(s.str, sep)\n}\n\nfunc (s *String) Length() int {\n\treturn len(s.str)\n}\n\nfunc (s *String) ReplaceAll(old, new string) *String {\n\ts.str = strings.ReplaceAll(s.str, old, new)\n\treturn s\n}\n\nfunc (s *String) ToString() string {\n\treturn s.str\n}\n\nfunc (s *String) ToInt() (int, error) {\n\treturn strconv.Atoi(s.str)\n}\n```\n\n## 测试代码\n\n```go\npackage stringEx\n\nimport (\n\t\"log\"\n\t\"testing\"\n)\n\nvar str = NewString(\"123qwe...\")\n\nfunc TestString_Contain(t *testing.T) {\n\tlog.Println(str.Contain(\"123\"), str.Length())\n\tlog.Println(str.ReplaceAll(\"123\", \"789\").ToString())\n\tlog.Println(str.ReplaceAll(\"123\", \"789\").Contain(\"789\"))\n}\n```","source":"_posts/ws_golang_stringEx.md","raw":"---\ntitle: golang扩展string\ndate: 2022-04-29 23:18:30\nauthor: ws\ndescription: golang扩展string\ncategories: utils\ntags: [golang]\ncover:\n---\n\n# golang扩展string\n\n## 完整代码\n\n```go\npackage stringEx\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype String struct {\n\tstr string\n}\n\nfunc NewString(s string) *String {\n\treturn &String{str: s}\n}\n\nfunc (s *String) Contain(substr string) bool {\n\treturn strings.Contains(s.str, substr)\n}\n\nfunc (s *String) Index(substr string) int {\n\treturn strings.Index(s.str, substr)\n}\n\nfunc (s *String) LastIndex(substr string) int {\n\treturn strings.LastIndex(s.str, substr)\n}\n\nfunc (s *String) Split(sep string) []string {\n\treturn strings.Split(s.str, sep)\n}\n\nfunc (s *String) Length() int {\n\treturn len(s.str)\n}\n\nfunc (s *String) ReplaceAll(old, new string) *String {\n\ts.str = strings.ReplaceAll(s.str, old, new)\n\treturn s\n}\n\nfunc (s *String) ToString() string {\n\treturn s.str\n}\n\nfunc (s *String) ToInt() (int, error) {\n\treturn strconv.Atoi(s.str)\n}\n```\n\n## 测试代码\n\n```go\npackage stringEx\n\nimport (\n\t\"log\"\n\t\"testing\"\n)\n\nvar str = NewString(\"123qwe...\")\n\nfunc TestString_Contain(t *testing.T) {\n\tlog.Println(str.Contain(\"123\"), str.Length())\n\tlog.Println(str.ReplaceAll(\"123\", \"789\").ToString())\n\tlog.Println(str.ReplaceAll(\"123\", \"789\").Contain(\"789\"))\n}\n```","slug":"ws_golang_stringEx","published":1,"updated":"2023-04-11T01:05:08.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgbl83rw000bw07k3t7sbhri","content":"<h1 id=\"golang扩展string\"><a href=\"#golang扩展string\" class=\"headerlink\" title=\"golang扩展string\"></a>golang扩展string</h1><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> stringEx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> String <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tstr <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewString</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> *String &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;String&#123;str: s&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> Contain(substr <span class=\"type\">string</span>) <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Contains(s.str, substr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> Index(substr <span class=\"type\">string</span>) <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Index(s.str, substr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> LastIndex(substr <span class=\"type\">string</span>) <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.LastIndex(s.str, substr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> Split(sep <span class=\"type\">string</span>) []<span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Split(s.str, sep)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> Length() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s.str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> ReplaceAll(old, <span class=\"built_in\">new</span> <span class=\"type\">string</span>) *String &#123;</span><br><span class=\"line\">\ts.str = strings.ReplaceAll(s.str, old, <span class=\"built_in\">new</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> ToString() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s.str</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> ToInt() (<span class=\"type\">int</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strconv.Atoi(s.str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> stringEx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = NewString(<span class=\"string\">&quot;123qwe...&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestString_Contain</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tlog.Println(str.Contain(<span class=\"string\">&quot;123&quot;</span>), str.Length())</span><br><span class=\"line\">\tlog.Println(str.ReplaceAll(<span class=\"string\">&quot;123&quot;</span>, <span class=\"string\">&quot;789&quot;</span>).ToString())</span><br><span class=\"line\">\tlog.Println(str.ReplaceAll(<span class=\"string\">&quot;123&quot;</span>, <span class=\"string\">&quot;789&quot;</span>).Contain(<span class=\"string\">&quot;789&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"golang扩展string\"><a href=\"#golang扩展string\" class=\"headerlink\" title=\"golang扩展string\"></a>golang扩展string</h1><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> stringEx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> String <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tstr <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewString</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> *String &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;String&#123;str: s&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> Contain(substr <span class=\"type\">string</span>) <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Contains(s.str, substr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> Index(substr <span class=\"type\">string</span>) <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Index(s.str, substr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> LastIndex(substr <span class=\"type\">string</span>) <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.LastIndex(s.str, substr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> Split(sep <span class=\"type\">string</span>) []<span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strings.Split(s.str, sep)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> Length() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s.str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> ReplaceAll(old, <span class=\"built_in\">new</span> <span class=\"type\">string</span>) *String &#123;</span><br><span class=\"line\">\ts.str = strings.ReplaceAll(s.str, old, <span class=\"built_in\">new</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> ToString() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s.str</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *String)</span></span> ToInt() (<span class=\"type\">int</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strconv.Atoi(s.str)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> stringEx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;testing&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = NewString(<span class=\"string\">&quot;123qwe...&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestString_Contain</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tlog.Println(str.Contain(<span class=\"string\">&quot;123&quot;</span>), str.Length())</span><br><span class=\"line\">\tlog.Println(str.ReplaceAll(<span class=\"string\">&quot;123&quot;</span>, <span class=\"string\">&quot;789&quot;</span>).ToString())</span><br><span class=\"line\">\tlog.Println(str.ReplaceAll(<span class=\"string\">&quot;123&quot;</span>, <span class=\"string\">&quot;789&quot;</span>).Contain(<span class=\"string\">&quot;789&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"高清图片素材网站","date":"2022-12-07T14:20:30.000Z","author":"ws","description":"图片素材资源集合","cover":false,"_content":"\n| 链接                                        | 描述                                      |\n| :------------------------------------------ | :---------------------------------------- |\n| [Unsplash](https://unsplash.com/)           | 摄影类图片网站                            |\n| [Pixabay](https://pixabay.com/)             | 免费高清图库，支持中文检索                |\n| [PicJumbo](https://picjumbo.com/)           | 高质量图库                                |\n| [Foodiesfeed](https://www.foodiesfeed.com/) | 食物相关图库                              |\n| [Pexels](https://www.pexels.com/zh-cn/)     | 免费高清图库，加载速度快                  |\n| [Hippopx](https://www.hippopx.com/zh)       | 基于CC0协议的免版权图库，中文界面，速度快 |\n\n","source":"_posts/ws_highresolutionimage.md","raw":"---\ntitle: 高清图片素材网站\ndate: 2022-12-07 22:20:30\nauthor: ws\ndescription: 图片素材资源集合\ncategories: 网站链接\ntags: [图片]\ncover: false\n---\n\n| 链接                                        | 描述                                      |\n| :------------------------------------------ | :---------------------------------------- |\n| [Unsplash](https://unsplash.com/)           | 摄影类图片网站                            |\n| [Pixabay](https://pixabay.com/)             | 免费高清图库，支持中文检索                |\n| [PicJumbo](https://picjumbo.com/)           | 高质量图库                                |\n| [Foodiesfeed](https://www.foodiesfeed.com/) | 食物相关图库                              |\n| [Pexels](https://www.pexels.com/zh-cn/)     | 免费高清图库，加载速度快                  |\n| [Hippopx](https://www.hippopx.com/zh)       | 基于CC0协议的免版权图库，中文界面，速度快 |\n\n","slug":"ws_highresolutionimage","published":1,"updated":"2023-04-11T01:05:08.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgbl83ry000fw07ka1783tq1","content":"<table>\n<thead>\n<tr>\n<th align=\"left\">链接</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://unsplash.com/\">Unsplash</a></td>\n<td align=\"left\">摄影类图片网站</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://pixabay.com/\">Pixabay</a></td>\n<td align=\"left\">免费高清图库，支持中文检索</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://picjumbo.com/\">PicJumbo</a></td>\n<td align=\"left\">高质量图库</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.foodiesfeed.com/\">Foodiesfeed</a></td>\n<td align=\"left\">食物相关图库</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.pexels.com/zh-cn/\">Pexels</a></td>\n<td align=\"left\">免费高清图库，加载速度快</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.hippopx.com/zh\">Hippopx</a></td>\n<td align=\"left\">基于CC0协议的免版权图库，中文界面，速度快</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th align=\"left\">链接</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://unsplash.com/\">Unsplash</a></td>\n<td align=\"left\">摄影类图片网站</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://pixabay.com/\">Pixabay</a></td>\n<td align=\"left\">免费高清图库，支持中文检索</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://picjumbo.com/\">PicJumbo</a></td>\n<td align=\"left\">高质量图库</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.foodiesfeed.com/\">Foodiesfeed</a></td>\n<td align=\"left\">食物相关图库</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.pexels.com/zh-cn/\">Pexels</a></td>\n<td align=\"left\">免费高清图库，加载速度快</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.hippopx.com/zh\">Hippopx</a></td>\n<td align=\"left\">基于CC0协议的免版权图库，中文界面，速度快</td>\n</tr>\n</tbody></table>\n"},{"title":"标准二叉树迭代器（ws_iterator）","date":"2021-08-07T11:33:30.000Z","author":"ws","description":"C++标准二叉树迭代器","cover":"/img/9.jpg","_content":"\n# 迭代器（ws_iterator）\n\n## 完整代码\n\n```cpp\n#ifndef INCLUDE_ITERATOR_HPP\n#define INCLUDE_ITERATOR_HPP\n\n#define NULL 0\n\nstruct _Node_base\n{\n\ttypedef _Node_base* _Base_ptr;\n\ttypedef _Node_base const* _Base_const_ptr;\n\n\t_Base_ptr _M_parent;\n\t_Base_ptr _M_left;\n\t_Base_ptr _M_right;\n\n\t_Node_base(_Base_ptr const __PARENT = NULL,\n\t\t_Base_ptr const __LEFT = NULL,\n\t\t_Base_ptr const __RIGHT = NULL)\n\t\t: _M_parent(__PARENT), _M_left(__LEFT), _M_right(__RIGHT) {}\n\n\tstatic _Base_ptr _S_minimum(_Base_ptr __x)\n\t{\n\t\twhile (__x->_M_left) __x = __x->_M_left;\n\t\treturn __x;\n\t}\n\n\tstatic _Base_ptr _S_maximum(_Base_ptr __x)\n\t{\n\t\twhile (__x->_M_right) __x = __x->_M_right;\n\t\treturn __x;\n\t}\n};\n\ntemplate <typename _Val>\nstruct _Node : public _Node_base\n{\n\tusing _Node_base::_Base_ptr;\n\ttypedef _Node* _Link_type;\n\n\t_Val _M_value;\n\n\t_Node(_Val const& __VALUE = _Val(),\n\t\t_Base_ptr const __PARENT = NULL,\n\t\t_Base_ptr const __LEFT = NULL,\n\t\t_Base_ptr const __RIGHT = NULL)\n\t\t: _Node_base(__PARENT, __LEFT, __RIGHT), _M_value(__VALUE) {}\n};\n\ntemplate <typename _Val, typename _Ref, typename _Ptr>\nclass _Iterator;\n\ntemplate<typename _Val, typename _Ref, typename _Ptr>\ninline bool operator==(_Iterator<_Val, _Ref, _Ptr> const&, _Iterator<_Val, _Ref, _Ptr> const&);\n\ntemplate<typename _Val>\ninline bool operator==(_Iterator<_Val, const _Val&, const _Val*> const&, _Iterator<_Val, _Val&, _Val*> const&);\n\ntemplate<typename _Val>\ninline bool operator==(_Iterator<_Val, _Val&, _Val*> const&, _Iterator<_Val, const _Val&, const _Val*> const&);\n\ntemplate<typename _Val, typename _Ref, typename _Ptr>\ninline bool operator!=(_Iterator<_Val, _Ref, _Ptr> const&, _Iterator<_Val, _Ref, _Ptr> const&);\n\ntemplate<typename _Val>\ninline bool operator!=(_Iterator<_Val, const _Val&, const _Val*> const&, _Iterator<_Val, _Val&, _Val*> const&);\n\ntemplate<typename _Val>\ninline bool operator!=(_Iterator<_Val, _Val&, _Val*> const&, _Iterator<_Val, const _Val&, const _Val*> const&);\n\nclass _Base_iterator\n{\nprotected:\n\ttypedef _Node_base::_Base_const_ptr _Base_const_ptr;\n\t_Base_const_ptr _M_node;\n\n\tinline _Base_iterator(_Base_const_ptr const __N = nullptr) : _M_node(__N) {}\n\tinline _Base_iterator(_Base_iterator const& __THAT) : _M_node(__THAT._M_node) {}\n\n\tinline void _M_increment()\n\t{\n\t\tif (_M_node->_M_right)\n\t\t{\n\t\t\t_M_node = _M_node->_M_right;\n\t\t\twhile (_M_node->_M_left) _M_node = _M_node->_M_left;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_Base_const_ptr __p = _M_node->_M_parent;\n\t\t\twhile (__p && _M_node == __p->_M_right)\n\t\t\t{\n\t\t\t\t_M_node = __p;\n\t\t\t\t__p = _M_node->_M_parent;\n\t\t\t}\n\t\t\tif (__p) _M_node = __p;\n\t\t}\n\t}\n\n\tinline void _M_decrement()\n\t{\n\t\tif (!_M_node->_M_parent)\n\t\t{\n\t\t\t_M_node = _M_node->_M_right;\n\t\t}\n\t\telse if (_M_node->_M_left)\n\t\t{\n\t\t\t_Base_const_ptr x = _M_node->_M_left;\n\t\t\twhile (x->_M_right) x = x->_M_right;\n\t\t\t_M_node = x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_Base_const_ptr __p = _M_node->_M_parent;\n\t\t\twhile (__p && _M_node == __p->_M_left)\n\t\t\t{\n\t\t\t\t_M_node = __p;\n\t\t\t\t__p = _M_node->_M_parent;\n\t\t\t}\n\t\t\tif (__p) _M_node = __p;\n\t\t}\n\t}\n};\n\ntemplate <typename _Val, typename _Ref, typename _Ptr>\nclass _Iterator : protected _Base_iterator\n{\npublic:\n\ttypedef _Val value_type;\n\ttypedef _Ref reference;\n\ttypedef _Ptr pointer;\n\ttypedef _Iterator<_Val, _Val&, _Val*> iterator;\n\ttypedef _Iterator<_Val, _Val const&, _Val const*> const_iterator;\n\ttypedef _Iterator<_Val, _Ref, _Ptr> _Self;\n\ttypedef _Node<_Val> const* _Link_const_type;\n\ttypedef std::bidirectional_iterator_tag iterator_category;\n\ttypedef ptrdiff_t difference_type;\n\n\tinline _Iterator() : _Base_iterator() {}\n\tinline _Iterator(_Link_const_type const __N) : _Base_iterator(__N) {}\n\tinline _Iterator(iterator const& __THAT) : _Base_iterator(__THAT) {}\n\n\t_Link_const_type get_raw_node() const\n\t{\n\t\treturn _Link_const_type(_M_node);\n\t}\n\n\treference operator*() const\n\t{\n\t\treturn _Link_const_type(_M_node)->_M_value;\n\t}\n\n\tpointer operator->() const\n\t{\n\t\treturn &(operator*());\n\t}\n\n\t_Self operator++()\n\t{\n\t\t_M_increment();\n\t\treturn *this;\n\t}\n\n\t_Self operator++(int)\n\t{\n\t\t_Self ret = *this;\n\t\t_M_increment();\n\t\treturn ret;\n\t}\n\n\t_Self& operator--()\n\t{\n\t\t_M_decrement();\n\t\treturn *this;\n\t}\n\n\t_Self operator--(int)\n\t{\n\t\t_Self ret = *this;\n\t\t_M_decrement();\n\t\treturn ret;\n\t}\n\n\tfriend bool operator== <>(_Iterator<_Val, _Ref, _Ptr> const&, _Iterator<_Val, _Ref, _Ptr> const&);\n\n\tfriend bool operator== <>(_Iterator<_Val, const _Val&, const _Val*> const&, _Iterator<_Val, _Val&, _Val*> const&);\n\n\tfriend bool operator== <>(_Iterator<_Val, _Val&, _Val*> const&, _Iterator<_Val, const _Val&, const _Val*> const&);\n\n\tfriend bool operator!= <>(_Iterator<_Val, _Ref, _Ptr> const&, _Iterator<_Val, _Ref, _Ptr> const&);\n\n\tfriend bool operator!= <>(_Iterator<_Val, const _Val&, const _Val*> const&, _Iterator<_Val, _Val&, _Val*> const&);\n\n\tfriend bool operator!= <>(_Iterator<_Val, _Val&, _Val*> const&, _Iterator<_Val, const _Val&, const _Val*> const&);\n};\n\ntemplate<typename _Val, typename _Ref, typename _Ptr>\nbool operator==(_Iterator<_Val, _Ref, _Ptr> const& __X, _Iterator<_Val, _Ref, _Ptr> const& __Y)\n{\n\treturn __X._M_node == __Y._M_node;\n}\n\ntemplate<typename _Val>\nbool operator==(_Iterator<_Val, const _Val&, const _Val*> const& __X, _Iterator<_Val, _Val&, _Val*> const& __Y)\n{\n\treturn __X._M_node == __Y._M_node;\n}\n\ntemplate<typename _Val>\nbool operator==(_Iterator<_Val, _Val&, _Val*> const& __X, _Iterator<_Val, const _Val&, const _Val*> const& __Y)\n{\n\treturn __X._M_node == __Y._M_node;\n}\n\ntemplate<typename _Val, typename _Ref, typename _Ptr>\nbool operator!=(_Iterator<_Val, _Ref, _Ptr> const& __X, _Iterator<_Val, _Ref, _Ptr> const& __Y)\n{\n\treturn __X._M_node != __Y._M_node;\n}\n\ntemplate<typename _Val>\nbool operator!=(_Iterator<_Val, const _Val&, const _Val*> const& __X, _Iterator<_Val, _Val&, _Val*> const& __Y)\n{\n\treturn __X._M_node != __Y._M_node;\n}\n\ntemplate<typename _Val>\nbool operator!=(_Iterator<_Val, _Val&, _Val*> const& __X, _Iterator<_Val, const _Val&, const _Val*> const& __Y)\n{\n\treturn __X._M_node != __Y._M_node;\n}\n#endif // include guard\n```\n\n","source":"_posts/ws_iterator.md","raw":"---\ntitle: 标准二叉树迭代器（ws_iterator）\ndate: 2021-08-07 19:33:30\nauthor: ws\ndescription: C++标准二叉树迭代器\ncategories: 数据结构\ntags: [cpp, iterator]\ncover:\n---\n\n# 迭代器（ws_iterator）\n\n## 完整代码\n\n```cpp\n#ifndef INCLUDE_ITERATOR_HPP\n#define INCLUDE_ITERATOR_HPP\n\n#define NULL 0\n\nstruct _Node_base\n{\n\ttypedef _Node_base* _Base_ptr;\n\ttypedef _Node_base const* _Base_const_ptr;\n\n\t_Base_ptr _M_parent;\n\t_Base_ptr _M_left;\n\t_Base_ptr _M_right;\n\n\t_Node_base(_Base_ptr const __PARENT = NULL,\n\t\t_Base_ptr const __LEFT = NULL,\n\t\t_Base_ptr const __RIGHT = NULL)\n\t\t: _M_parent(__PARENT), _M_left(__LEFT), _M_right(__RIGHT) {}\n\n\tstatic _Base_ptr _S_minimum(_Base_ptr __x)\n\t{\n\t\twhile (__x->_M_left) __x = __x->_M_left;\n\t\treturn __x;\n\t}\n\n\tstatic _Base_ptr _S_maximum(_Base_ptr __x)\n\t{\n\t\twhile (__x->_M_right) __x = __x->_M_right;\n\t\treturn __x;\n\t}\n};\n\ntemplate <typename _Val>\nstruct _Node : public _Node_base\n{\n\tusing _Node_base::_Base_ptr;\n\ttypedef _Node* _Link_type;\n\n\t_Val _M_value;\n\n\t_Node(_Val const& __VALUE = _Val(),\n\t\t_Base_ptr const __PARENT = NULL,\n\t\t_Base_ptr const __LEFT = NULL,\n\t\t_Base_ptr const __RIGHT = NULL)\n\t\t: _Node_base(__PARENT, __LEFT, __RIGHT), _M_value(__VALUE) {}\n};\n\ntemplate <typename _Val, typename _Ref, typename _Ptr>\nclass _Iterator;\n\ntemplate<typename _Val, typename _Ref, typename _Ptr>\ninline bool operator==(_Iterator<_Val, _Ref, _Ptr> const&, _Iterator<_Val, _Ref, _Ptr> const&);\n\ntemplate<typename _Val>\ninline bool operator==(_Iterator<_Val, const _Val&, const _Val*> const&, _Iterator<_Val, _Val&, _Val*> const&);\n\ntemplate<typename _Val>\ninline bool operator==(_Iterator<_Val, _Val&, _Val*> const&, _Iterator<_Val, const _Val&, const _Val*> const&);\n\ntemplate<typename _Val, typename _Ref, typename _Ptr>\ninline bool operator!=(_Iterator<_Val, _Ref, _Ptr> const&, _Iterator<_Val, _Ref, _Ptr> const&);\n\ntemplate<typename _Val>\ninline bool operator!=(_Iterator<_Val, const _Val&, const _Val*> const&, _Iterator<_Val, _Val&, _Val*> const&);\n\ntemplate<typename _Val>\ninline bool operator!=(_Iterator<_Val, _Val&, _Val*> const&, _Iterator<_Val, const _Val&, const _Val*> const&);\n\nclass _Base_iterator\n{\nprotected:\n\ttypedef _Node_base::_Base_const_ptr _Base_const_ptr;\n\t_Base_const_ptr _M_node;\n\n\tinline _Base_iterator(_Base_const_ptr const __N = nullptr) : _M_node(__N) {}\n\tinline _Base_iterator(_Base_iterator const& __THAT) : _M_node(__THAT._M_node) {}\n\n\tinline void _M_increment()\n\t{\n\t\tif (_M_node->_M_right)\n\t\t{\n\t\t\t_M_node = _M_node->_M_right;\n\t\t\twhile (_M_node->_M_left) _M_node = _M_node->_M_left;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_Base_const_ptr __p = _M_node->_M_parent;\n\t\t\twhile (__p && _M_node == __p->_M_right)\n\t\t\t{\n\t\t\t\t_M_node = __p;\n\t\t\t\t__p = _M_node->_M_parent;\n\t\t\t}\n\t\t\tif (__p) _M_node = __p;\n\t\t}\n\t}\n\n\tinline void _M_decrement()\n\t{\n\t\tif (!_M_node->_M_parent)\n\t\t{\n\t\t\t_M_node = _M_node->_M_right;\n\t\t}\n\t\telse if (_M_node->_M_left)\n\t\t{\n\t\t\t_Base_const_ptr x = _M_node->_M_left;\n\t\t\twhile (x->_M_right) x = x->_M_right;\n\t\t\t_M_node = x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_Base_const_ptr __p = _M_node->_M_parent;\n\t\t\twhile (__p && _M_node == __p->_M_left)\n\t\t\t{\n\t\t\t\t_M_node = __p;\n\t\t\t\t__p = _M_node->_M_parent;\n\t\t\t}\n\t\t\tif (__p) _M_node = __p;\n\t\t}\n\t}\n};\n\ntemplate <typename _Val, typename _Ref, typename _Ptr>\nclass _Iterator : protected _Base_iterator\n{\npublic:\n\ttypedef _Val value_type;\n\ttypedef _Ref reference;\n\ttypedef _Ptr pointer;\n\ttypedef _Iterator<_Val, _Val&, _Val*> iterator;\n\ttypedef _Iterator<_Val, _Val const&, _Val const*> const_iterator;\n\ttypedef _Iterator<_Val, _Ref, _Ptr> _Self;\n\ttypedef _Node<_Val> const* _Link_const_type;\n\ttypedef std::bidirectional_iterator_tag iterator_category;\n\ttypedef ptrdiff_t difference_type;\n\n\tinline _Iterator() : _Base_iterator() {}\n\tinline _Iterator(_Link_const_type const __N) : _Base_iterator(__N) {}\n\tinline _Iterator(iterator const& __THAT) : _Base_iterator(__THAT) {}\n\n\t_Link_const_type get_raw_node() const\n\t{\n\t\treturn _Link_const_type(_M_node);\n\t}\n\n\treference operator*() const\n\t{\n\t\treturn _Link_const_type(_M_node)->_M_value;\n\t}\n\n\tpointer operator->() const\n\t{\n\t\treturn &(operator*());\n\t}\n\n\t_Self operator++()\n\t{\n\t\t_M_increment();\n\t\treturn *this;\n\t}\n\n\t_Self operator++(int)\n\t{\n\t\t_Self ret = *this;\n\t\t_M_increment();\n\t\treturn ret;\n\t}\n\n\t_Self& operator--()\n\t{\n\t\t_M_decrement();\n\t\treturn *this;\n\t}\n\n\t_Self operator--(int)\n\t{\n\t\t_Self ret = *this;\n\t\t_M_decrement();\n\t\treturn ret;\n\t}\n\n\tfriend bool operator== <>(_Iterator<_Val, _Ref, _Ptr> const&, _Iterator<_Val, _Ref, _Ptr> const&);\n\n\tfriend bool operator== <>(_Iterator<_Val, const _Val&, const _Val*> const&, _Iterator<_Val, _Val&, _Val*> const&);\n\n\tfriend bool operator== <>(_Iterator<_Val, _Val&, _Val*> const&, _Iterator<_Val, const _Val&, const _Val*> const&);\n\n\tfriend bool operator!= <>(_Iterator<_Val, _Ref, _Ptr> const&, _Iterator<_Val, _Ref, _Ptr> const&);\n\n\tfriend bool operator!= <>(_Iterator<_Val, const _Val&, const _Val*> const&, _Iterator<_Val, _Val&, _Val*> const&);\n\n\tfriend bool operator!= <>(_Iterator<_Val, _Val&, _Val*> const&, _Iterator<_Val, const _Val&, const _Val*> const&);\n};\n\ntemplate<typename _Val, typename _Ref, typename _Ptr>\nbool operator==(_Iterator<_Val, _Ref, _Ptr> const& __X, _Iterator<_Val, _Ref, _Ptr> const& __Y)\n{\n\treturn __X._M_node == __Y._M_node;\n}\n\ntemplate<typename _Val>\nbool operator==(_Iterator<_Val, const _Val&, const _Val*> const& __X, _Iterator<_Val, _Val&, _Val*> const& __Y)\n{\n\treturn __X._M_node == __Y._M_node;\n}\n\ntemplate<typename _Val>\nbool operator==(_Iterator<_Val, _Val&, _Val*> const& __X, _Iterator<_Val, const _Val&, const _Val*> const& __Y)\n{\n\treturn __X._M_node == __Y._M_node;\n}\n\ntemplate<typename _Val, typename _Ref, typename _Ptr>\nbool operator!=(_Iterator<_Val, _Ref, _Ptr> const& __X, _Iterator<_Val, _Ref, _Ptr> const& __Y)\n{\n\treturn __X._M_node != __Y._M_node;\n}\n\ntemplate<typename _Val>\nbool operator!=(_Iterator<_Val, const _Val&, const _Val*> const& __X, _Iterator<_Val, _Val&, _Val*> const& __Y)\n{\n\treturn __X._M_node != __Y._M_node;\n}\n\ntemplate<typename _Val>\nbool operator!=(_Iterator<_Val, _Val&, _Val*> const& __X, _Iterator<_Val, const _Val&, const _Val*> const& __Y)\n{\n\treturn __X._M_node != __Y._M_node;\n}\n#endif // include guard\n```\n\n","slug":"ws_iterator","published":1,"updated":"2023-04-11T01:05:08.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgbl83s0000hw07kcglt0i68","content":"<h1 id=\"迭代器（ws-iterator）\"><a href=\"#迭代器（ws-iterator）\" class=\"headerlink\" title=\"迭代器（ws_iterator）\"></a>迭代器（ws_iterator）</h1><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> INCLUDE_ITERATOR_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_ITERATOR_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NULL 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_Node_base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Node_base* _Base_ptr;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Node_base <span class=\"type\">const</span>* _Base_const_ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Base_ptr _M_parent;</span><br><span class=\"line\">\t_Base_ptr _M_left;</span><br><span class=\"line\">\t_Base_ptr _M_right;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Node_base(_Base_ptr <span class=\"type\">const</span> __PARENT = <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t_Base_ptr <span class=\"type\">const</span> __LEFT = <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t_Base_ptr <span class=\"type\">const</span> __RIGHT = <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t: _M_parent(__PARENT), _M_left(__LEFT), _M_right(__RIGHT) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">static</span> _Base_ptr _S_minimum(_Base_ptr __x)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (__x-&gt;_M_left) __x = __x-&gt;_M_left;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> __x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">static</span> _Base_ptr _S_maximum(_Base_ptr __x)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (__x-&gt;_M_right) __x = __x-&gt;_M_right;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> __x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_Node</span> : <span class=\"keyword\">public</span> _Node_base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">using</span> _Node_base::_Base_ptr;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Node* _Link_type;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Val _M_value;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Node(_Val <span class=\"type\">const</span>&amp; __VALUE = _Val(),</span><br><span class=\"line\">\t\t_Base_ptr <span class=\"type\">const</span> __PARENT = <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t_Base_ptr <span class=\"type\">const</span> __LEFT = <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t_Base_ptr <span class=\"type\">const</span> __RIGHT = <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t: _Node_base(__PARENT, __LEFT, __RIGHT), _M_value(__VALUE) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Val, <span class=\"keyword\">typename</span> _Ref, <span class=\"keyword\">typename</span> _Ptr&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Iterator</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val, <span class=\"keyword\">typename</span> _Ref, <span class=\"keyword\">typename</span> _Ptr&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(_Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(_Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(_Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val, <span class=\"keyword\">typename</span> _Ref, <span class=\"keyword\">typename</span> _Ptr&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(_Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(_Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(_Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Base_iterator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Node_base::_Base_const_ptr _Base_const_ptr;</span><br><span class=\"line\">\t_Base_const_ptr _M_node;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> _Base_iterator(_Base_const_ptr <span class=\"type\">const</span> __N = <span class=\"literal\">nullptr</span>) : _M_node(__N) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> _Base_iterator(_Base_iterator <span class=\"type\">const</span>&amp; __THAT) : _M_node(__THAT._M_node) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> <span class=\"type\">void</span> _M_increment()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_M_node-&gt;_M_right)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_M_node = _M_node-&gt;_M_right;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (_M_node-&gt;_M_left) _M_node = _M_node-&gt;_M_left;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_Base_const_ptr __p = _M_node-&gt;_M_parent;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (__p &amp;&amp; _M_node == __p-&gt;_M_right)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t_M_node = __p;</span><br><span class=\"line\">\t\t\t\t__p = _M_node-&gt;_M_parent;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (__p) _M_node = __p;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> <span class=\"type\">void</span> _M_decrement()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!_M_node-&gt;_M_parent)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_M_node = _M_node-&gt;_M_right;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_M_node-&gt;_M_left)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_Base_const_ptr x = _M_node-&gt;_M_left;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (x-&gt;_M_right) x = x-&gt;_M_right;</span><br><span class=\"line\">\t\t\t_M_node = x;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_Base_const_ptr __p = _M_node-&gt;_M_parent;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (__p &amp;&amp; _M_node == __p-&gt;_M_left)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t_M_node = __p;</span><br><span class=\"line\">\t\t\t\t__p = _M_node-&gt;_M_parent;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (__p) _M_node = __p;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Val, <span class=\"keyword\">typename</span> _Ref, <span class=\"keyword\">typename</span> _Ptr&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Iterator</span> : <span class=\"keyword\">protected</span> _Base_iterator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Val value_type;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Ref reference;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Ptr pointer;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Iterator&lt;_Val, _Val&amp;, _Val*&gt; iterator;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Iterator&lt;_Val, _Val <span class=\"type\">const</span>&amp;, _Val <span class=\"type\">const</span>*&gt; const_iterator;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Iterator&lt;_Val, _Ref, _Ptr&gt; _Self;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Node&lt;_Val&gt; <span class=\"type\">const</span>* _Link_const_type;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> std::bidirectional_iterator_tag iterator_category;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> <span class=\"type\">ptrdiff_t</span> difference_type;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> _Iterator() : _Base_iterator() &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> _Iterator(_Link_const_type <span class=\"type\">const</span> __N) : _Base_iterator(__N) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> _Iterator(iterator <span class=\"type\">const</span>&amp; __THAT) : _Base_iterator(__THAT) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">_Link_const_type <span class=\"title\">get_raw_node</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _Link_const_type(_M_node);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treference <span class=\"keyword\">operator</span>*() <span class=\"type\">const</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _Link_const_type(_M_node)-&gt;_M_value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpointer <span class=\"keyword\">operator</span>-&gt;() <span class=\"type\">const</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;(<span class=\"keyword\">operator</span>*());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Self <span class=\"keyword\">operator</span>++()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_M_increment();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Self <span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_Self ret = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t_M_increment();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Self&amp; <span class=\"keyword\">operator</span>--()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_M_decrement();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Self <span class=\"keyword\">operator</span>--(<span class=\"type\">int</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_Self ret = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t_M_decrement();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>== &lt;&gt;(_Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>== &lt;&gt;(_Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>== &lt;&gt;(_Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!= &lt;&gt;(_Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!= &lt;&gt;(_Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!= &lt;&gt;(_Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val, <span class=\"keyword\">typename</span> _Ref, <span class=\"keyword\">typename</span> _Ptr&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(_Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp; __X, _Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp; __Y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __X._M_node == __Y._M_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(_Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp; __X, _Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp; __Y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __X._M_node == __Y._M_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(_Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp; __X, _Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp; __Y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __X._M_node == __Y._M_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val, <span class=\"keyword\">typename</span> _Ref, <span class=\"keyword\">typename</span> _Ptr&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(_Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp; __X, _Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp; __Y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __X._M_node != __Y._M_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(_Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp; __X, _Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp; __Y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __X._M_node != __Y._M_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(_Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp; __X, _Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp; __Y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __X._M_node != __Y._M_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// include guard</span></span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"迭代器（ws-iterator）\"><a href=\"#迭代器（ws-iterator）\" class=\"headerlink\" title=\"迭代器（ws_iterator）\"></a>迭代器（ws_iterator）</h1><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> INCLUDE_ITERATOR_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_ITERATOR_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> NULL 0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_Node_base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Node_base* _Base_ptr;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Node_base <span class=\"type\">const</span>* _Base_const_ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Base_ptr _M_parent;</span><br><span class=\"line\">\t_Base_ptr _M_left;</span><br><span class=\"line\">\t_Base_ptr _M_right;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Node_base(_Base_ptr <span class=\"type\">const</span> __PARENT = <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t_Base_ptr <span class=\"type\">const</span> __LEFT = <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t_Base_ptr <span class=\"type\">const</span> __RIGHT = <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t: _M_parent(__PARENT), _M_left(__LEFT), _M_right(__RIGHT) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">static</span> _Base_ptr _S_minimum(_Base_ptr __x)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (__x-&gt;_M_left) __x = __x-&gt;_M_left;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> __x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">static</span> _Base_ptr _S_maximum(_Base_ptr __x)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (__x-&gt;_M_right) __x = __x-&gt;_M_right;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> __x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">_Node</span> : <span class=\"keyword\">public</span> _Node_base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">using</span> _Node_base::_Base_ptr;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Node* _Link_type;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Val _M_value;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Node(_Val <span class=\"type\">const</span>&amp; __VALUE = _Val(),</span><br><span class=\"line\">\t\t_Base_ptr <span class=\"type\">const</span> __PARENT = <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t_Base_ptr <span class=\"type\">const</span> __LEFT = <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">\t\t_Base_ptr <span class=\"type\">const</span> __RIGHT = <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t: _Node_base(__PARENT, __LEFT, __RIGHT), _M_value(__VALUE) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Val, <span class=\"keyword\">typename</span> _Ref, <span class=\"keyword\">typename</span> _Ptr&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Iterator</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val, <span class=\"keyword\">typename</span> _Ref, <span class=\"keyword\">typename</span> _Ptr&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(_Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(_Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(_Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val, <span class=\"keyword\">typename</span> _Ref, <span class=\"keyword\">typename</span> _Ptr&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(_Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(_Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(_Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Base_iterator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Node_base::_Base_const_ptr _Base_const_ptr;</span><br><span class=\"line\">\t_Base_const_ptr _M_node;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> _Base_iterator(_Base_const_ptr <span class=\"type\">const</span> __N = <span class=\"literal\">nullptr</span>) : _M_node(__N) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> _Base_iterator(_Base_iterator <span class=\"type\">const</span>&amp; __THAT) : _M_node(__THAT._M_node) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> <span class=\"type\">void</span> _M_increment()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_M_node-&gt;_M_right)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_M_node = _M_node-&gt;_M_right;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (_M_node-&gt;_M_left) _M_node = _M_node-&gt;_M_left;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_Base_const_ptr __p = _M_node-&gt;_M_parent;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (__p &amp;&amp; _M_node == __p-&gt;_M_right)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t_M_node = __p;</span><br><span class=\"line\">\t\t\t\t__p = _M_node-&gt;_M_parent;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (__p) _M_node = __p;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> <span class=\"type\">void</span> _M_decrement()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!_M_node-&gt;_M_parent)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_M_node = _M_node-&gt;_M_right;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_M_node-&gt;_M_left)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_Base_const_ptr x = _M_node-&gt;_M_left;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (x-&gt;_M_right) x = x-&gt;_M_right;</span><br><span class=\"line\">\t\t\t_M_node = x;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_Base_const_ptr __p = _M_node-&gt;_M_parent;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (__p &amp;&amp; _M_node == __p-&gt;_M_left)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t_M_node = __p;</span><br><span class=\"line\">\t\t\t\t__p = _M_node-&gt;_M_parent;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (__p) _M_node = __p;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _Val, <span class=\"keyword\">typename</span> _Ref, <span class=\"keyword\">typename</span> _Ptr&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">_Iterator</span> : <span class=\"keyword\">protected</span> _Base_iterator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Val value_type;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Ref reference;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Ptr pointer;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Iterator&lt;_Val, _Val&amp;, _Val*&gt; iterator;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Iterator&lt;_Val, _Val <span class=\"type\">const</span>&amp;, _Val <span class=\"type\">const</span>*&gt; const_iterator;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Iterator&lt;_Val, _Ref, _Ptr&gt; _Self;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> _Node&lt;_Val&gt; <span class=\"type\">const</span>* _Link_const_type;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> std::bidirectional_iterator_tag iterator_category;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> <span class=\"type\">ptrdiff_t</span> difference_type;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> _Iterator() : _Base_iterator() &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> _Iterator(_Link_const_type <span class=\"type\">const</span> __N) : _Base_iterator(__N) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">inline</span> _Iterator(iterator <span class=\"type\">const</span>&amp; __THAT) : _Base_iterator(__THAT) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">_Link_const_type <span class=\"title\">get_raw_node</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _Link_const_type(_M_node);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treference <span class=\"keyword\">operator</span>*() <span class=\"type\">const</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _Link_const_type(_M_node)-&gt;_M_value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpointer <span class=\"keyword\">operator</span>-&gt;() <span class=\"type\">const</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &amp;(<span class=\"keyword\">operator</span>*());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Self <span class=\"keyword\">operator</span>++()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_M_increment();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Self <span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_Self ret = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t_M_increment();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Self&amp; <span class=\"keyword\">operator</span>--()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_M_decrement();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_Self <span class=\"keyword\">operator</span>--(<span class=\"type\">int</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_Self ret = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t_M_decrement();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>== &lt;&gt;(_Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>== &lt;&gt;(_Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>== &lt;&gt;(_Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!= &lt;&gt;(_Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!= &lt;&gt;(_Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!= &lt;&gt;(_Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp;, _Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val, <span class=\"keyword\">typename</span> _Ref, <span class=\"keyword\">typename</span> _Ptr&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(_Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp; __X, _Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp; __Y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __X._M_node == __Y._M_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(_Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp; __X, _Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp; __Y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __X._M_node == __Y._M_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(_Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp; __X, _Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp; __Y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __X._M_node == __Y._M_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val, <span class=\"keyword\">typename</span> _Ref, <span class=\"keyword\">typename</span> _Ptr&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(_Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp; __X, _Iterator&lt;_Val, _Ref, _Ptr&gt; <span class=\"type\">const</span>&amp; __Y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __X._M_node != __Y._M_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(_Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp; __X, _Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp; __Y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __X._M_node != __Y._M_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _Val&gt;</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(_Iterator&lt;_Val, _Val&amp;, _Val*&gt; <span class=\"type\">const</span>&amp; __X, _Iterator&lt;_Val, <span class=\"type\">const</span> _Val&amp;, <span class=\"type\">const</span> _Val*&gt; <span class=\"type\">const</span>&amp; __Y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> __X._M_node != __Y._M_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// include guard</span></span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"自定义双向链表（ws_list）","date":"2021-08-08T05:30:25.000Z","author":"ws","description":"使用基础元素构建C++双向链表","cover":"/img/4.jpg","_content":"\n# 自定义双向链表（ws_list）\n\n## 1.节点结构体\n\n- data: 节点元素\n- prev: 前向指针\n- next: 后向指针\n\n```cpp\ntemplate<typename ValueT>\nstruct DNode\n{\n\tValueT data;\n\tDNode<ValueT>* prev;\n\tDNode<ValueT>* next;\n\n\tDNode(){}\n\n\tDNode(ValueT data, DNode<ValueT>* prev, DNode<ValueT>* next)\n\t{\n\t\tthis->data = data;\n\t\tthis->prev = prev;\n\t\tthis->next = next;\n\t}\n};\n```\n\n## 2. 局部变量\n\n- _pHead: 链表头部指针\n- _count: 链表元素数量\n\n```cpp\nprivate:\n\tDNode<ValueT>* _pHead;\n\tsize_t _count;\n```\n\n## 3.构造以及析构函数\n\n```cpp\ntemplate<typename ValueT>\nclass ws_list\n{\npublic:\n\tws_list()\n\t{\n\t\t_pHead = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>();\n\t\t_count = 0;\n\t}\n\n\t~ws_list()\n\t{\n\t\tclear();\n\t}\n}\n```\n\n## 4.push_front\n\n```cpp\n/// <summary>\n/// 添加元素到链表首位\n/// </summary>\n/// <param name=\"value\">元素值</param>\nvoid push_front(ValueT value)\n{\n    DNode<ValueT>* pNode = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>(value, _pHead, _pHead->next);\n    if (_pHead->next)\n    {\n        _pHead->next->prev = pNode;\n    }\n    else\n    {\n        _pHead->prev = pNode;\n        _pHead->next = pNode;\n    }\n    ++_count;\n}\n```\n\n## 5.push_back\n\n```cpp\n/// <summary>\n/// 添加元素到链表的最后\n/// </summary>\n/// <param name=\"value\">元素值</param>\nvoid push_back(ValueT value)\n{\n    if (_count == 0)\n    {\n        push_front(value);\n        return;\n    }\n    DNode<ValueT>* pNode = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>(value, _pHead->prev, _pHead);\n    _pHead->prev->next = pNode;\n    _pHead->prev = pNode;\n    ++_count;\n}\n```\n\n## 6.pop_front\n\n```cpp\n/// <summary>\n/// 移除链表首位的元素\n/// </summary>\nvoid pop_front()\n{\n    erase(0);\n}\n```\n\n## 7.pop_back\n\n```cpp\n/// <summary>\n/// 移除链表最后的元素\n/// </summary>\nvoid pop_back()\n{\n    erase(_count - 1);\n}\n```\n\n## 8.front\n\n```cpp\n/// <summary>\n/// 获取链表首位的元素\n/// </summary>\n/// <returns>链表首位的元素</returns>\nValueT& front()\n{\n    return _pHead->next->data;\n}\n```\n\n## 9.back\n\n```cpp\n/// <summary>\n/// 获取链表最后的元素\n/// </summary>\n/// <returns>链表最后的元素</returns>\nValueT& back()\n{\n    return _pHead->prev->data;\n}\n```\n\n## 10.clear\n\n```cpp\n/// <summary>\n/// 清除所有节点\n/// </summary>\nvoid clear()\n{\n    DNode<ValueT>* pNodeTmp;\n    DNode<ValueT>* pNode = _pHead->next;\n    while (pNode != _pHead)\n    {\n        pNodeTmp = pNode;\n        pNode = pNode->next;\n        delete pNodeTmp;\n    }\n    delete _pHead;\n    _pHead = NULL;\n    _count = 0;\n}\n```\n\n## 11.contains\n\n```cpp\n/// <summary>\n/// 链表中是否包含指定值\n/// </summary>\n/// <param name=\"value\">需要检测的值</param>\n/// <returns>若包含，则为true；反之，为false</returns>\nbool contain(ValueT& value)\n{\n    DNode<ValueT>* pNode = _pHead->next;\n    while (pNode != _pHead)\n    {\n        if (pNode->data == value)\n        {\n            return true;\n        }\n        pNode = pNode->next;\n    }\n    return false;\n}\n```\n\n## 12.empty\n\n```cpp\n/// <summary>\n/// 判断集合是否为空\n/// </summary>\n/// <returns>若为空，则为true；反之，为false</returns>\nbool empty()\n{\n    return _count == 0;\n}\n```\n\n## 13.insert\n\n```cpp\n/// <summary>\n/// 指定位置插入节点\n/// </summary>\n/// <param name=\"pos\">位置</param>\n/// <param name=\"value\">值</param>\nvoid insert(size_t pos, ValueT& value)\n{\n    DNode<ValueT>* pOldNode = _GetNode(pos);\n    DNode<ValueT>* pNewNode = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>(value, pOldNode, pOldNode->next);\n    pOldNode->next->prev = pNewNode;\n    pOldNode->next = pNewNode;\n}\n```\n\n## 14.erase\n\n```cpp\n/// <summary>\n/// 删除指定位置的节点\n/// </summary>\n/// <param name=\"pos\">指定位置</param>\nvoid erase(size_t pos)\n{\n    _DelNode(pos);\n}\n```\n\n## 15.swap\n\n```cpp\n/// <summary>\n/// 交换两容器对象\n/// </summary>\n/// <param name=\"other\">另一容器对象</param>\nvoid swap(ws_list& other)\n{\n    ws_list<ValueT> tmp = *this;\n    *this = other;\n    other = tmp;\n}\n```\n\n## 16.size\n\n```cpp\n/// <summary>\n/// 获取当前节点数量\n/// </summary>\n/// <returns>节点数量</returns>\nsize_t size()\n{\n    return _count;\n}\n```\n\n## 17.operator=\n\n```cpp\n/// <summary>\n/// 重载赋值运算符\n/// </summary>\n/// <param name=\"other\">提供赋值数据的容器对象</param>\n/// <returns></returns>\nws_list& operator=(ws_list& other)\n{\n    if (this == &other) return *this;\n    clear();\n    _pHead = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>();\n    _pHead = other._pHead;\n    _count = other._count;\n    return *this;\n}\n```\n\n## 18.私有函数\n\n```cpp\nprivate:\n\t/// <summary>\n\t/// 获取节点信息\n\t/// </summary>\n\t/// <param name=\"index\">节点序号</param>\n\t/// <returns>序号对应节点</returns>\n\tDNode<ValueT>* _GetNode(size_t index)\n\t{\n\t\tassert(index >= 0 && index < _count);\n\n\t\tsize_t pos;\n\t\tif (index <= (_count >> 1))\n\t\t{\n\t\t\tDNode<ValueT>* pNode = _pHead->next;\n\t\t\twhile (pos++ < index)\n\t\t\t{\n\t\t\t\tpNode = pNode->next;\n\t\t\t}\n\t\t\treturn pNode;\n\t\t}\n\n\t\tsize_t rIndex = _count - index - 1;\n\t\tDNode<ValueT>* pNode = _pHead->prev;\n\t\twhile (pos++ < rIndex)\n\t\t{\n\t\t\tpNode = pNode->prev;\n\t\t}\n\t\treturn pNode;\n\t}\n\n\t/// <summary>\n\t/// 删除节点\n\t/// </summary>\n\t/// <param name=\"index\">节点序号</param>\n\tvoid _DelNode(size_t index)\n\t{\n\t\tDNode<ValueT>* pNode = _GetNode(index);\n\t\tpNode->next->prev = pNode->prev;\n\t\tpNode->prev->next = pNode->next;\n\t\tdelete pNode;\n\t\t--_count;\n\t}\n```\n## 完整代码\n\n```cpp\n#ifndef INCLUDE_WS_LIST_HPP\n#define INCLUDE_WS_LIST_HPP\n\n#pragma once\n#include \"ws_utilities.h\"\n\ntemplate<typename ValueT>\nstruct DNode\n{\n\tValueT data;\n\tDNode<ValueT>* prev;\n\tDNode<ValueT>* next;\n\n\tDNode(){}\n\n\tDNode(ValueT data, DNode<ValueT>* prev, DNode<ValueT>* next)\n\t{\n\t\tthis->data = data;\n\t\tthis->prev = prev;\n\t\tthis->next = next;\n\t}\n};\n\ntemplate<typename ValueT>\nclass ws_list\n{\npublic:\n\tws_list()\n\t{\n\t\t_pHead = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>();\n\t\t_count = 0;\n\t}\n\n\t~ws_list()\n\t{\n\t\tclear();\n\t}\n\n\t/// <summary>\n\t/// 添加元素到链表首位\n\t/// </summary>\n\t/// <param name=\"value\">元素值</param>\n\tvoid push_front(ValueT value)\n\t{\n\t\tDNode<ValueT>* pNode = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>(value, _pHead, _pHead->next);\n\t\tif (_pHead->next)\n\t\t{\n\t\t\t_pHead->next->prev = pNode;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_pHead->prev = pNode;\n\t\t\t_pHead->next = pNode;\n\t\t}\n\t\t++_count;\n\t}\n\n\t/// <summary>\n\t/// 添加元素到链表的最后\n\t/// </summary>\n\t/// <param name=\"value\">元素值</param>\n\tvoid push_back(ValueT value)\n\t{\n\t\tif (_count == 0)\n\t\t{\n\t\t\tpush_front(value);\n\t\t\treturn;\n\t\t}\n\t\tDNode<ValueT>* pNode = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>(value, _pHead->prev, _pHead);\n\t\t_pHead->prev->next = pNode;\n\t\t_pHead->prev = pNode;\n\t\t++_count;\n\t}\n\n\t/// <summary>\n\t/// 移除链表首位的元素\n\t/// </summary>\n\tvoid pop_front()\n\t{\n\t\terase(0);\n\t}\n\n\t/// <summary>\n\t/// 移除链表最后的元素\n\t/// </summary>\n\tvoid pop_back()\n\t{\n\t\terase(_count - 1);\n\t}\n\n\t/// <summary>\n\t/// 获取链表首位的元素\n\t/// </summary>\n\t/// <returns>链表首位的元素</returns>\n\tValueT& front()\n\t{\n\t\treturn _pHead->next->data;\n\t}\n\n\t/// <summary>\n\t/// 获取链表最后的元素\n\t/// </summary>\n\t/// <returns>链表最后的元素</returns>\n\tValueT& back()\n\t{\n\t\treturn _pHead->prev->data;\n\t}\n\n\t/// <summary>\n\t/// 清除所有节点\n\t/// </summary>\n\tvoid clear()\n\t{\n\t\tDNode<ValueT>* pNodeTmp;\n\t\tDNode<ValueT>* pNode = _pHead->next;\n\t\twhile (pNode != _pHead)\n\t\t{\n\t\t\tpNodeTmp = pNode;\n\t\t\tpNode = pNode->next;\n\t\t\tdelete pNodeTmp;\n\t\t}\n\t\tdelete _pHead;\n\t\t_pHead = NULL;\n\t\t_count = 0;\n\t}\n\n\t/// <summary>\n\t/// 链表中是否包含指定值\n\t/// </summary>\n\t/// <param name=\"value\">需要检测的值</param>\n\t/// <returns>若包含，则为true；反之，为false</returns>\n\tbool contain(ValueT& value)\n\t{\n\t\tDNode<ValueT>* pNode = _pHead->next;\n\t\twhile (pNode != _pHead)\n\t\t{\n\t\t\tif (pNode->data == value)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tpNode = pNode->next;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/// <summary>\n\t/// 判断集合是否为空\n\t/// </summary>\n\t/// <returns>若为空，则为true；反之，为false</returns>\n\tbool empty()\n\t{\n\t\treturn _count == 0;\n\t}\n\n\t/// <summary>\n\t/// 指定位置插入节点\n\t/// </summary>\n\t/// <param name=\"pos\">位置</param>\n\t/// <param name=\"value\">值</param>\n\tvoid insert(size_t pos, ValueT& value)\n\t{\n\t\tDNode<ValueT>* pOldNode = _GetNode(pos);\n\t\tDNode<ValueT>* pNewNode = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>(value, pOldNode, pOldNode->next);\n\t\tpOldNode->next->prev = pNewNode;\n\t\tpOldNode->next = pNewNode;\n\t}\n\n\t/// <summary>\n\t/// 删除指定位置的节点\n\t/// </summary>\n\t/// <param name=\"pos\">指定位置</param>\n\tvoid erase(size_t pos)\n\t{\n\t\t_DelNode(pos);\n\t}\n\n\t/// <summary>\n\t/// 交换两容器对象\n\t/// </summary>\n\t/// <param name=\"other\">另一容器对象</param>\n\tvoid swap(ws_list& other)\n\t{\n\t\tws_list<ValueT> tmp = *this;\n\t\t*this = other;\n\t\tother = tmp;\n\t}\n\n\t/// <summary>\n\t/// 获取当前节点数量\n\t/// </summary>\n\t/// <returns>节点数量</returns>\n\tsize_t size()\n\t{\n\t\treturn _count;\n\t}\n\n\t/// <summary>\n\t/// 重载赋值运算符\n\t/// </summary>\n\t/// <param name=\"other\">提供赋值数据的容器对象</param>\n\t/// <returns></returns>\n\tws_list& operator=(ws_list& other)\n\t{\n\t\tif (this == &other) return *this;\n\t\tclear();\n\t\t_pHead = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>();\n\t\t_pHead = other._pHead;\n\t\t_count = other._count;\n\t\treturn *this;\n\t}\n\nprivate:\n\t/// <summary>\n\t/// 获取节点信息\n\t/// </summary>\n\t/// <param name=\"index\">节点序号</param>\n\t/// <returns>序号对应节点</returns>\n\tDNode<ValueT>* _GetNode(size_t index)\n\t{\n\t\tassert(index >= 0 && index < _count);\n\n\t\tsize_t pos;\n\t\tif (index <= (_count >> 1))\n\t\t{\n\t\t\tDNode<ValueT>* pNode = _pHead->next;\n\t\t\twhile (pos++ < index)\n\t\t\t{\n\t\t\t\tpNode = pNode->next;\n\t\t\t}\n\t\t\treturn pNode;\n\t\t}\n\n\t\tsize_t rIndex = _count - index - 1;\n\t\tDNode<ValueT>* pNode = _pHead->prev;\n\t\twhile (pos++ < rIndex)\n\t\t{\n\t\t\tpNode = pNode->prev;\n\t\t}\n\t\treturn pNode;\n\t}\n\n\t/// <summary>\n\t/// 删除节点\n\t/// </summary>\n\t/// <param name=\"index\">节点序号</param>\n\tvoid _DelNode(size_t index)\n\t{\n\t\tDNode<ValueT>* pNode = _GetNode(index);\n\t\tpNode->next->prev = pNode->prev;\n\t\tpNode->prev->next = pNode->next;\n\t\tdelete pNode;\n\t\t--_count;\n\t}\n\nprivate:\n\tDNode<ValueT>* _pHead;\n\tsize_t _count;\n};\n\n#endif\n```\n\n","source":"_posts/ws_list.md","raw":"---\ntitle: 自定义双向链表（ws_list）\ndate: 2021-08-08 13:30:25\nauthor: ws\ndescription: 使用基础元素构建C++双向链表\ncategories: 数据结构\ntags: cpp\ncover:\n---\n\n# 自定义双向链表（ws_list）\n\n## 1.节点结构体\n\n- data: 节点元素\n- prev: 前向指针\n- next: 后向指针\n\n```cpp\ntemplate<typename ValueT>\nstruct DNode\n{\n\tValueT data;\n\tDNode<ValueT>* prev;\n\tDNode<ValueT>* next;\n\n\tDNode(){}\n\n\tDNode(ValueT data, DNode<ValueT>* prev, DNode<ValueT>* next)\n\t{\n\t\tthis->data = data;\n\t\tthis->prev = prev;\n\t\tthis->next = next;\n\t}\n};\n```\n\n## 2. 局部变量\n\n- _pHead: 链表头部指针\n- _count: 链表元素数量\n\n```cpp\nprivate:\n\tDNode<ValueT>* _pHead;\n\tsize_t _count;\n```\n\n## 3.构造以及析构函数\n\n```cpp\ntemplate<typename ValueT>\nclass ws_list\n{\npublic:\n\tws_list()\n\t{\n\t\t_pHead = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>();\n\t\t_count = 0;\n\t}\n\n\t~ws_list()\n\t{\n\t\tclear();\n\t}\n}\n```\n\n## 4.push_front\n\n```cpp\n/// <summary>\n/// 添加元素到链表首位\n/// </summary>\n/// <param name=\"value\">元素值</param>\nvoid push_front(ValueT value)\n{\n    DNode<ValueT>* pNode = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>(value, _pHead, _pHead->next);\n    if (_pHead->next)\n    {\n        _pHead->next->prev = pNode;\n    }\n    else\n    {\n        _pHead->prev = pNode;\n        _pHead->next = pNode;\n    }\n    ++_count;\n}\n```\n\n## 5.push_back\n\n```cpp\n/// <summary>\n/// 添加元素到链表的最后\n/// </summary>\n/// <param name=\"value\">元素值</param>\nvoid push_back(ValueT value)\n{\n    if (_count == 0)\n    {\n        push_front(value);\n        return;\n    }\n    DNode<ValueT>* pNode = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>(value, _pHead->prev, _pHead);\n    _pHead->prev->next = pNode;\n    _pHead->prev = pNode;\n    ++_count;\n}\n```\n\n## 6.pop_front\n\n```cpp\n/// <summary>\n/// 移除链表首位的元素\n/// </summary>\nvoid pop_front()\n{\n    erase(0);\n}\n```\n\n## 7.pop_back\n\n```cpp\n/// <summary>\n/// 移除链表最后的元素\n/// </summary>\nvoid pop_back()\n{\n    erase(_count - 1);\n}\n```\n\n## 8.front\n\n```cpp\n/// <summary>\n/// 获取链表首位的元素\n/// </summary>\n/// <returns>链表首位的元素</returns>\nValueT& front()\n{\n    return _pHead->next->data;\n}\n```\n\n## 9.back\n\n```cpp\n/// <summary>\n/// 获取链表最后的元素\n/// </summary>\n/// <returns>链表最后的元素</returns>\nValueT& back()\n{\n    return _pHead->prev->data;\n}\n```\n\n## 10.clear\n\n```cpp\n/// <summary>\n/// 清除所有节点\n/// </summary>\nvoid clear()\n{\n    DNode<ValueT>* pNodeTmp;\n    DNode<ValueT>* pNode = _pHead->next;\n    while (pNode != _pHead)\n    {\n        pNodeTmp = pNode;\n        pNode = pNode->next;\n        delete pNodeTmp;\n    }\n    delete _pHead;\n    _pHead = NULL;\n    _count = 0;\n}\n```\n\n## 11.contains\n\n```cpp\n/// <summary>\n/// 链表中是否包含指定值\n/// </summary>\n/// <param name=\"value\">需要检测的值</param>\n/// <returns>若包含，则为true；反之，为false</returns>\nbool contain(ValueT& value)\n{\n    DNode<ValueT>* pNode = _pHead->next;\n    while (pNode != _pHead)\n    {\n        if (pNode->data == value)\n        {\n            return true;\n        }\n        pNode = pNode->next;\n    }\n    return false;\n}\n```\n\n## 12.empty\n\n```cpp\n/// <summary>\n/// 判断集合是否为空\n/// </summary>\n/// <returns>若为空，则为true；反之，为false</returns>\nbool empty()\n{\n    return _count == 0;\n}\n```\n\n## 13.insert\n\n```cpp\n/// <summary>\n/// 指定位置插入节点\n/// </summary>\n/// <param name=\"pos\">位置</param>\n/// <param name=\"value\">值</param>\nvoid insert(size_t pos, ValueT& value)\n{\n    DNode<ValueT>* pOldNode = _GetNode(pos);\n    DNode<ValueT>* pNewNode = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>(value, pOldNode, pOldNode->next);\n    pOldNode->next->prev = pNewNode;\n    pOldNode->next = pNewNode;\n}\n```\n\n## 14.erase\n\n```cpp\n/// <summary>\n/// 删除指定位置的节点\n/// </summary>\n/// <param name=\"pos\">指定位置</param>\nvoid erase(size_t pos)\n{\n    _DelNode(pos);\n}\n```\n\n## 15.swap\n\n```cpp\n/// <summary>\n/// 交换两容器对象\n/// </summary>\n/// <param name=\"other\">另一容器对象</param>\nvoid swap(ws_list& other)\n{\n    ws_list<ValueT> tmp = *this;\n    *this = other;\n    other = tmp;\n}\n```\n\n## 16.size\n\n```cpp\n/// <summary>\n/// 获取当前节点数量\n/// </summary>\n/// <returns>节点数量</returns>\nsize_t size()\n{\n    return _count;\n}\n```\n\n## 17.operator=\n\n```cpp\n/// <summary>\n/// 重载赋值运算符\n/// </summary>\n/// <param name=\"other\">提供赋值数据的容器对象</param>\n/// <returns></returns>\nws_list& operator=(ws_list& other)\n{\n    if (this == &other) return *this;\n    clear();\n    _pHead = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>();\n    _pHead = other._pHead;\n    _count = other._count;\n    return *this;\n}\n```\n\n## 18.私有函数\n\n```cpp\nprivate:\n\t/// <summary>\n\t/// 获取节点信息\n\t/// </summary>\n\t/// <param name=\"index\">节点序号</param>\n\t/// <returns>序号对应节点</returns>\n\tDNode<ValueT>* _GetNode(size_t index)\n\t{\n\t\tassert(index >= 0 && index < _count);\n\n\t\tsize_t pos;\n\t\tif (index <= (_count >> 1))\n\t\t{\n\t\t\tDNode<ValueT>* pNode = _pHead->next;\n\t\t\twhile (pos++ < index)\n\t\t\t{\n\t\t\t\tpNode = pNode->next;\n\t\t\t}\n\t\t\treturn pNode;\n\t\t}\n\n\t\tsize_t rIndex = _count - index - 1;\n\t\tDNode<ValueT>* pNode = _pHead->prev;\n\t\twhile (pos++ < rIndex)\n\t\t{\n\t\t\tpNode = pNode->prev;\n\t\t}\n\t\treturn pNode;\n\t}\n\n\t/// <summary>\n\t/// 删除节点\n\t/// </summary>\n\t/// <param name=\"index\">节点序号</param>\n\tvoid _DelNode(size_t index)\n\t{\n\t\tDNode<ValueT>* pNode = _GetNode(index);\n\t\tpNode->next->prev = pNode->prev;\n\t\tpNode->prev->next = pNode->next;\n\t\tdelete pNode;\n\t\t--_count;\n\t}\n```\n## 完整代码\n\n```cpp\n#ifndef INCLUDE_WS_LIST_HPP\n#define INCLUDE_WS_LIST_HPP\n\n#pragma once\n#include \"ws_utilities.h\"\n\ntemplate<typename ValueT>\nstruct DNode\n{\n\tValueT data;\n\tDNode<ValueT>* prev;\n\tDNode<ValueT>* next;\n\n\tDNode(){}\n\n\tDNode(ValueT data, DNode<ValueT>* prev, DNode<ValueT>* next)\n\t{\n\t\tthis->data = data;\n\t\tthis->prev = prev;\n\t\tthis->next = next;\n\t}\n};\n\ntemplate<typename ValueT>\nclass ws_list\n{\npublic:\n\tws_list()\n\t{\n\t\t_pHead = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>();\n\t\t_count = 0;\n\t}\n\n\t~ws_list()\n\t{\n\t\tclear();\n\t}\n\n\t/// <summary>\n\t/// 添加元素到链表首位\n\t/// </summary>\n\t/// <param name=\"value\">元素值</param>\n\tvoid push_front(ValueT value)\n\t{\n\t\tDNode<ValueT>* pNode = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>(value, _pHead, _pHead->next);\n\t\tif (_pHead->next)\n\t\t{\n\t\t\t_pHead->next->prev = pNode;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_pHead->prev = pNode;\n\t\t\t_pHead->next = pNode;\n\t\t}\n\t\t++_count;\n\t}\n\n\t/// <summary>\n\t/// 添加元素到链表的最后\n\t/// </summary>\n\t/// <param name=\"value\">元素值</param>\n\tvoid push_back(ValueT value)\n\t{\n\t\tif (_count == 0)\n\t\t{\n\t\t\tpush_front(value);\n\t\t\treturn;\n\t\t}\n\t\tDNode<ValueT>* pNode = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>(value, _pHead->prev, _pHead);\n\t\t_pHead->prev->next = pNode;\n\t\t_pHead->prev = pNode;\n\t\t++_count;\n\t}\n\n\t/// <summary>\n\t/// 移除链表首位的元素\n\t/// </summary>\n\tvoid pop_front()\n\t{\n\t\terase(0);\n\t}\n\n\t/// <summary>\n\t/// 移除链表最后的元素\n\t/// </summary>\n\tvoid pop_back()\n\t{\n\t\terase(_count - 1);\n\t}\n\n\t/// <summary>\n\t/// 获取链表首位的元素\n\t/// </summary>\n\t/// <returns>链表首位的元素</returns>\n\tValueT& front()\n\t{\n\t\treturn _pHead->next->data;\n\t}\n\n\t/// <summary>\n\t/// 获取链表最后的元素\n\t/// </summary>\n\t/// <returns>链表最后的元素</returns>\n\tValueT& back()\n\t{\n\t\treturn _pHead->prev->data;\n\t}\n\n\t/// <summary>\n\t/// 清除所有节点\n\t/// </summary>\n\tvoid clear()\n\t{\n\t\tDNode<ValueT>* pNodeTmp;\n\t\tDNode<ValueT>* pNode = _pHead->next;\n\t\twhile (pNode != _pHead)\n\t\t{\n\t\t\tpNodeTmp = pNode;\n\t\t\tpNode = pNode->next;\n\t\t\tdelete pNodeTmp;\n\t\t}\n\t\tdelete _pHead;\n\t\t_pHead = NULL;\n\t\t_count = 0;\n\t}\n\n\t/// <summary>\n\t/// 链表中是否包含指定值\n\t/// </summary>\n\t/// <param name=\"value\">需要检测的值</param>\n\t/// <returns>若包含，则为true；反之，为false</returns>\n\tbool contain(ValueT& value)\n\t{\n\t\tDNode<ValueT>* pNode = _pHead->next;\n\t\twhile (pNode != _pHead)\n\t\t{\n\t\t\tif (pNode->data == value)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tpNode = pNode->next;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/// <summary>\n\t/// 判断集合是否为空\n\t/// </summary>\n\t/// <returns>若为空，则为true；反之，为false</returns>\n\tbool empty()\n\t{\n\t\treturn _count == 0;\n\t}\n\n\t/// <summary>\n\t/// 指定位置插入节点\n\t/// </summary>\n\t/// <param name=\"pos\">位置</param>\n\t/// <param name=\"value\">值</param>\n\tvoid insert(size_t pos, ValueT& value)\n\t{\n\t\tDNode<ValueT>* pOldNode = _GetNode(pos);\n\t\tDNode<ValueT>* pNewNode = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>(value, pOldNode, pOldNode->next);\n\t\tpOldNode->next->prev = pNewNode;\n\t\tpOldNode->next = pNewNode;\n\t}\n\n\t/// <summary>\n\t/// 删除指定位置的节点\n\t/// </summary>\n\t/// <param name=\"pos\">指定位置</param>\n\tvoid erase(size_t pos)\n\t{\n\t\t_DelNode(pos);\n\t}\n\n\t/// <summary>\n\t/// 交换两容器对象\n\t/// </summary>\n\t/// <param name=\"other\">另一容器对象</param>\n\tvoid swap(ws_list& other)\n\t{\n\t\tws_list<ValueT> tmp = *this;\n\t\t*this = other;\n\t\tother = tmp;\n\t}\n\n\t/// <summary>\n\t/// 获取当前节点数量\n\t/// </summary>\n\t/// <returns>节点数量</returns>\n\tsize_t size()\n\t{\n\t\treturn _count;\n\t}\n\n\t/// <summary>\n\t/// 重载赋值运算符\n\t/// </summary>\n\t/// <param name=\"other\">提供赋值数据的容器对象</param>\n\t/// <returns></returns>\n\tws_list& operator=(ws_list& other)\n\t{\n\t\tif (this == &other) return *this;\n\t\tclear();\n\t\t_pHead = new DEBUG_CHECK_MEMORY_LEAKS DNode<ValueT>();\n\t\t_pHead = other._pHead;\n\t\t_count = other._count;\n\t\treturn *this;\n\t}\n\nprivate:\n\t/// <summary>\n\t/// 获取节点信息\n\t/// </summary>\n\t/// <param name=\"index\">节点序号</param>\n\t/// <returns>序号对应节点</returns>\n\tDNode<ValueT>* _GetNode(size_t index)\n\t{\n\t\tassert(index >= 0 && index < _count);\n\n\t\tsize_t pos;\n\t\tif (index <= (_count >> 1))\n\t\t{\n\t\t\tDNode<ValueT>* pNode = _pHead->next;\n\t\t\twhile (pos++ < index)\n\t\t\t{\n\t\t\t\tpNode = pNode->next;\n\t\t\t}\n\t\t\treturn pNode;\n\t\t}\n\n\t\tsize_t rIndex = _count - index - 1;\n\t\tDNode<ValueT>* pNode = _pHead->prev;\n\t\twhile (pos++ < rIndex)\n\t\t{\n\t\t\tpNode = pNode->prev;\n\t\t}\n\t\treturn pNode;\n\t}\n\n\t/// <summary>\n\t/// 删除节点\n\t/// </summary>\n\t/// <param name=\"index\">节点序号</param>\n\tvoid _DelNode(size_t index)\n\t{\n\t\tDNode<ValueT>* pNode = _GetNode(index);\n\t\tpNode->next->prev = pNode->prev;\n\t\tpNode->prev->next = pNode->next;\n\t\tdelete pNode;\n\t\t--_count;\n\t}\n\nprivate:\n\tDNode<ValueT>* _pHead;\n\tsize_t _count;\n};\n\n#endif\n```\n\n","slug":"ws_list","published":1,"updated":"2023-04-11T01:05:08.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgbl83s3000mw07k5jsgdq6w","content":"<h1 id=\"自定义双向链表（ws-list）\"><a href=\"#自定义双向链表（ws-list）\" class=\"headerlink\" title=\"自定义双向链表（ws_list）\"></a>自定义双向链表（ws_list）</h1><h2 id=\"1-节点结构体\"><a href=\"#1-节点结构体\" class=\"headerlink\" title=\"1.节点结构体\"></a>1.节点结构体</h2><ul>\n<li>data: 节点元素</li>\n<li>prev: 前向指针</li>\n<li>next: 后向指针</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ValueT&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">DNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tValueT data;</span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* prev;</span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* next;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">DNode</span>()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">DNode</span>(ValueT data, DNode&lt;ValueT&gt;* prev, DNode&lt;ValueT&gt;* next)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;prev = prev;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;next = next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-局部变量\"><a href=\"#2-局部变量\" class=\"headerlink\" title=\"2. 局部变量\"></a>2. 局部变量</h2><ul>\n<li>_pHead: 链表头部指针</li>\n<li>_count: 链表元素数量</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* _pHead;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> _count;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-构造以及析构函数\"><a href=\"#3-构造以及析构函数\" class=\"headerlink\" title=\"3.构造以及析构函数\"></a>3.构造以及析构函数</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ValueT&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ws_list</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">ws_list</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_pHead = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;();</span><br><span class=\"line\">\t\t_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">ws_list</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-push-front\"><a href=\"#4-push-front\" class=\"headerlink\" title=\"4.push_front\"></a>4.push_front</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 添加元素到链表首位</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;元素值&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_front</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pNode = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;(value, _pHead, _pHead-&gt;next);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_pHead-&gt;next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _pHead-&gt;next-&gt;prev = pNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _pHead-&gt;prev = pNode;</span><br><span class=\"line\">        _pHead-&gt;next = pNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++_count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-push-back\"><a href=\"#5-push-back\" class=\"headerlink\" title=\"5.push_back\"></a>5.push_back</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 添加元素到链表的最后</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;元素值&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_count == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">push_front</span>(value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pNode = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;(value, _pHead-&gt;prev, _pHead);</span><br><span class=\"line\">    _pHead-&gt;prev-&gt;next = pNode;</span><br><span class=\"line\">    _pHead-&gt;prev = pNode;</span><br><span class=\"line\">    ++_count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-pop-front\"><a href=\"#6-pop-front\" class=\"headerlink\" title=\"6.pop_front\"></a>6.pop_front</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 移除链表首位的元素</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_front</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">erase</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-pop-back\"><a href=\"#7-pop-back\" class=\"headerlink\" title=\"7.pop_back\"></a>7.pop_back</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 移除链表最后的元素</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">erase</span>(_count - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-front\"><a href=\"#8-front\" class=\"headerlink\" title=\"8.front\"></a>8.front</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取链表首位的元素</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;链表首位的元素&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\">ValueT&amp; <span class=\"title\">front</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _pHead-&gt;next-&gt;data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-back\"><a href=\"#9-back\" class=\"headerlink\" title=\"9.back\"></a>9.back</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取链表最后的元素</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;链表最后的元素&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\">ValueT&amp; <span class=\"title\">back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _pHead-&gt;prev-&gt;data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-clear\"><a href=\"#10-clear\" class=\"headerlink\" title=\"10.clear\"></a>10.clear</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 清除所有节点</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pNodeTmp;</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pNode = _pHead-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pNode != _pHead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pNodeTmp = pNode;</span><br><span class=\"line\">        pNode = pNode-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> pNodeTmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> _pHead;</span><br><span class=\"line\">    _pHead = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    _count = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-contains\"><a href=\"#11-contains\" class=\"headerlink\" title=\"11.contains\"></a>11.contains</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 链表中是否包含指定值</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;需要检测的值&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;若包含，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">contain</span><span class=\"params\">(ValueT&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pNode = _pHead-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pNode != _pHead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pNode-&gt;data == value)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pNode = pNode-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-empty\"><a href=\"#12-empty\" class=\"headerlink\" title=\"12.empty\"></a>12.empty</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 判断集合是否为空</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;若为空，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _count == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-insert\"><a href=\"#13-insert\" class=\"headerlink\" title=\"13.insert\"></a>13.insert</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 指定位置插入节点</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;pos&quot;&gt;位置&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;值&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">size_t</span> pos, ValueT&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pOldNode = _GetNode(pos);</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pNewNode = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;(value, pOldNode, pOldNode-&gt;next);</span><br><span class=\"line\">    pOldNode-&gt;next-&gt;prev = pNewNode;</span><br><span class=\"line\">    pOldNode-&gt;next = pNewNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-erase\"><a href=\"#14-erase\" class=\"headerlink\" title=\"14.erase\"></a>14.erase</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 删除指定位置的节点</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;pos&quot;&gt;指定位置&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"type\">size_t</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _DelNode(pos);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-swap\"><a href=\"#15-swap\" class=\"headerlink\" title=\"15.swap\"></a>15.swap</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 交换两容器对象</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;另一容器对象&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(ws_list&amp; other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ws_list&lt;ValueT&gt; tmp = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    *<span class=\"keyword\">this</span> = other;</span><br><span class=\"line\">    other = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-size\"><a href=\"#16-size\" class=\"headerlink\" title=\"16.size\"></a>16.size</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取当前节点数量</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;节点数量&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"17-operator-x3D\"><a href=\"#17-operator-x3D\" class=\"headerlink\" title=\"17.operator&#x3D;\"></a>17.operator&#x3D;</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 重载赋值运算符</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;提供赋值数据的容器对象&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\">ws_list&amp; <span class=\"keyword\">operator</span>=(ws_list&amp; other)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == &amp;other) <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    _pHead = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;();</span><br><span class=\"line\">    _pHead = other._pHead;</span><br><span class=\"line\">    _count = other._count;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"18-私有函数\"><a href=\"#18-私有函数\" class=\"headerlink\" title=\"18.私有函数\"></a>18.私有函数</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取节点信息</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;节点序号&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;序号对应节点&lt;/returns&gt;</span></span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* _GetNode(<span class=\"type\">size_t</span> index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">assert</span>(index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; _count);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">size_t</span> pos;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt;= (_count &gt;&gt; <span class=\"number\">1</span>))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tDNode&lt;ValueT&gt;* pNode = _pHead-&gt;next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (pos++ &lt; index)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tpNode = pNode-&gt;next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> pNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">size_t</span> rIndex = _count - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = _pHead-&gt;prev;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (pos++ &lt; rIndex)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpNode = pNode-&gt;prev;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 删除节点</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;节点序号&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"type\">void</span> _DelNode(<span class=\"type\">size_t</span> index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = _GetNode(index);</span><br><span class=\"line\">\t\tpNode-&gt;next-&gt;prev = pNode-&gt;prev;</span><br><span class=\"line\">\t\tpNode-&gt;prev-&gt;next = pNode-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> pNode;</span><br><span class=\"line\">\t\t--_count;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> INCLUDE_WS_LIST_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_WS_LIST_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ws_utilities.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ValueT&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">DNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tValueT data;</span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* prev;</span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* next;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">DNode</span>()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">DNode</span>(ValueT data, DNode&lt;ValueT&gt;* prev, DNode&lt;ValueT&gt;* next)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;prev = prev;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;next = next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ValueT&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ws_list</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">ws_list</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_pHead = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;();</span><br><span class=\"line\">\t\t_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">ws_list</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 添加元素到链表首位</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;元素值&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_front</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;(value, _pHead, _pHead-&gt;next);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_pHead-&gt;next)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_pHead-&gt;next-&gt;prev = pNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_pHead-&gt;prev = pNode;</span><br><span class=\"line\">\t\t\t_pHead-&gt;next = pNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t++_count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 添加元素到链表的最后</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;元素值&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_count == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">push_front</span>(value);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;(value, _pHead-&gt;prev, _pHead);</span><br><span class=\"line\">\t\t_pHead-&gt;prev-&gt;next = pNode;</span><br><span class=\"line\">\t\t_pHead-&gt;prev = pNode;</span><br><span class=\"line\">\t\t++_count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 移除链表首位的元素</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_front</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">erase</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 移除链表最后的元素</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">erase</span>(_count - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取链表首位的元素</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;链表首位的元素&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\">ValueT&amp; <span class=\"title\">front</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _pHead-&gt;next-&gt;data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取链表最后的元素</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;链表最后的元素&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\">ValueT&amp; <span class=\"title\">back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _pHead-&gt;prev-&gt;data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 清除所有节点</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNodeTmp;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = _pHead-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (pNode != _pHead)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpNodeTmp = pNode;</span><br><span class=\"line\">\t\t\tpNode = pNode-&gt;next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> pNodeTmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> _pHead;</span><br><span class=\"line\">\t\t_pHead = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 链表中是否包含指定值</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;需要检测的值&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;若包含，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">contain</span><span class=\"params\">(ValueT&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = _pHead-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (pNode != _pHead)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pNode-&gt;data == value)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tpNode = pNode-&gt;next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 判断集合是否为空</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;若为空，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _count == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 指定位置插入节点</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;pos&quot;&gt;位置&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;值&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">size_t</span> pos, ValueT&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pOldNode = _GetNode(pos);</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNewNode = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;(value, pOldNode, pOldNode-&gt;next);</span><br><span class=\"line\">\t\tpOldNode-&gt;next-&gt;prev = pNewNode;</span><br><span class=\"line\">\t\tpOldNode-&gt;next = pNewNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 删除指定位置的节点</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;pos&quot;&gt;指定位置&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"type\">size_t</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t_DelNode(pos);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 交换两容器对象</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;另一容器对象&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(ws_list&amp; other)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tws_list&lt;ValueT&gt; tmp = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t*<span class=\"keyword\">this</span> = other;</span><br><span class=\"line\">\t\tother = tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取当前节点数量</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;节点数量&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 重载赋值运算符</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;提供赋值数据的容器对象&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\">\tws_list&amp; <span class=\"keyword\">operator</span>=(ws_list&amp; other)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == &amp;other) <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t_pHead = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;();</span><br><span class=\"line\">\t\t_pHead = other._pHead;</span><br><span class=\"line\">\t\t_count = other._count;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取节点信息</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;节点序号&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;序号对应节点&lt;/returns&gt;</span></span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* _GetNode(<span class=\"type\">size_t</span> index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">assert</span>(index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; _count);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">size_t</span> pos;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt;= (_count &gt;&gt; <span class=\"number\">1</span>))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tDNode&lt;ValueT&gt;* pNode = _pHead-&gt;next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (pos++ &lt; index)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tpNode = pNode-&gt;next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> pNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">size_t</span> rIndex = _count - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = _pHead-&gt;prev;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (pos++ &lt; rIndex)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpNode = pNode-&gt;prev;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 删除节点</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;节点序号&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"type\">void</span> _DelNode(<span class=\"type\">size_t</span> index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = _GetNode(index);</span><br><span class=\"line\">\t\tpNode-&gt;next-&gt;prev = pNode-&gt;prev;</span><br><span class=\"line\">\t\tpNode-&gt;prev-&gt;next = pNode-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> pNode;</span><br><span class=\"line\">\t\t--_count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* _pHead;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> _count;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"自定义双向链表（ws-list）\"><a href=\"#自定义双向链表（ws-list）\" class=\"headerlink\" title=\"自定义双向链表（ws_list）\"></a>自定义双向链表（ws_list）</h1><h2 id=\"1-节点结构体\"><a href=\"#1-节点结构体\" class=\"headerlink\" title=\"1.节点结构体\"></a>1.节点结构体</h2><ul>\n<li>data: 节点元素</li>\n<li>prev: 前向指针</li>\n<li>next: 后向指针</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ValueT&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">DNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tValueT data;</span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* prev;</span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* next;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">DNode</span>()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">DNode</span>(ValueT data, DNode&lt;ValueT&gt;* prev, DNode&lt;ValueT&gt;* next)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;prev = prev;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;next = next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-局部变量\"><a href=\"#2-局部变量\" class=\"headerlink\" title=\"2. 局部变量\"></a>2. 局部变量</h2><ul>\n<li>_pHead: 链表头部指针</li>\n<li>_count: 链表元素数量</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* _pHead;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> _count;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-构造以及析构函数\"><a href=\"#3-构造以及析构函数\" class=\"headerlink\" title=\"3.构造以及析构函数\"></a>3.构造以及析构函数</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ValueT&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ws_list</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">ws_list</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_pHead = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;();</span><br><span class=\"line\">\t\t_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">ws_list</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-push-front\"><a href=\"#4-push-front\" class=\"headerlink\" title=\"4.push_front\"></a>4.push_front</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 添加元素到链表首位</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;元素值&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_front</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pNode = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;(value, _pHead, _pHead-&gt;next);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_pHead-&gt;next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _pHead-&gt;next-&gt;prev = pNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _pHead-&gt;prev = pNode;</span><br><span class=\"line\">        _pHead-&gt;next = pNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++_count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-push-back\"><a href=\"#5-push-back\" class=\"headerlink\" title=\"5.push_back\"></a>5.push_back</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 添加元素到链表的最后</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;元素值&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_count == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">push_front</span>(value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pNode = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;(value, _pHead-&gt;prev, _pHead);</span><br><span class=\"line\">    _pHead-&gt;prev-&gt;next = pNode;</span><br><span class=\"line\">    _pHead-&gt;prev = pNode;</span><br><span class=\"line\">    ++_count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-pop-front\"><a href=\"#6-pop-front\" class=\"headerlink\" title=\"6.pop_front\"></a>6.pop_front</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 移除链表首位的元素</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_front</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">erase</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-pop-back\"><a href=\"#7-pop-back\" class=\"headerlink\" title=\"7.pop_back\"></a>7.pop_back</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 移除链表最后的元素</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">erase</span>(_count - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-front\"><a href=\"#8-front\" class=\"headerlink\" title=\"8.front\"></a>8.front</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取链表首位的元素</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;链表首位的元素&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\">ValueT&amp; <span class=\"title\">front</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _pHead-&gt;next-&gt;data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-back\"><a href=\"#9-back\" class=\"headerlink\" title=\"9.back\"></a>9.back</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取链表最后的元素</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;链表最后的元素&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\">ValueT&amp; <span class=\"title\">back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _pHead-&gt;prev-&gt;data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-clear\"><a href=\"#10-clear\" class=\"headerlink\" title=\"10.clear\"></a>10.clear</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 清除所有节点</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pNodeTmp;</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pNode = _pHead-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pNode != _pHead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pNodeTmp = pNode;</span><br><span class=\"line\">        pNode = pNode-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> pNodeTmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> _pHead;</span><br><span class=\"line\">    _pHead = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    _count = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-contains\"><a href=\"#11-contains\" class=\"headerlink\" title=\"11.contains\"></a>11.contains</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 链表中是否包含指定值</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;需要检测的值&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;若包含，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">contain</span><span class=\"params\">(ValueT&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pNode = _pHead-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pNode != _pHead)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pNode-&gt;data == value)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pNode = pNode-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-empty\"><a href=\"#12-empty\" class=\"headerlink\" title=\"12.empty\"></a>12.empty</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 判断集合是否为空</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;若为空，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _count == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-insert\"><a href=\"#13-insert\" class=\"headerlink\" title=\"13.insert\"></a>13.insert</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 指定位置插入节点</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;pos&quot;&gt;位置&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;值&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">size_t</span> pos, ValueT&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pOldNode = _GetNode(pos);</span><br><span class=\"line\">    DNode&lt;ValueT&gt;* pNewNode = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;(value, pOldNode, pOldNode-&gt;next);</span><br><span class=\"line\">    pOldNode-&gt;next-&gt;prev = pNewNode;</span><br><span class=\"line\">    pOldNode-&gt;next = pNewNode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-erase\"><a href=\"#14-erase\" class=\"headerlink\" title=\"14.erase\"></a>14.erase</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 删除指定位置的节点</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;pos&quot;&gt;指定位置&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"type\">size_t</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _DelNode(pos);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-swap\"><a href=\"#15-swap\" class=\"headerlink\" title=\"15.swap\"></a>15.swap</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 交换两容器对象</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;另一容器对象&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(ws_list&amp; other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ws_list&lt;ValueT&gt; tmp = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    *<span class=\"keyword\">this</span> = other;</span><br><span class=\"line\">    other = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-size\"><a href=\"#16-size\" class=\"headerlink\" title=\"16.size\"></a>16.size</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取当前节点数量</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;节点数量&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"17-operator-x3D\"><a href=\"#17-operator-x3D\" class=\"headerlink\" title=\"17.operator&#x3D;\"></a>17.operator&#x3D;</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 重载赋值运算符</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;提供赋值数据的容器对象&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\">ws_list&amp; <span class=\"keyword\">operator</span>=(ws_list&amp; other)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == &amp;other) <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    _pHead = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;();</span><br><span class=\"line\">    _pHead = other._pHead;</span><br><span class=\"line\">    _count = other._count;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"18-私有函数\"><a href=\"#18-私有函数\" class=\"headerlink\" title=\"18.私有函数\"></a>18.私有函数</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取节点信息</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;节点序号&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;序号对应节点&lt;/returns&gt;</span></span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* _GetNode(<span class=\"type\">size_t</span> index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">assert</span>(index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; _count);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">size_t</span> pos;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt;= (_count &gt;&gt; <span class=\"number\">1</span>))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tDNode&lt;ValueT&gt;* pNode = _pHead-&gt;next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (pos++ &lt; index)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tpNode = pNode-&gt;next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> pNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">size_t</span> rIndex = _count - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = _pHead-&gt;prev;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (pos++ &lt; rIndex)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpNode = pNode-&gt;prev;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 删除节点</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;节点序号&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"type\">void</span> _DelNode(<span class=\"type\">size_t</span> index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = _GetNode(index);</span><br><span class=\"line\">\t\tpNode-&gt;next-&gt;prev = pNode-&gt;prev;</span><br><span class=\"line\">\t\tpNode-&gt;prev-&gt;next = pNode-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> pNode;</span><br><span class=\"line\">\t\t--_count;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> INCLUDE_WS_LIST_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_WS_LIST_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ws_utilities.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ValueT&gt;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">DNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tValueT data;</span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* prev;</span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* next;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">DNode</span>()&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">DNode</span>(ValueT data, DNode&lt;ValueT&gt;* prev, DNode&lt;ValueT&gt;* next)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;data = data;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;prev = prev;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;next = next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ValueT&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ws_list</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">ws_list</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t_pHead = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;();</span><br><span class=\"line\">\t\t_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">ws_list</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 添加元素到链表首位</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;元素值&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_front</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;(value, _pHead, _pHead-&gt;next);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_pHead-&gt;next)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_pHead-&gt;next-&gt;prev = pNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_pHead-&gt;prev = pNode;</span><br><span class=\"line\">\t\t\t_pHead-&gt;next = pNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t++_count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 添加元素到链表的最后</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;元素值&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_count == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">push_front</span>(value);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;(value, _pHead-&gt;prev, _pHead);</span><br><span class=\"line\">\t\t_pHead-&gt;prev-&gt;next = pNode;</span><br><span class=\"line\">\t\t_pHead-&gt;prev = pNode;</span><br><span class=\"line\">\t\t++_count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 移除链表首位的元素</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_front</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">erase</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 移除链表最后的元素</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">erase</span>(_count - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取链表首位的元素</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;链表首位的元素&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\">ValueT&amp; <span class=\"title\">front</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _pHead-&gt;next-&gt;data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取链表最后的元素</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;链表最后的元素&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\">ValueT&amp; <span class=\"title\">back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _pHead-&gt;prev-&gt;data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 清除所有节点</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNodeTmp;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = _pHead-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (pNode != _pHead)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpNodeTmp = pNode;</span><br><span class=\"line\">\t\t\tpNode = pNode-&gt;next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> pNodeTmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> _pHead;</span><br><span class=\"line\">\t\t_pHead = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 链表中是否包含指定值</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;需要检测的值&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;若包含，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">contain</span><span class=\"params\">(ValueT&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = _pHead-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (pNode != _pHead)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pNode-&gt;data == value)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tpNode = pNode-&gt;next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 判断集合是否为空</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;若为空，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _count == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 指定位置插入节点</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;pos&quot;&gt;位置&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;值&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">size_t</span> pos, ValueT&amp; value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pOldNode = _GetNode(pos);</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNewNode = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;(value, pOldNode, pOldNode-&gt;next);</span><br><span class=\"line\">\t\tpOldNode-&gt;next-&gt;prev = pNewNode;</span><br><span class=\"line\">\t\tpOldNode-&gt;next = pNewNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 删除指定位置的节点</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;pos&quot;&gt;指定位置&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"type\">size_t</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t_DelNode(pos);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 交换两容器对象</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;另一容器对象&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(ws_list&amp; other)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tws_list&lt;ValueT&gt; tmp = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t*<span class=\"keyword\">this</span> = other;</span><br><span class=\"line\">\t\tother = tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取当前节点数量</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;节点数量&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 重载赋值运算符</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;提供赋值数据的容器对象&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\">\tws_list&amp; <span class=\"keyword\">operator</span>=(ws_list&amp; other)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == &amp;other) <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t_pHead = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS <span class=\"built_in\">DNode</span>&lt;ValueT&gt;();</span><br><span class=\"line\">\t\t_pHead = other._pHead;</span><br><span class=\"line\">\t\t_count = other._count;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取节点信息</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;节点序号&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;序号对应节点&lt;/returns&gt;</span></span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* _GetNode(<span class=\"type\">size_t</span> index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">assert</span>(index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; _count);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">size_t</span> pos;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt;= (_count &gt;&gt; <span class=\"number\">1</span>))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tDNode&lt;ValueT&gt;* pNode = _pHead-&gt;next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (pos++ &lt; index)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tpNode = pNode-&gt;next;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> pNode;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">size_t</span> rIndex = _count - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = _pHead-&gt;prev;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (pos++ &lt; rIndex)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpNode = pNode-&gt;prev;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pNode;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 删除节点</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;节点序号&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"type\">void</span> _DelNode(<span class=\"type\">size_t</span> index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tDNode&lt;ValueT&gt;* pNode = _GetNode(index);</span><br><span class=\"line\">\t\tpNode-&gt;next-&gt;prev = pNode-&gt;prev;</span><br><span class=\"line\">\t\tpNode-&gt;prev-&gt;next = pNode-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span> pNode;</span><br><span class=\"line\">\t\t--_count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tDNode&lt;ValueT&gt;* _pHead;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> _count;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"基于GTest的单元测试（ws_test）","date":"2021-08-06T15:18:30.000Z","author":"ws","description":"基于GTest的单元测试","cover":"/img/17.jpg","_content":"\n# 基于GTest的单元测试（ws_test）\n\n## 完整代码\n\n```cpp\n#pragma once\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <list>\n#include <gtest/gtest.h>\n#include \"ws_vector.h\"\n#include \"ws_list.h\"\n\n#define GTEST_LIB_PATH(path) \"../GTest/\"##path\n\n#ifdef WS_TEST_DEBUG\n#pragma comment(lib,GTEST_LIB_PATH(\"gtest_maind.lib\"))\n#pragma comment(lib,GTEST_LIB_PATH(\"gtestd.lib\"))\n#else\n#pragma comment(lib,GTEST_LIB_PATH(\"gtest_main.lib\"))\n#pragma comment(lib,GTEST_LIB_PATH(\"gtest.lib\"))\n#endif\n\nTEST(ListTest, push_back)\n{\n    std::list<int> lst_std;\n    ws_list<int> lst_ws;\n    for (size_t i = 0; i < 100; i++)\n    {\n        auto r = ws_random(0, 100);\n        lst_std.push_back(r);\n        lst_ws.push_back(r);\n    }\n    EXPECT_EQ(lst_std.size(), lst_ws.size());\n}\n\nTEST(VectorTest, push_back)\n{\n    std::vector<int> v_std;\n    ws_vector<int> v_ws;\n    for (size_t i = 0; i < 100; i++)\n    {\n        auto r = ws_random(0, 100);\n        v_std.push_back(r);\n        v_ws.push_back(r);\n    }\n    EXPECT_EQ(v_std.size(), v_ws.size());\n}\n\nTEST(VectorTest, RandomValues)\n{\n    std::vector<int> v_std;\n    ws_vector<int> v_ws;\n    for (size_t i = 0; i < 100; i++)\n    {\n        auto r = ws_random(0, 100);\n        v_std.push_back(r);\n        v_ws.push_back(r);\n    }\n    auto pos = ws_random(0, 100);\n    EXPECT_EQ(v_std[pos], v_ws[pos]);\n}\n\nint test_all()\n{\n    printf(\"Running main() from %s\\n\", __FILE__);\n    testing::InitGoogleTest();\n    return RUN_ALL_TESTS();\n}\n```\n\n","source":"_posts/ws_test.md","raw":"---\ntitle: 基于GTest的单元测试（ws_test）\ndate: 2021-08-06 23:18:30\nauthor: ws\ndescription: 基于GTest的单元测试\ncategories: 单元测试\ntags: [cpp, gtest]\ncover:\n---\n\n# 基于GTest的单元测试（ws_test）\n\n## 完整代码\n\n```cpp\n#pragma once\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <list>\n#include <gtest/gtest.h>\n#include \"ws_vector.h\"\n#include \"ws_list.h\"\n\n#define GTEST_LIB_PATH(path) \"../GTest/\"##path\n\n#ifdef WS_TEST_DEBUG\n#pragma comment(lib,GTEST_LIB_PATH(\"gtest_maind.lib\"))\n#pragma comment(lib,GTEST_LIB_PATH(\"gtestd.lib\"))\n#else\n#pragma comment(lib,GTEST_LIB_PATH(\"gtest_main.lib\"))\n#pragma comment(lib,GTEST_LIB_PATH(\"gtest.lib\"))\n#endif\n\nTEST(ListTest, push_back)\n{\n    std::list<int> lst_std;\n    ws_list<int> lst_ws;\n    for (size_t i = 0; i < 100; i++)\n    {\n        auto r = ws_random(0, 100);\n        lst_std.push_back(r);\n        lst_ws.push_back(r);\n    }\n    EXPECT_EQ(lst_std.size(), lst_ws.size());\n}\n\nTEST(VectorTest, push_back)\n{\n    std::vector<int> v_std;\n    ws_vector<int> v_ws;\n    for (size_t i = 0; i < 100; i++)\n    {\n        auto r = ws_random(0, 100);\n        v_std.push_back(r);\n        v_ws.push_back(r);\n    }\n    EXPECT_EQ(v_std.size(), v_ws.size());\n}\n\nTEST(VectorTest, RandomValues)\n{\n    std::vector<int> v_std;\n    ws_vector<int> v_ws;\n    for (size_t i = 0; i < 100; i++)\n    {\n        auto r = ws_random(0, 100);\n        v_std.push_back(r);\n        v_ws.push_back(r);\n    }\n    auto pos = ws_random(0, 100);\n    EXPECT_EQ(v_std[pos], v_ws[pos]);\n}\n\nint test_all()\n{\n    printf(\"Running main() from %s\\n\", __FILE__);\n    testing::InitGoogleTest();\n    return RUN_ALL_TESTS();\n}\n```\n\n","slug":"ws_test","published":1,"updated":"2023-04-11T01:05:08.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgbl83s5000pw07k8m2db0es","content":"<h1 id=\"基于GTest的单元测试（ws-test）\"><a href=\"#基于GTest的单元测试（ws-test）\" class=\"headerlink\" title=\"基于GTest的单元测试（ws_test）\"></a>基于GTest的单元测试（ws_test）</h1><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;gtest/gtest.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ws_vector.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ws_list.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTEST_LIB_PATH(path) <span class=\"string\">&quot;../GTest/&quot;</span>##path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> WS_TEST_DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,GTEST_LIB_PATH(<span class=\"string\">&quot;gtest_maind.lib&quot;</span>))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,GTEST_LIB_PATH(<span class=\"string\">&quot;gtestd.lib&quot;</span>))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,GTEST_LIB_PATH(<span class=\"string\">&quot;gtest_main.lib&quot;</span>))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,GTEST_LIB_PATH(<span class=\"string\">&quot;gtest.lib&quot;</span>))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">TEST</span>(ListTest, push_back)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::list&lt;<span class=\"type\">int</span>&gt; lst_std;</span><br><span class=\"line\">    ws_list&lt;<span class=\"type\">int</span>&gt; lst_ws;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> r = <span class=\"built_in\">ws_random</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        lst_std.<span class=\"built_in\">push_back</span>(r);</span><br><span class=\"line\">        lst_ws.<span class=\"built_in\">push_back</span>(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">EXPECT_EQ</span>(lst_std.<span class=\"built_in\">size</span>(), lst_ws.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">TEST</span>(VectorTest, push_back)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; v_std;</span><br><span class=\"line\">    ws_vector&lt;<span class=\"type\">int</span>&gt; v_ws;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> r = <span class=\"built_in\">ws_random</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        v_std.<span class=\"built_in\">push_back</span>(r);</span><br><span class=\"line\">        v_ws.<span class=\"built_in\">push_back</span>(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">EXPECT_EQ</span>(v_std.<span class=\"built_in\">size</span>(), v_ws.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">TEST</span>(VectorTest, RandomValues)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; v_std;</span><br><span class=\"line\">    ws_vector&lt;<span class=\"type\">int</span>&gt; v_ws;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> r = <span class=\"built_in\">ws_random</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        v_std.<span class=\"built_in\">push_back</span>(r);</span><br><span class=\"line\">        v_ws.<span class=\"built_in\">push_back</span>(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> pos = <span class=\"built_in\">ws_random</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"built_in\">EXPECT_EQ</span>(v_std[pos], v_ws[pos]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">test_all</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Running main() from %s\\n&quot;</span>, __FILE__);</span><br><span class=\"line\">    testing::<span class=\"built_in\">InitGoogleTest</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">RUN_ALL_TESTS</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"基于GTest的单元测试（ws-test）\"><a href=\"#基于GTest的单元测试（ws-test）\" class=\"headerlink\" title=\"基于GTest的单元测试（ws_test）\"></a>基于GTest的单元测试（ws_test）</h1><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;list&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;gtest/gtest.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ws_vector.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ws_list.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> GTEST_LIB_PATH(path) <span class=\"string\">&quot;../GTest/&quot;</span>##path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> WS_TEST_DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,GTEST_LIB_PATH(<span class=\"string\">&quot;gtest_maind.lib&quot;</span>))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,GTEST_LIB_PATH(<span class=\"string\">&quot;gtestd.lib&quot;</span>))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,GTEST_LIB_PATH(<span class=\"string\">&quot;gtest_main.lib&quot;</span>))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> comment(lib,GTEST_LIB_PATH(<span class=\"string\">&quot;gtest.lib&quot;</span>))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">TEST</span>(ListTest, push_back)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::list&lt;<span class=\"type\">int</span>&gt; lst_std;</span><br><span class=\"line\">    ws_list&lt;<span class=\"type\">int</span>&gt; lst_ws;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> r = <span class=\"built_in\">ws_random</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        lst_std.<span class=\"built_in\">push_back</span>(r);</span><br><span class=\"line\">        lst_ws.<span class=\"built_in\">push_back</span>(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">EXPECT_EQ</span>(lst_std.<span class=\"built_in\">size</span>(), lst_ws.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">TEST</span>(VectorTest, push_back)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; v_std;</span><br><span class=\"line\">    ws_vector&lt;<span class=\"type\">int</span>&gt; v_ws;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> r = <span class=\"built_in\">ws_random</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        v_std.<span class=\"built_in\">push_back</span>(r);</span><br><span class=\"line\">        v_ws.<span class=\"built_in\">push_back</span>(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">EXPECT_EQ</span>(v_std.<span class=\"built_in\">size</span>(), v_ws.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">TEST</span>(VectorTest, RandomValues)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">int</span>&gt; v_std;</span><br><span class=\"line\">    ws_vector&lt;<span class=\"type\">int</span>&gt; v_ws;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> r = <span class=\"built_in\">ws_random</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        v_std.<span class=\"built_in\">push_back</span>(r);</span><br><span class=\"line\">        v_ws.<span class=\"built_in\">push_back</span>(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> pos = <span class=\"built_in\">ws_random</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"built_in\">EXPECT_EQ</span>(v_std[pos], v_ws[pos]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">test_all</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Running main() from %s\\n&quot;</span>, __FILE__);</span><br><span class=\"line\">    testing::<span class=\"built_in\">InitGoogleTest</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">RUN_ALL_TESTS</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"cpp常用函数（ws_utilities）","date":"2021-07-23T11:18:30.000Z","author":"ws","description":"常用方法","cover":"/img/20.jpg","_content":"\n# 共用库（ws_utilities）\n\n## 完整代码\n\n```cpp\n#ifndef INCLUDE_WS_UTILITIES_HPP\n#define INCLUDE_WS_UTILITIES_HPP\n\n#pragma once\n#include <cassert>\n#include <crtdbg.h>\n\n#ifdef _DEBUG\n#define DEBUG_CHECK_MEMORY_LEAKS (_NORMAL_BLOCK, __FILE__, __LINE__)\n#else\n#define DEBUG_CHECK_MEMORY_LEAKS\n#endif // check memory leaks\n\n/// <summary>\n/// 内存拷贝操作(有效避免内存重叠问题)\n/// </summary>\n/// <param name=\"dst\">目标地址</param>\n/// <param name=\"src\">原地址</param>\n/// <param name=\"size\">原内存大小</param>\n/// <returns>dst首地址</returns>\nvoid* ws_memmove(void* dst, const void* src, size_t size)\n{\n    assert(nullptr != src && nullptr != dst);\n\n    char* tmpDst = (char*)dst;\n    const char* tmpSrc = (const char*)src;\n\n    if (tmpDst <= tmpSrc || tmpDst >= tmpSrc + size)\n    {\n        while (size--)\n        {\n            *tmpDst++ = *tmpSrc++;\n        }\n    }\n    else\n    {\n        tmpDst += size;\n        tmpSrc += size;\n        while (size--)\n        {\n            *--tmpDst = *--tmpSrc;\n        }\n    }\n\n    return dst;\n}\n\n/// <summary>\n/// 内存拷贝操作(有内存重叠问题)\n/// </summary>\n/// <param name=\"dst\">目标地址</param>\n/// <param name=\"src\">原地址</param>\n/// <param name=\"size\">原内存大小</param>\n/// <returns>dst首地址</returns>\nvoid* ws_memcpy(void* dst, const void* src, size_t size)\n{\n    assert(nullptr != src && nullptr != dst);\n\n    char* tmpDst = (char*)dst;\n    const char* tmpSrc = (const char*)src;\n\n    while (size--)\n    {\n        *tmpDst++ = *tmpSrc++;\n    }\n        \n    return dst;\n}\n\n#include <random>\n/// <summary>\n/// 返回指定范围内的随机数\n/// </summary>\n/// <param name=\"b\">区间下限</param>\n/// <param name=\"e\">区间上限</param>\n/// <returns></returns>\nint ws_random(int b, int e)\n{\n    std::random_device sd;\n    std::minstd_rand linearRan(sd());\n    std::uniform_int_distribution<int> dis(b, e);\n    return dis(linearRan);\n}\n\n#endif // INCLUDE_WS_UTILITIES_HPP\n```\n\n","source":"_posts/ws_utilities.md","raw":"---\ntitle: cpp常用函数（ws_utilities）\ndate: 2021-07-23 19:18:30\nauthor: ws\ndescription: 常用方法\ncategories: utils\ntags: [cpp]\ncover:\n---\n\n# 共用库（ws_utilities）\n\n## 完整代码\n\n```cpp\n#ifndef INCLUDE_WS_UTILITIES_HPP\n#define INCLUDE_WS_UTILITIES_HPP\n\n#pragma once\n#include <cassert>\n#include <crtdbg.h>\n\n#ifdef _DEBUG\n#define DEBUG_CHECK_MEMORY_LEAKS (_NORMAL_BLOCK, __FILE__, __LINE__)\n#else\n#define DEBUG_CHECK_MEMORY_LEAKS\n#endif // check memory leaks\n\n/// <summary>\n/// 内存拷贝操作(有效避免内存重叠问题)\n/// </summary>\n/// <param name=\"dst\">目标地址</param>\n/// <param name=\"src\">原地址</param>\n/// <param name=\"size\">原内存大小</param>\n/// <returns>dst首地址</returns>\nvoid* ws_memmove(void* dst, const void* src, size_t size)\n{\n    assert(nullptr != src && nullptr != dst);\n\n    char* tmpDst = (char*)dst;\n    const char* tmpSrc = (const char*)src;\n\n    if (tmpDst <= tmpSrc || tmpDst >= tmpSrc + size)\n    {\n        while (size--)\n        {\n            *tmpDst++ = *tmpSrc++;\n        }\n    }\n    else\n    {\n        tmpDst += size;\n        tmpSrc += size;\n        while (size--)\n        {\n            *--tmpDst = *--tmpSrc;\n        }\n    }\n\n    return dst;\n}\n\n/// <summary>\n/// 内存拷贝操作(有内存重叠问题)\n/// </summary>\n/// <param name=\"dst\">目标地址</param>\n/// <param name=\"src\">原地址</param>\n/// <param name=\"size\">原内存大小</param>\n/// <returns>dst首地址</returns>\nvoid* ws_memcpy(void* dst, const void* src, size_t size)\n{\n    assert(nullptr != src && nullptr != dst);\n\n    char* tmpDst = (char*)dst;\n    const char* tmpSrc = (const char*)src;\n\n    while (size--)\n    {\n        *tmpDst++ = *tmpSrc++;\n    }\n        \n    return dst;\n}\n\n#include <random>\n/// <summary>\n/// 返回指定范围内的随机数\n/// </summary>\n/// <param name=\"b\">区间下限</param>\n/// <param name=\"e\">区间上限</param>\n/// <returns></returns>\nint ws_random(int b, int e)\n{\n    std::random_device sd;\n    std::minstd_rand linearRan(sd());\n    std::uniform_int_distribution<int> dis(b, e);\n    return dis(linearRan);\n}\n\n#endif // INCLUDE_WS_UTILITIES_HPP\n```\n\n","slug":"ws_utilities","published":1,"updated":"2023-04-11T01:05:08.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgbl83s8000vw07kd1djciqy","content":"<h1 id=\"共用库（ws-utilities）\"><a href=\"#共用库（ws-utilities）\" class=\"headerlink\" title=\"共用库（ws_utilities）\"></a>共用库（ws_utilities）</h1><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> INCLUDE_WS_UTILITIES_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_WS_UTILITIES_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;crtdbg.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEBUG_CHECK_MEMORY_LEAKS (_NORMAL_BLOCK, __FILE__, __LINE__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEBUG_CHECK_MEMORY_LEAKS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// check memory leaks</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 内存拷贝操作(有效避免内存重叠问题)</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;dst&quot;&gt;目标地址&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;src&quot;&gt;原地址&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;size&quot;&gt;原内存大小&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;dst首地址&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>* <span class=\"title\">ws_memmove</span><span class=\"params\">(<span class=\"type\">void</span>* dst, <span class=\"type\">const</span> <span class=\"type\">void</span>* src, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(<span class=\"literal\">nullptr</span> != src &amp;&amp; <span class=\"literal\">nullptr</span> != dst);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span>* tmpDst = (<span class=\"type\">char</span>*)dst;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* tmpSrc = (<span class=\"type\">const</span> <span class=\"type\">char</span>*)src;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmpDst &lt;= tmpSrc || tmpDst &gt;= tmpSrc + size)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (size--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            *tmpDst++ = *tmpSrc++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmpDst += size;</span><br><span class=\"line\">        tmpSrc += size;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (size--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            *--tmpDst = *--tmpSrc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dst;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 内存拷贝操作(有内存重叠问题)</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;dst&quot;&gt;目标地址&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;src&quot;&gt;原地址&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;size&quot;&gt;原内存大小&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;dst首地址&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>* <span class=\"title\">ws_memcpy</span><span class=\"params\">(<span class=\"type\">void</span>* dst, <span class=\"type\">const</span> <span class=\"type\">void</span>* src, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(<span class=\"literal\">nullptr</span> != src &amp;&amp; <span class=\"literal\">nullptr</span> != dst);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span>* tmpDst = (<span class=\"type\">char</span>*)dst;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* tmpSrc = (<span class=\"type\">const</span> <span class=\"type\">char</span>*)src;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (size--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *tmpDst++ = *tmpSrc++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dst;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 返回指定范围内的随机数</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;b&quot;&gt;区间下限&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;e&quot;&gt;区间上限&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ws_random</span><span class=\"params\">(<span class=\"type\">int</span> b, <span class=\"type\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::random_device sd;</span><br><span class=\"line\">    <span class=\"function\">std::minstd_rand <span class=\"title\">linearRan</span><span class=\"params\">(sd())</span></span>;</span><br><span class=\"line\">    <span class=\"function\">std::uniform_int_distribution&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dis</span><span class=\"params\">(b, e)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">dis</span>(linearRan);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// INCLUDE_WS_UTILITIES_HPP</span></span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"共用库（ws-utilities）\"><a href=\"#共用库（ws-utilities）\" class=\"headerlink\" title=\"共用库（ws_utilities）\"></a>共用库（ws_utilities）</h1><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> INCLUDE_WS_UTILITIES_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_WS_UTILITIES_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;crtdbg.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> _DEBUG</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEBUG_CHECK_MEMORY_LEAKS (_NORMAL_BLOCK, __FILE__, __LINE__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> DEBUG_CHECK_MEMORY_LEAKS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// check memory leaks</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 内存拷贝操作(有效避免内存重叠问题)</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;dst&quot;&gt;目标地址&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;src&quot;&gt;原地址&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;size&quot;&gt;原内存大小&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;dst首地址&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>* <span class=\"title\">ws_memmove</span><span class=\"params\">(<span class=\"type\">void</span>* dst, <span class=\"type\">const</span> <span class=\"type\">void</span>* src, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(<span class=\"literal\">nullptr</span> != src &amp;&amp; <span class=\"literal\">nullptr</span> != dst);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span>* tmpDst = (<span class=\"type\">char</span>*)dst;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* tmpSrc = (<span class=\"type\">const</span> <span class=\"type\">char</span>*)src;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmpDst &lt;= tmpSrc || tmpDst &gt;= tmpSrc + size)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (size--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            *tmpDst++ = *tmpSrc++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tmpDst += size;</span><br><span class=\"line\">        tmpSrc += size;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (size--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            *--tmpDst = *--tmpSrc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dst;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 内存拷贝操作(有内存重叠问题)</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;dst&quot;&gt;目标地址&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;src&quot;&gt;原地址&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;size&quot;&gt;原内存大小&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;dst首地址&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span>* <span class=\"title\">ws_memcpy</span><span class=\"params\">(<span class=\"type\">void</span>* dst, <span class=\"type\">const</span> <span class=\"type\">void</span>* src, <span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(<span class=\"literal\">nullptr</span> != src &amp;&amp; <span class=\"literal\">nullptr</span> != dst);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span>* tmpDst = (<span class=\"type\">char</span>*)dst;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span>* tmpSrc = (<span class=\"type\">const</span> <span class=\"type\">char</span>*)src;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (size--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        *tmpDst++ = *tmpSrc++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dst;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 返回指定范围内的随机数</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;b&quot;&gt;区间下限&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;e&quot;&gt;区间上限&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ws_random</span><span class=\"params\">(<span class=\"type\">int</span> b, <span class=\"type\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::random_device sd;</span><br><span class=\"line\">    <span class=\"function\">std::minstd_rand <span class=\"title\">linearRan</span><span class=\"params\">(sd())</span></span>;</span><br><span class=\"line\">    <span class=\"function\">std::uniform_int_distribution&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dis</span><span class=\"params\">(b, e)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">dis</span>(linearRan);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// INCLUDE_WS_UTILITIES_HPP</span></span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"自定义动态数组（ws_vector）","date":"2021-07-18T08:18:30.000Z","author":"ws","description":"使用基础元素构建C++动态数组","cover":"/img/9.jpg","_content":"\n# 自定义动态数组（ws_vector）\n\n## 1.声明局部变量\n\n- _value:指针数组对象\n- _size:数组元素个数\n- _cap:数组容量\n\n```cpp\ntemplate<typename ValueT>\nclass ws_vector\n{\nprivate:\n\tValueT* _value;\n\tsize_t _size{ 0 };\n\tsize_t _cap{ 2 };\n}\n```\n\n## 2.构造函数\n\n```cpp\nclass ws_vector\n{\npublic:\n\tws_vector()\n\t{\n\t\tinit();\n\t}\n\n\tws_vector(size_t cap)\n\t{\n\t\tif (cap > 0) _cap = cap;\n\t\tinit();\n\t}\n\n\tws_vector(const ValueT& value, size_t size)\n\t{\n\t\twhile (size--)\n\t\t{\n\t\t\tpush_back(value);\n\t\t}\n\t}\n\n\tws_vector(ws_vector& v) noexcept\n\t{\n\t\t*this = v;\n\t}\n\n\tvoid init()\n\t{\n\t\t_value = new DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];\n\t}\n}\n```\n\n## 3.push_back\n\n```cpp\n/// <summary>\n/// 在数组的最后添加一个数据\n/// </summary>\n/// <param name=\"value\">需要添加的值</param>\nvoid push_back(ValueT value)\n{\n    if (_size == _cap)\n    {\n    \t_expand_cap(_cap << 1);\n    }\n    _value[_size++] = value;\n}\n```\n\n## 4.pop_back\n\n```cpp\n/// <summary>\n/// 去掉数组最后一个元素\n/// </summary>\nvoid pop_back()\n{\n    --_size;\n}\n```\n\n## 5.resize\n\n```cpp\n/// <summary>\n/// 重设容器大小\n/// </summary>\n/// <param name=\"size\">容器大小</param>\nvoid resize(size_t size)\n{\n    if (size < 0)\n    {\n        return;\n    }\n\n    if (size < _cap)\n    {\n        _size = size;\n        return;\n    }\n\n    if (size >= _cap)\n    {\n        _expand_cap(size << 1);\n        return;\n    }\n}\n```\n\n## 6.erase\n\n```cpp\n/// <summary>\n/// 从容器擦除指定位置的元素\n/// </summary>\n/// <param name=\"index\"></param>\nvoid erase(size_t index)\n{\n    if (index >= _size) return;\n    for (size_t i = index; i < _size; ++i)\n    {\n        _value[i] = _value[i + 1];\n    }\n}\n```\n\n## 7.swap\n\n```cpp\n/// <summary>\n/// 将内容与 other 的交换\n/// </summary>\n/// <param name=\"other\"></param>\nvoid swap(ws_vector& other)\n{\n    ws_vector<ValueT> tmp = *this;\n    *this = other;\n    other = tmp;\n}\n```\n\n## 8.clear\n\n```cpp\n/// <summary>\n/// 从容器擦除所有元素。此调用后 size() 返回零\n/// </summary>\nvoid clear()\n{\n    if (_value)\n    {\n        delete[] _value;\n    }\n    _size = 0;\n    _cap = 0;\n}\n```\n\n## 9.reserve\n\n```cpp\n/// <summary>\n/// 预分配集合容量\n/// </summary>\n/// <param name=\"cap\">容量大小</param>\nvoid reserve(size_t cap)\n{\n    if (cap <= _cap || cap > max_size())\n    {\n        return;\n    }\n    _expand_cap(cap);\n}\n```\n\n## 10.contains\n\n```cpp\n/// <summary>\n/// 集合中是否包含指定值\n/// </summary>\n/// <param name=\"value\">需要检测的值</param>\n/// <returns>若包含，则为true；反之，为false</returns>\nbool contains(ValueT value)\n{\n    auto index = _size;\n    while (index--)\n    {\n        if (value == _value[index])\n        {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n## 11.empty\n\n```cpp\n/// <summary>\n/// 判断集合是否为空\n/// </summary>\n/// <returns>若为空，则为true；反之，为false</returns>\nbool empty()\n{\n    return _size == 0;\n}\n```\n\n## 12.size\n\n```cpp\n/// <summary>\n/// 获取集合中元素个数\n/// </summary>\n/// <returns>元素个数</returns>\nsize_t size()\n{\n    return _size;\n}\n```\n\n## 13.max_size\n\n```cpp\n/// <summary>\n/// 获取集合的最大存储能力\n/// </summary>\n/// <returns>集合的最大存储能力</returns>\nsize_t max_size()\n{\n    return std::numeric_limits<size_t>::max();\n}\n```\n\n## 14.capacity\n\n```cpp\n/// <summary>\n/// 集合已分配空间的大小\n/// </summary>\n/// <returns>当前分配存储的容量</returns>\nsize_t capacity()\n{\n    return _cap;\n}\n```\n\n## 15.at\n\n```cpp\n/// <summary>\n/// 返回位于指定位置 index 的元素的引用，有边界检查\n/// </summary>\n/// <param name=\"index\"></param>\n/// <returns>index处元素的引用</returns>\nValueT& at(size_t index)\n{\n    if (index < 0 || index >= _size) throw(std::out_of_range(\"Parameter access out of range.\"));\n    return _value[index];\n}\n```\n\n## 16.operator[]\n\n```cpp\n/// <summary>\n/// 返回位于指定位置 index 的元素的引用，无边界检查\n/// </summary>\n/// <param name=\"index\"></param>\n/// <returns>index处元素的引用</returns>\nValueT& operator[](size_t index)\n{\n    return _value[index];\n}\n```\n\n## 17.front\n\n```cpp\n/// <summary>\n/// 获取容器首元素的引用\n/// </summary>\n/// <returns>容器首元素的引用</returns>\nValueT& front()\n{\n    return _value[0];\n}\n```\n\n## 18.back\n\n```cpp\n/// <summary>\n/// 获取容器最后一个元素的引用\n/// </summary>\n/// <returns>容器最后一个元素的引用</returns>\nValueT& back()\n{\n    return _value[_size - 1];\n}\n```\n\n## 19.data\n\n```cpp\n/// <summary>\n/// 获取指向作为元素存储工作的底层数组的指针\n/// </summary>\n/// <returns>元素存储工作的底层数组的指针</returns>\nValueT* data()\n{\n    return _value;\n}\n```\n\n## 20.operator=\n\n```cpp\n/// <summary>\n/// 重载赋值运算符\n/// </summary>\n/// <param name=\"other\">提供赋值数据的容器对象</param>\n/// <returns></returns>\nws_vector& operator=(ws_vector& other)\n{\n    if (this == &other) return *this;\n\n    delete[] _value;\n    _size = other._size;\n    _cap = other._cap;\n    _value = new DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];\n\n    for (size_t i = 0; i < _size; ++i)\n    {\n        _value[i] = other._value[i];\n    }\n\n    return *this;\n}\n```\n\n## 21.析构函数\n\n```cpp\n~ws_vector()\n{\n    clear();\n}\n```\n\n## 22.私有函数\n\n```cpp\nprivate:\n\tvoid _expand_cap(size_t cap)\n\t{\n\t\tValueT* newValue = new DEBUG_CHECK_MEMORY_LEAKS ValueT[cap];\n\t\tfor (size_t i = 0; i < _size; ++i)\n\t\t{\n\t\t\tnewValue[i] = _value[i];\n\t\t}\n\t\tdelete[] _value;\n\t\t_cap = cap;\n\t\t_value = newValue;\n\t}\n```\n\n","source":"_posts/ws_vector.md","raw":"---\ntitle: 自定义动态数组（ws_vector）\ndate: 2021-07-18 16:18:30\nauthor: ws\ndescription: 使用基础元素构建C++动态数组\ncategories: 数据结构\ntags: cpp\ncover:\n---\n\n# 自定义动态数组（ws_vector）\n\n## 1.声明局部变量\n\n- _value:指针数组对象\n- _size:数组元素个数\n- _cap:数组容量\n\n```cpp\ntemplate<typename ValueT>\nclass ws_vector\n{\nprivate:\n\tValueT* _value;\n\tsize_t _size{ 0 };\n\tsize_t _cap{ 2 };\n}\n```\n\n## 2.构造函数\n\n```cpp\nclass ws_vector\n{\npublic:\n\tws_vector()\n\t{\n\t\tinit();\n\t}\n\n\tws_vector(size_t cap)\n\t{\n\t\tif (cap > 0) _cap = cap;\n\t\tinit();\n\t}\n\n\tws_vector(const ValueT& value, size_t size)\n\t{\n\t\twhile (size--)\n\t\t{\n\t\t\tpush_back(value);\n\t\t}\n\t}\n\n\tws_vector(ws_vector& v) noexcept\n\t{\n\t\t*this = v;\n\t}\n\n\tvoid init()\n\t{\n\t\t_value = new DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];\n\t}\n}\n```\n\n## 3.push_back\n\n```cpp\n/// <summary>\n/// 在数组的最后添加一个数据\n/// </summary>\n/// <param name=\"value\">需要添加的值</param>\nvoid push_back(ValueT value)\n{\n    if (_size == _cap)\n    {\n    \t_expand_cap(_cap << 1);\n    }\n    _value[_size++] = value;\n}\n```\n\n## 4.pop_back\n\n```cpp\n/// <summary>\n/// 去掉数组最后一个元素\n/// </summary>\nvoid pop_back()\n{\n    --_size;\n}\n```\n\n## 5.resize\n\n```cpp\n/// <summary>\n/// 重设容器大小\n/// </summary>\n/// <param name=\"size\">容器大小</param>\nvoid resize(size_t size)\n{\n    if (size < 0)\n    {\n        return;\n    }\n\n    if (size < _cap)\n    {\n        _size = size;\n        return;\n    }\n\n    if (size >= _cap)\n    {\n        _expand_cap(size << 1);\n        return;\n    }\n}\n```\n\n## 6.erase\n\n```cpp\n/// <summary>\n/// 从容器擦除指定位置的元素\n/// </summary>\n/// <param name=\"index\"></param>\nvoid erase(size_t index)\n{\n    if (index >= _size) return;\n    for (size_t i = index; i < _size; ++i)\n    {\n        _value[i] = _value[i + 1];\n    }\n}\n```\n\n## 7.swap\n\n```cpp\n/// <summary>\n/// 将内容与 other 的交换\n/// </summary>\n/// <param name=\"other\"></param>\nvoid swap(ws_vector& other)\n{\n    ws_vector<ValueT> tmp = *this;\n    *this = other;\n    other = tmp;\n}\n```\n\n## 8.clear\n\n```cpp\n/// <summary>\n/// 从容器擦除所有元素。此调用后 size() 返回零\n/// </summary>\nvoid clear()\n{\n    if (_value)\n    {\n        delete[] _value;\n    }\n    _size = 0;\n    _cap = 0;\n}\n```\n\n## 9.reserve\n\n```cpp\n/// <summary>\n/// 预分配集合容量\n/// </summary>\n/// <param name=\"cap\">容量大小</param>\nvoid reserve(size_t cap)\n{\n    if (cap <= _cap || cap > max_size())\n    {\n        return;\n    }\n    _expand_cap(cap);\n}\n```\n\n## 10.contains\n\n```cpp\n/// <summary>\n/// 集合中是否包含指定值\n/// </summary>\n/// <param name=\"value\">需要检测的值</param>\n/// <returns>若包含，则为true；反之，为false</returns>\nbool contains(ValueT value)\n{\n    auto index = _size;\n    while (index--)\n    {\n        if (value == _value[index])\n        {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n## 11.empty\n\n```cpp\n/// <summary>\n/// 判断集合是否为空\n/// </summary>\n/// <returns>若为空，则为true；反之，为false</returns>\nbool empty()\n{\n    return _size == 0;\n}\n```\n\n## 12.size\n\n```cpp\n/// <summary>\n/// 获取集合中元素个数\n/// </summary>\n/// <returns>元素个数</returns>\nsize_t size()\n{\n    return _size;\n}\n```\n\n## 13.max_size\n\n```cpp\n/// <summary>\n/// 获取集合的最大存储能力\n/// </summary>\n/// <returns>集合的最大存储能力</returns>\nsize_t max_size()\n{\n    return std::numeric_limits<size_t>::max();\n}\n```\n\n## 14.capacity\n\n```cpp\n/// <summary>\n/// 集合已分配空间的大小\n/// </summary>\n/// <returns>当前分配存储的容量</returns>\nsize_t capacity()\n{\n    return _cap;\n}\n```\n\n## 15.at\n\n```cpp\n/// <summary>\n/// 返回位于指定位置 index 的元素的引用，有边界检查\n/// </summary>\n/// <param name=\"index\"></param>\n/// <returns>index处元素的引用</returns>\nValueT& at(size_t index)\n{\n    if (index < 0 || index >= _size) throw(std::out_of_range(\"Parameter access out of range.\"));\n    return _value[index];\n}\n```\n\n## 16.operator[]\n\n```cpp\n/// <summary>\n/// 返回位于指定位置 index 的元素的引用，无边界检查\n/// </summary>\n/// <param name=\"index\"></param>\n/// <returns>index处元素的引用</returns>\nValueT& operator[](size_t index)\n{\n    return _value[index];\n}\n```\n\n## 17.front\n\n```cpp\n/// <summary>\n/// 获取容器首元素的引用\n/// </summary>\n/// <returns>容器首元素的引用</returns>\nValueT& front()\n{\n    return _value[0];\n}\n```\n\n## 18.back\n\n```cpp\n/// <summary>\n/// 获取容器最后一个元素的引用\n/// </summary>\n/// <returns>容器最后一个元素的引用</returns>\nValueT& back()\n{\n    return _value[_size - 1];\n}\n```\n\n## 19.data\n\n```cpp\n/// <summary>\n/// 获取指向作为元素存储工作的底层数组的指针\n/// </summary>\n/// <returns>元素存储工作的底层数组的指针</returns>\nValueT* data()\n{\n    return _value;\n}\n```\n\n## 20.operator=\n\n```cpp\n/// <summary>\n/// 重载赋值运算符\n/// </summary>\n/// <param name=\"other\">提供赋值数据的容器对象</param>\n/// <returns></returns>\nws_vector& operator=(ws_vector& other)\n{\n    if (this == &other) return *this;\n\n    delete[] _value;\n    _size = other._size;\n    _cap = other._cap;\n    _value = new DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];\n\n    for (size_t i = 0; i < _size; ++i)\n    {\n        _value[i] = other._value[i];\n    }\n\n    return *this;\n}\n```\n\n## 21.析构函数\n\n```cpp\n~ws_vector()\n{\n    clear();\n}\n```\n\n## 22.私有函数\n\n```cpp\nprivate:\n\tvoid _expand_cap(size_t cap)\n\t{\n\t\tValueT* newValue = new DEBUG_CHECK_MEMORY_LEAKS ValueT[cap];\n\t\tfor (size_t i = 0; i < _size; ++i)\n\t\t{\n\t\t\tnewValue[i] = _value[i];\n\t\t}\n\t\tdelete[] _value;\n\t\t_cap = cap;\n\t\t_value = newValue;\n\t}\n```\n\n","slug":"ws_vector","published":1,"updated":"2023-04-11T01:05:07.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgbl83s9000xw07kc3ti6g6c","content":"<h1 id=\"自定义动态数组（ws-vector）\"><a href=\"#自定义动态数组（ws-vector）\" class=\"headerlink\" title=\"自定义动态数组（ws_vector）\"></a>自定义动态数组（ws_vector）</h1><h2 id=\"1-声明局部变量\"><a href=\"#1-声明局部变量\" class=\"headerlink\" title=\"1.声明局部变量\"></a>1.声明局部变量</h2><ul>\n<li>_value:指针数组对象</li>\n<li>_size:数组元素个数</li>\n<li>_cap:数组容量</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ValueT&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ws_vector</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tValueT* _value;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> _size&#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> _cap&#123; <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-构造函数\"><a href=\"#2-构造函数\" class=\"headerlink\" title=\"2.构造函数\"></a>2.构造函数</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ws_vector</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>(<span class=\"type\">size_t</span> cap)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cap &gt; <span class=\"number\">0</span>) _cap = cap;</span><br><span class=\"line\">\t\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>(<span class=\"type\">const</span> ValueT&amp; value, <span class=\"type\">size_t</span> size)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (size--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">push_back</span>(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>(ws_vector&amp; v) <span class=\"keyword\">noexcept</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*<span class=\"keyword\">this</span> = v;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t_value = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-push-back\"><a href=\"#3-push-back\" class=\"headerlink\" title=\"3.push_back\"></a>3.push_back</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 在数组的最后添加一个数据</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;需要添加的值&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_size == _cap)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t_expand_cap(_cap &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _value[_size++] = value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-pop-back\"><a href=\"#4-pop-back\" class=\"headerlink\" title=\"4.pop_back\"></a>4.pop_back</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 去掉数组最后一个元素</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    --_size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-resize\"><a href=\"#5-resize\" class=\"headerlink\" title=\"5.resize\"></a>5.resize</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 重设容器大小</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;size&quot;&gt;容器大小&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &lt; _cap)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _size = size;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &gt;= _cap)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _expand_cap(size &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-erase\"><a href=\"#6-erase\" class=\"headerlink\" title=\"6.erase\"></a>6.erase</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 从容器擦除指定位置的元素</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"type\">size_t</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= _size) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = index; i &lt; _size; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _value[i] = _value[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-swap\"><a href=\"#7-swap\" class=\"headerlink\" title=\"7.swap\"></a>7.swap</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 将内容与 other 的交换</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(ws_vector&amp; other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ws_vector&lt;ValueT&gt; tmp = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    *<span class=\"keyword\">this</span> = other;</span><br><span class=\"line\">    other = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-clear\"><a href=\"#8-clear\" class=\"headerlink\" title=\"8.clear\"></a>8.clear</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 从容器擦除所有元素。此调用后 size() 返回零</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_value)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] _value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    _cap = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-reserve\"><a href=\"#9-reserve\" class=\"headerlink\" title=\"9.reserve\"></a>9.reserve</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 预分配集合容量</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;cap&quot;&gt;容量大小&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reserve</span><span class=\"params\">(<span class=\"type\">size_t</span> cap)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cap &lt;= _cap || cap &gt; <span class=\"built_in\">max_size</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _expand_cap(cap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-contains\"><a href=\"#10-contains\" class=\"headerlink\" title=\"10.contains\"></a>10.contains</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 集合中是否包含指定值</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;需要检测的值&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;若包含，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">contains</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> index = _size;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (index--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == _value[index])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-empty\"><a href=\"#11-empty\" class=\"headerlink\" title=\"11.empty\"></a>11.empty</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 判断集合是否为空</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;若为空，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _size == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-size\"><a href=\"#12-size\" class=\"headerlink\" title=\"12.size\"></a>12.size</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取集合中元素个数</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;元素个数&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-max-size\"><a href=\"#13-max-size\" class=\"headerlink\" title=\"13.max_size\"></a>13.max_size</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取集合的最大存储能力</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;集合的最大存储能力&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">max_size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> std::numeric_limits&lt;<span class=\"type\">size_t</span>&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-capacity\"><a href=\"#14-capacity\" class=\"headerlink\" title=\"14.capacity\"></a>14.capacity</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 集合已分配空间的大小</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;当前分配存储的容量&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">capacity</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _cap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-at\"><a href=\"#15-at\" class=\"headerlink\" title=\"15.at\"></a>15.at</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 返回位于指定位置 index 的元素的引用，有边界检查</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;index处元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\">ValueT&amp; <span class=\"title\">at</span><span class=\"params\">(<span class=\"type\">size_t</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= _size) <span class=\"keyword\">throw</span>(std::<span class=\"built_in\">out_of_range</span>(<span class=\"string\">&quot;Parameter access out of range.&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _value[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-operator\"><a href=\"#16-operator\" class=\"headerlink\" title=\"16.operator[]\"></a>16.operator[]</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 返回位于指定位置 index 的元素的引用，无边界检查</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;index处元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\">ValueT&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">size_t</span> index)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _value[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"17-front\"><a href=\"#17-front\" class=\"headerlink\" title=\"17.front\"></a>17.front</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取容器首元素的引用</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;容器首元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\">ValueT&amp; <span class=\"title\">front</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _value[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"18-back\"><a href=\"#18-back\" class=\"headerlink\" title=\"18.back\"></a>18.back</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取容器最后一个元素的引用</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;容器最后一个元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\">ValueT&amp; <span class=\"title\">back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _value[_size - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"19-data\"><a href=\"#19-data\" class=\"headerlink\" title=\"19.data\"></a>19.data</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取指向作为元素存储工作的底层数组的指针</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;元素存储工作的底层数组的指针&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\">ValueT* <span class=\"title\">data</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"20-operator-x3D\"><a href=\"#20-operator-x3D\" class=\"headerlink\" title=\"20.operator&#x3D;\"></a>20.operator&#x3D;</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 重载赋值运算符</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;提供赋值数据的容器对象&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\">ws_vector&amp; <span class=\"keyword\">operator</span>=(ws_vector&amp; other)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == &amp;other) <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] _value;</span><br><span class=\"line\">    _size = other._size;</span><br><span class=\"line\">    _cap = other._cap;</span><br><span class=\"line\">    _value = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; _size; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _value[i] = other._value[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"21-析构函数\"><a href=\"#21-析构函数\" class=\"headerlink\" title=\"21.析构函数\"></a>21.析构函数</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~<span class=\"built_in\">ws_vector</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"22-私有函数\"><a href=\"#22-私有函数\" class=\"headerlink\" title=\"22.私有函数\"></a>22.私有函数</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">void</span> _expand_cap(<span class=\"type\">size_t</span> cap)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tValueT* newValue = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS ValueT[cap];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; _size; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnewValue[i] = _value[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[] _value;</span><br><span class=\"line\">\t\t_cap = cap;</span><br><span class=\"line\">\t\t_value = newValue;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"自定义动态数组（ws-vector）\"><a href=\"#自定义动态数组（ws-vector）\" class=\"headerlink\" title=\"自定义动态数组（ws_vector）\"></a>自定义动态数组（ws_vector）</h1><h2 id=\"1-声明局部变量\"><a href=\"#1-声明局部变量\" class=\"headerlink\" title=\"1.声明局部变量\"></a>1.声明局部变量</h2><ul>\n<li>_value:指针数组对象</li>\n<li>_size:数组元素个数</li>\n<li>_cap:数组容量</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ValueT&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ws_vector</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tValueT* _value;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> _size&#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> _cap&#123; <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-构造函数\"><a href=\"#2-构造函数\" class=\"headerlink\" title=\"2.构造函数\"></a>2.构造函数</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ws_vector</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>(<span class=\"type\">size_t</span> cap)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cap &gt; <span class=\"number\">0</span>) _cap = cap;</span><br><span class=\"line\">\t\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>(<span class=\"type\">const</span> ValueT&amp; value, <span class=\"type\">size_t</span> size)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (size--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">push_back</span>(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>(ws_vector&amp; v) <span class=\"keyword\">noexcept</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*<span class=\"keyword\">this</span> = v;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t_value = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-push-back\"><a href=\"#3-push-back\" class=\"headerlink\" title=\"3.push_back\"></a>3.push_back</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 在数组的最后添加一个数据</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;需要添加的值&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_size == _cap)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t_expand_cap(_cap &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _value[_size++] = value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-pop-back\"><a href=\"#4-pop-back\" class=\"headerlink\" title=\"4.pop_back\"></a>4.pop_back</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 去掉数组最后一个元素</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    --_size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-resize\"><a href=\"#5-resize\" class=\"headerlink\" title=\"5.resize\"></a>5.resize</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 重设容器大小</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;size&quot;&gt;容器大小&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &lt; _cap)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _size = size;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &gt;= _cap)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _expand_cap(size &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-erase\"><a href=\"#6-erase\" class=\"headerlink\" title=\"6.erase\"></a>6.erase</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 从容器擦除指定位置的元素</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"type\">size_t</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= _size) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = index; i &lt; _size; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _value[i] = _value[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-swap\"><a href=\"#7-swap\" class=\"headerlink\" title=\"7.swap\"></a>7.swap</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 将内容与 other 的交换</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(ws_vector&amp; other)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ws_vector&lt;ValueT&gt; tmp = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    *<span class=\"keyword\">this</span> = other;</span><br><span class=\"line\">    other = tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-clear\"><a href=\"#8-clear\" class=\"headerlink\" title=\"8.clear\"></a>8.clear</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 从容器擦除所有元素。此调用后 size() 返回零</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_value)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span>[] _value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    _cap = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-reserve\"><a href=\"#9-reserve\" class=\"headerlink\" title=\"9.reserve\"></a>9.reserve</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 预分配集合容量</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;cap&quot;&gt;容量大小&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reserve</span><span class=\"params\">(<span class=\"type\">size_t</span> cap)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cap &lt;= _cap || cap &gt; <span class=\"built_in\">max_size</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _expand_cap(cap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-contains\"><a href=\"#10-contains\" class=\"headerlink\" title=\"10.contains\"></a>10.contains</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 集合中是否包含指定值</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;需要检测的值&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;若包含，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">contains</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> index = _size;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (index--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == _value[index])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-empty\"><a href=\"#11-empty\" class=\"headerlink\" title=\"11.empty\"></a>11.empty</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 判断集合是否为空</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;若为空，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _size == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-size\"><a href=\"#12-size\" class=\"headerlink\" title=\"12.size\"></a>12.size</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取集合中元素个数</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;元素个数&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"13-max-size\"><a href=\"#13-max-size\" class=\"headerlink\" title=\"13.max_size\"></a>13.max_size</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取集合的最大存储能力</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;集合的最大存储能力&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">max_size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> std::numeric_limits&lt;<span class=\"type\">size_t</span>&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"14-capacity\"><a href=\"#14-capacity\" class=\"headerlink\" title=\"14.capacity\"></a>14.capacity</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 集合已分配空间的大小</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;当前分配存储的容量&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">capacity</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _cap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-at\"><a href=\"#15-at\" class=\"headerlink\" title=\"15.at\"></a>15.at</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 返回位于指定位置 index 的元素的引用，有边界检查</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;index处元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\">ValueT&amp; <span class=\"title\">at</span><span class=\"params\">(<span class=\"type\">size_t</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= _size) <span class=\"keyword\">throw</span>(std::<span class=\"built_in\">out_of_range</span>(<span class=\"string\">&quot;Parameter access out of range.&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _value[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-operator\"><a href=\"#16-operator\" class=\"headerlink\" title=\"16.operator[]\"></a>16.operator[]</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 返回位于指定位置 index 的元素的引用，无边界检查</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;index处元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\">ValueT&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">size_t</span> index)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _value[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"17-front\"><a href=\"#17-front\" class=\"headerlink\" title=\"17.front\"></a>17.front</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取容器首元素的引用</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;容器首元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\">ValueT&amp; <span class=\"title\">front</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _value[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"18-back\"><a href=\"#18-back\" class=\"headerlink\" title=\"18.back\"></a>18.back</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取容器最后一个元素的引用</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;容器最后一个元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\">ValueT&amp; <span class=\"title\">back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _value[_size - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"19-data\"><a href=\"#19-data\" class=\"headerlink\" title=\"19.data\"></a>19.data</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 获取指向作为元素存储工作的底层数组的指针</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;元素存储工作的底层数组的指针&lt;/returns&gt;</span></span><br><span class=\"line\"><span class=\"function\">ValueT* <span class=\"title\">data</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"20-operator-x3D\"><a href=\"#20-operator-x3D\" class=\"headerlink\" title=\"20.operator&#x3D;\"></a>20.operator&#x3D;</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 重载赋值运算符</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;提供赋值数据的容器对象&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\">ws_vector&amp; <span class=\"keyword\">operator</span>=(ws_vector&amp; other)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == &amp;other) <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] _value;</span><br><span class=\"line\">    _size = other._size;</span><br><span class=\"line\">    _cap = other._cap;</span><br><span class=\"line\">    _value = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; _size; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _value[i] = other._value[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"21-析构函数\"><a href=\"#21-析构函数\" class=\"headerlink\" title=\"21.析构函数\"></a>21.析构函数</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~<span class=\"built_in\">ws_vector</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"22-私有函数\"><a href=\"#22-私有函数\" class=\"headerlink\" title=\"22.私有函数\"></a>22.私有函数</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">void</span> _expand_cap(<span class=\"type\">size_t</span> cap)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tValueT* newValue = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS ValueT[cap];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; _size; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnewValue[i] = _value[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[] _value;</span><br><span class=\"line\">\t\t_cap = cap;</span><br><span class=\"line\">\t\t_value = newValue;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"自定义动态数组（ws_vector_iterator）","date":"2021-08-06T14:18:30.000Z","author":"ws","description":"使用基础元素构建C++动态数组（迭代器版本）","cover":"/img/7.jpg","_content":"\n# 自定义动态数组-迭代器（ws_vector_iterator）\n\n## 完整代码\n\n```cpp\n#ifndef INCLUDE_WS_VECTOR_ITERATOR_HPP\n#define INCLUDE_WS_VECTOR_ITERATOR_HPP\n\n#pragma once\n#include \"ws_utilities.h\"\n\n#pragma warning(push)\n#pragma warning(disable:6385)\n#pragma warning(disable:6386)\ntemplate<typename ValueT>\nclass ws_vector\n{\npublic:\n\tws_vector()\n\t{\n\t\tinit();\n\t}\n\n\tws_vector(size_t cap)\n\t{\n\t\tif (cap > 0) _cap = cap;\n\t\tinit();\n\t}\n\n\tws_vector(const ValueT& value, size_t size)\n\t{\n\t\twhile (size--)\n\t\t{\n\t\t\tpush_back(value);\n\t\t}\n\t}\n\n\tws_vector(ws_vector& v) noexcept\n\t{\n\t\t*this = v;\n\t}\n\n\tvoid init()\n\t{\n\t\t_value = new DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];\n\t}\n\n\t/// <summary>\n\t/// 在数组的最后添加一个数据\n\t/// </summary>\n\t/// <param name=\"value\">需要添加的值</param>\n\tvoid push_back(ValueT value)\n\t{\n\t\tif (_size == _cap)\n\t\t{\n\t\t\t_expand_cap(_cap << 1);\n\t\t}\n\t\t_value[_size++] = value;\n\t}\n\n\t/// <summary>\n\t/// 去掉数组最后一个元素\n\t/// </summary>\n\tvoid pop_back()\n\t{\n\t\t--_size;\n\t}\n\n\t/// <summary>\n\t/// 重设容器大小\n\t/// </summary>\n\t/// <param name=\"size\">容器大小</param>\n\tvoid resize(size_t size)\n\t{\n\t\tif (size < 0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (size < _cap)\n\t\t{\n\t\t\t_size = size;\n\t\t\treturn;\n\t\t}\n\n\t\tif (size >= _cap)\n\t\t{\n\t\t\t_expand_cap(size << 1);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// 从容器擦除指定位置的元素\n\t/// </summary>\n\t/// <param name=\"index\"></param>\n\tvoid erase(size_t index)\n\t{\n\t\tif (index >= _size) return;\n\t\tfor (size_t i = index; i < _size; ++i)\n\t\t{\n\t\t\t_value[i] = _value[i + 1];\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// 将内容与 other 的交换\n\t/// </summary>\n\t/// <param name=\"other\"></param>\n\tvoid swap(ws_vector& other)\n\t{\n\t\tws_vector<ValueT> tmp = *this;\n\t\t*this = other;\n\t\tother = tmp;\n\t}\n\n\t/// <summary>\n\t/// 从容器擦除所有元素。此调用后 size() 返回零\n\t/// </summary>\n\tvoid clear()\n\t{\n\t\tif (_value)\n\t\t{\n\t\t\tdelete[] _value;\n\t\t}\n\t\t_size = 0;\n\t\t_cap = 0;\n\t}\n\n\t/// <summary>\n\t/// 预分配集合容量\n\t/// </summary>\n\t/// <param name=\"cap\">容量大小</param>\n\tvoid reserve(size_t cap)\n\t{\n\t\tif (cap <= _cap || cap > max_size())\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t_expand_cap(cap);\n\t}\n\n\t/// <summary>\n\t/// 集合中是否包含指定值\n\t/// </summary>\n\t/// <param name=\"value\">需要检测的值</param>\n\t/// <returns>若包含，则为true；反之，为false</returns>\n\tbool contains(ValueT value)\n\t{\n\t\tauto index = _size;\n\t\twhile (index--)\n\t\t{\n\t\t\tif (value == _value[index])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/// <summary>\n\t/// 判断集合是否为空\n\t/// </summary>\n\t/// <returns>若为空，则为true；反之，为false</returns>\n\tbool empty()\n\t{\n\t\treturn _size == 0;\n\t}\n\n\t/// <summary>\n\t/// 获取集合中元素个数\n\t/// </summary>\n\t/// <returns>元素个数</returns>\n\tsize_t size()\n\t{\n\t\treturn _size;\n\t}\n\n\t/// <summary>\n\t/// 获取集合的最大存储能力\n\t/// </summary>\n\t/// <returns>集合的最大存储能力</returns>\n\tsize_t max_size()\n\t{\n\t\treturn std::numeric_limits<size_t>::max();\n\t}\n\n\t/// <summary>\n\t/// 集合已分配空间的大小\n\t/// </summary>\n\t/// <returns>当前分配存储的容量</returns>\n\tsize_t capacity()\n\t{\n\t\treturn _cap;\n\t}\n\n\t/// <summary>\n\t/// 返回位于指定位置 index 的元素的引用，有边界检查\n\t/// </summary>\n\t/// <param name=\"index\"></param>\n\t/// <returns>index处元素的引用</returns>\n\tValueT& at(size_t index)\n\t{\n\t\tif (index < 0 || index >= _size) throw(std::out_of_range(\"Parameter access out of range.\"));\n\t\treturn _value[index];\n\t}\n\n\t/// <summary>\n\t/// 返回位于指定位置 index 的元素的引用，无边界检查\n\t/// </summary>\n\t/// <param name=\"index\"></param>\n\t/// <returns>index处元素的引用</returns>\n\tValueT& operator[](size_t index)\n\t{\n\t\treturn _value[index];\n\t}\n\n\t/// <summary>\n\t/// 获取容器首元素的引用\n\t/// </summary>\n\t/// <returns>容器首元素的引用</returns>\n\tValueT& front()\n\t{\n\t\treturn _value[0];\n\t}\n\n\t/// <summary>\n\t/// 获取容器最后一个元素的引用\n\t/// </summary>\n\t/// <returns>容器最后一个元素的引用</returns>\n\tValueT& back()\n\t{\n\t\treturn _value[_size - 1];\n\t}\n\n\t/// <summary>\n\t/// 获取指向作为元素存储工作的底层数组的指针\n\t/// </summary>\n\t/// <returns>元素存储工作的底层数组的指针</returns>\n\tValueT* data()\n\t{\n\t\treturn _value;\n\t}\n\n\t/// <summary>\n\t/// 重载赋值运算符\n\t/// </summary>\n\t/// <param name=\"other\">提供赋值数据的容器对象</param>\n\t/// <returns></returns>\n\tws_vector& operator=(ws_vector& other)\n\t{\n\t\tif (this == &other) return *this;\n\n\t\tdelete[] _value;\n\t\t_size = other._size;\n\t\t_cap = other._cap;\n\t\t_value = new DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];\n\n\t\tfor (size_t i = 0; i < _size; ++i)\n\t\t{\n\t\t\t_value[i] = other._value[i];\n\t\t}\n\n\t\treturn *this;\n\t}\n\n\t~ws_vector()\n\t{\n\t\tclear();\n\t}\n\nprivate:\n\tvoid _expand_cap(size_t cap)\n\t{\n\t\tValueT* newValue = new DEBUG_CHECK_MEMORY_LEAKS ValueT[cap];\n\t\tfor (size_t i = 0; i < _size; ++i)\n\t\t{\n\t\t\tnewValue[i] = _value[i];\n\t\t}\n\t\tdelete[] _value;\n\t\t_cap = cap;\n\t\t_value = newValue;\n\t}\n\nprivate:\n\tValueT* _value;\n\tsize_t _size{ 0 };\n\tsize_t _cap{ 2 };\n\npublic:\n\tstruct iterator\n\t{\n\t\ttypedef ValueT value_type;\n\t\ttypedef ValueT& reference;\n\t\ttypedef ValueT* pointer;\n\t\ttypedef std::bidirectional_iterator_tag iterator_category;\n\t\ttypedef ptrdiff_t difference_type;\n\t\ttypedef iterator _Self;\n\t\ttypedef ValueT const* _Link_const_type;\n\n\t\titerator() {}\n\n\t\titerator(ValueT* v)\n\t\t{\n\t\t\t_v = v;\n\t\t}\n\n\t\treference operator*()\n\t\t{\n\t\t\treturn *_v;\n\t\t}\n\n\t\tpointer operator->() const\n\t\t{\n\t\t\treturn &(operator*());\n\t\t}\n\n\t\t_Self operator++()\n\t\t{\n\t\t\t++_v;\n\t\t\treturn *this;\n\t\t}\n\n\t\t_Self operator++(int)\n\t\t{\n\t\t\t_Self ret = *this;\n\t\t\t++_v;\n\t\t\treturn ret;\n\t\t}\n\n\t\t_Self& operator--()\n\t\t{\n\t\t\t--_v;\n\t\t\treturn *this;\n\t\t}\n\n\t\t_Self operator--(int)\n\t\t{\n\t\t\t_Self ret = *this;\n\t\t\t--_v;\n\t\t\treturn ret;\n\t\t}\n\n\t\tbool operator==(const iterator& o)\n\t\t{\n\t\t\treturn _v == o._v;\n\t\t}\n\n\t\tbool operator!=(const iterator& o)\n\t\t{\n\t\t\treturn _v != o._v;\n\t\t}\n\n\t\t_Self operator+(size_t n)\n\t\t{\n\t\t\twhile (n--)\n\t\t\t{\n\t\t\t\t++_v;\n\t\t\t}\n\t\t\treturn *this;\n\t\t}\n\n\t\t_Self operator-(size_t n)\n\t\t{\n\t\t\twhile (n--)\n\t\t\t{\n\t\t\t\t--_v;\n\t\t\t}\n\t\t\treturn *this;\n\t\t}\n\n\t\tsize_t operator-(const iterator& o)\n\t\t{\n\t\t\treturn _v - o._v;\n\t\t}\n\n\tprivate:\n\t\tValueT* _v;\n\t};\n\n\titerator begin()\n\t{\n\t\treturn iterator(_value);\n\t}\n\n\titerator end()\n\t{\n\t\treturn iterator(_value + _size);\n\t}\n};\n\n#pragma warning(pop)  \n#endif // INCLUDE_WS_VECTOR_ITERATOR_HPP\n```\n\n","source":"_posts/ws_vector_iterator.md","raw":"---\ntitle: 自定义动态数组（ws_vector_iterator）\ndate: 2021-08-06 22:18:30\nauthor: ws\ndescription: 使用基础元素构建C++动态数组（迭代器版本）\ncategories: 数据结构\ntags: [cpp, iterator]\ncover:\n---\n\n# 自定义动态数组-迭代器（ws_vector_iterator）\n\n## 完整代码\n\n```cpp\n#ifndef INCLUDE_WS_VECTOR_ITERATOR_HPP\n#define INCLUDE_WS_VECTOR_ITERATOR_HPP\n\n#pragma once\n#include \"ws_utilities.h\"\n\n#pragma warning(push)\n#pragma warning(disable:6385)\n#pragma warning(disable:6386)\ntemplate<typename ValueT>\nclass ws_vector\n{\npublic:\n\tws_vector()\n\t{\n\t\tinit();\n\t}\n\n\tws_vector(size_t cap)\n\t{\n\t\tif (cap > 0) _cap = cap;\n\t\tinit();\n\t}\n\n\tws_vector(const ValueT& value, size_t size)\n\t{\n\t\twhile (size--)\n\t\t{\n\t\t\tpush_back(value);\n\t\t}\n\t}\n\n\tws_vector(ws_vector& v) noexcept\n\t{\n\t\t*this = v;\n\t}\n\n\tvoid init()\n\t{\n\t\t_value = new DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];\n\t}\n\n\t/// <summary>\n\t/// 在数组的最后添加一个数据\n\t/// </summary>\n\t/// <param name=\"value\">需要添加的值</param>\n\tvoid push_back(ValueT value)\n\t{\n\t\tif (_size == _cap)\n\t\t{\n\t\t\t_expand_cap(_cap << 1);\n\t\t}\n\t\t_value[_size++] = value;\n\t}\n\n\t/// <summary>\n\t/// 去掉数组最后一个元素\n\t/// </summary>\n\tvoid pop_back()\n\t{\n\t\t--_size;\n\t}\n\n\t/// <summary>\n\t/// 重设容器大小\n\t/// </summary>\n\t/// <param name=\"size\">容器大小</param>\n\tvoid resize(size_t size)\n\t{\n\t\tif (size < 0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif (size < _cap)\n\t\t{\n\t\t\t_size = size;\n\t\t\treturn;\n\t\t}\n\n\t\tif (size >= _cap)\n\t\t{\n\t\t\t_expand_cap(size << 1);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// 从容器擦除指定位置的元素\n\t/// </summary>\n\t/// <param name=\"index\"></param>\n\tvoid erase(size_t index)\n\t{\n\t\tif (index >= _size) return;\n\t\tfor (size_t i = index; i < _size; ++i)\n\t\t{\n\t\t\t_value[i] = _value[i + 1];\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// 将内容与 other 的交换\n\t/// </summary>\n\t/// <param name=\"other\"></param>\n\tvoid swap(ws_vector& other)\n\t{\n\t\tws_vector<ValueT> tmp = *this;\n\t\t*this = other;\n\t\tother = tmp;\n\t}\n\n\t/// <summary>\n\t/// 从容器擦除所有元素。此调用后 size() 返回零\n\t/// </summary>\n\tvoid clear()\n\t{\n\t\tif (_value)\n\t\t{\n\t\t\tdelete[] _value;\n\t\t}\n\t\t_size = 0;\n\t\t_cap = 0;\n\t}\n\n\t/// <summary>\n\t/// 预分配集合容量\n\t/// </summary>\n\t/// <param name=\"cap\">容量大小</param>\n\tvoid reserve(size_t cap)\n\t{\n\t\tif (cap <= _cap || cap > max_size())\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t_expand_cap(cap);\n\t}\n\n\t/// <summary>\n\t/// 集合中是否包含指定值\n\t/// </summary>\n\t/// <param name=\"value\">需要检测的值</param>\n\t/// <returns>若包含，则为true；反之，为false</returns>\n\tbool contains(ValueT value)\n\t{\n\t\tauto index = _size;\n\t\twhile (index--)\n\t\t{\n\t\t\tif (value == _value[index])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/// <summary>\n\t/// 判断集合是否为空\n\t/// </summary>\n\t/// <returns>若为空，则为true；反之，为false</returns>\n\tbool empty()\n\t{\n\t\treturn _size == 0;\n\t}\n\n\t/// <summary>\n\t/// 获取集合中元素个数\n\t/// </summary>\n\t/// <returns>元素个数</returns>\n\tsize_t size()\n\t{\n\t\treturn _size;\n\t}\n\n\t/// <summary>\n\t/// 获取集合的最大存储能力\n\t/// </summary>\n\t/// <returns>集合的最大存储能力</returns>\n\tsize_t max_size()\n\t{\n\t\treturn std::numeric_limits<size_t>::max();\n\t}\n\n\t/// <summary>\n\t/// 集合已分配空间的大小\n\t/// </summary>\n\t/// <returns>当前分配存储的容量</returns>\n\tsize_t capacity()\n\t{\n\t\treturn _cap;\n\t}\n\n\t/// <summary>\n\t/// 返回位于指定位置 index 的元素的引用，有边界检查\n\t/// </summary>\n\t/// <param name=\"index\"></param>\n\t/// <returns>index处元素的引用</returns>\n\tValueT& at(size_t index)\n\t{\n\t\tif (index < 0 || index >= _size) throw(std::out_of_range(\"Parameter access out of range.\"));\n\t\treturn _value[index];\n\t}\n\n\t/// <summary>\n\t/// 返回位于指定位置 index 的元素的引用，无边界检查\n\t/// </summary>\n\t/// <param name=\"index\"></param>\n\t/// <returns>index处元素的引用</returns>\n\tValueT& operator[](size_t index)\n\t{\n\t\treturn _value[index];\n\t}\n\n\t/// <summary>\n\t/// 获取容器首元素的引用\n\t/// </summary>\n\t/// <returns>容器首元素的引用</returns>\n\tValueT& front()\n\t{\n\t\treturn _value[0];\n\t}\n\n\t/// <summary>\n\t/// 获取容器最后一个元素的引用\n\t/// </summary>\n\t/// <returns>容器最后一个元素的引用</returns>\n\tValueT& back()\n\t{\n\t\treturn _value[_size - 1];\n\t}\n\n\t/// <summary>\n\t/// 获取指向作为元素存储工作的底层数组的指针\n\t/// </summary>\n\t/// <returns>元素存储工作的底层数组的指针</returns>\n\tValueT* data()\n\t{\n\t\treturn _value;\n\t}\n\n\t/// <summary>\n\t/// 重载赋值运算符\n\t/// </summary>\n\t/// <param name=\"other\">提供赋值数据的容器对象</param>\n\t/// <returns></returns>\n\tws_vector& operator=(ws_vector& other)\n\t{\n\t\tif (this == &other) return *this;\n\n\t\tdelete[] _value;\n\t\t_size = other._size;\n\t\t_cap = other._cap;\n\t\t_value = new DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];\n\n\t\tfor (size_t i = 0; i < _size; ++i)\n\t\t{\n\t\t\t_value[i] = other._value[i];\n\t\t}\n\n\t\treturn *this;\n\t}\n\n\t~ws_vector()\n\t{\n\t\tclear();\n\t}\n\nprivate:\n\tvoid _expand_cap(size_t cap)\n\t{\n\t\tValueT* newValue = new DEBUG_CHECK_MEMORY_LEAKS ValueT[cap];\n\t\tfor (size_t i = 0; i < _size; ++i)\n\t\t{\n\t\t\tnewValue[i] = _value[i];\n\t\t}\n\t\tdelete[] _value;\n\t\t_cap = cap;\n\t\t_value = newValue;\n\t}\n\nprivate:\n\tValueT* _value;\n\tsize_t _size{ 0 };\n\tsize_t _cap{ 2 };\n\npublic:\n\tstruct iterator\n\t{\n\t\ttypedef ValueT value_type;\n\t\ttypedef ValueT& reference;\n\t\ttypedef ValueT* pointer;\n\t\ttypedef std::bidirectional_iterator_tag iterator_category;\n\t\ttypedef ptrdiff_t difference_type;\n\t\ttypedef iterator _Self;\n\t\ttypedef ValueT const* _Link_const_type;\n\n\t\titerator() {}\n\n\t\titerator(ValueT* v)\n\t\t{\n\t\t\t_v = v;\n\t\t}\n\n\t\treference operator*()\n\t\t{\n\t\t\treturn *_v;\n\t\t}\n\n\t\tpointer operator->() const\n\t\t{\n\t\t\treturn &(operator*());\n\t\t}\n\n\t\t_Self operator++()\n\t\t{\n\t\t\t++_v;\n\t\t\treturn *this;\n\t\t}\n\n\t\t_Self operator++(int)\n\t\t{\n\t\t\t_Self ret = *this;\n\t\t\t++_v;\n\t\t\treturn ret;\n\t\t}\n\n\t\t_Self& operator--()\n\t\t{\n\t\t\t--_v;\n\t\t\treturn *this;\n\t\t}\n\n\t\t_Self operator--(int)\n\t\t{\n\t\t\t_Self ret = *this;\n\t\t\t--_v;\n\t\t\treturn ret;\n\t\t}\n\n\t\tbool operator==(const iterator& o)\n\t\t{\n\t\t\treturn _v == o._v;\n\t\t}\n\n\t\tbool operator!=(const iterator& o)\n\t\t{\n\t\t\treturn _v != o._v;\n\t\t}\n\n\t\t_Self operator+(size_t n)\n\t\t{\n\t\t\twhile (n--)\n\t\t\t{\n\t\t\t\t++_v;\n\t\t\t}\n\t\t\treturn *this;\n\t\t}\n\n\t\t_Self operator-(size_t n)\n\t\t{\n\t\t\twhile (n--)\n\t\t\t{\n\t\t\t\t--_v;\n\t\t\t}\n\t\t\treturn *this;\n\t\t}\n\n\t\tsize_t operator-(const iterator& o)\n\t\t{\n\t\t\treturn _v - o._v;\n\t\t}\n\n\tprivate:\n\t\tValueT* _v;\n\t};\n\n\titerator begin()\n\t{\n\t\treturn iterator(_value);\n\t}\n\n\titerator end()\n\t{\n\t\treturn iterator(_value + _size);\n\t}\n};\n\n#pragma warning(pop)  \n#endif // INCLUDE_WS_VECTOR_ITERATOR_HPP\n```\n\n","slug":"ws_vector_iterator","published":1,"updated":"2023-04-11T01:05:07.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgbl83sz0021w07khts8344i","content":"<h1 id=\"自定义动态数组-迭代器（ws-vector-iterator）\"><a href=\"#自定义动态数组-迭代器（ws-vector-iterator）\" class=\"headerlink\" title=\"自定义动态数组-迭代器（ws_vector_iterator）\"></a>自定义动态数组-迭代器（ws_vector_iterator）</h1><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> INCLUDE_WS_VECTOR_ITERATOR_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_WS_VECTOR_ITERATOR_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ws_utilities.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(push)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(disable:6385)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(disable:6386)</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ValueT&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ws_vector</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>(<span class=\"type\">size_t</span> cap)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cap &gt; <span class=\"number\">0</span>) _cap = cap;</span><br><span class=\"line\">\t\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>(<span class=\"type\">const</span> ValueT&amp; value, <span class=\"type\">size_t</span> size)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (size--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">push_back</span>(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>(ws_vector&amp; v) <span class=\"keyword\">noexcept</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*<span class=\"keyword\">this</span> = v;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t_value = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 在数组的最后添加一个数据</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;需要添加的值&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_size == _cap)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_expand_cap(_cap &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_value[_size++] = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 去掉数组最后一个元素</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t--_size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 重设容器大小</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;size&quot;&gt;容器大小&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size &lt; _cap)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_size = size;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size &gt;= _cap)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_expand_cap(size &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 从容器擦除指定位置的元素</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"type\">size_t</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &gt;= _size) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = index; i &lt; _size; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_value[i] = _value[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 将内容与 other 的交换</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(ws_vector&amp; other)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tws_vector&lt;ValueT&gt; tmp = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t*<span class=\"keyword\">this</span> = other;</span><br><span class=\"line\">\t\tother = tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 从容器擦除所有元素。此调用后 size() 返回零</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_value)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span>[] _value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t_cap = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 预分配集合容量</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;cap&quot;&gt;容量大小&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reserve</span><span class=\"params\">(<span class=\"type\">size_t</span> cap)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cap &lt;= _cap || cap &gt; <span class=\"built_in\">max_size</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_expand_cap(cap);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 集合中是否包含指定值</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;需要检测的值&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;若包含，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">contains</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> index = _size;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (index--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (value == _value[index])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 判断集合是否为空</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;若为空，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _size == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取集合中元素个数</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;元素个数&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取集合的最大存储能力</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;集合的最大存储能力&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">max_size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> std::numeric_limits&lt;<span class=\"type\">size_t</span>&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 集合已分配空间的大小</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;当前分配存储的容量&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">capacity</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _cap;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 返回位于指定位置 index 的元素的引用，有边界检查</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;index处元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\">ValueT&amp; <span class=\"title\">at</span><span class=\"params\">(<span class=\"type\">size_t</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= _size) <span class=\"keyword\">throw</span>(std::<span class=\"built_in\">out_of_range</span>(<span class=\"string\">&quot;Parameter access out of range.&quot;</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _value[index];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 返回位于指定位置 index 的元素的引用，无边界检查</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;index处元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\">\tValueT&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">size_t</span> index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _value[index];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取容器首元素的引用</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;容器首元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\">ValueT&amp; <span class=\"title\">front</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _value[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取容器最后一个元素的引用</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;容器最后一个元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\">ValueT&amp; <span class=\"title\">back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _value[_size - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取指向作为元素存储工作的底层数组的指针</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;元素存储工作的底层数组的指针&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\">ValueT* <span class=\"title\">data</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 重载赋值运算符</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;提供赋值数据的容器对象&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\">\tws_vector&amp; <span class=\"keyword\">operator</span>=(ws_vector&amp; other)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == &amp;other) <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[] _value;</span><br><span class=\"line\">\t\t_size = other._size;</span><br><span class=\"line\">\t\t_cap = other._cap;</span><br><span class=\"line\">\t\t_value = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; _size; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_value[i] = other._value[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">ws_vector</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">void</span> _expand_cap(<span class=\"type\">size_t</span> cap)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tValueT* newValue = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS ValueT[cap];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; _size; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnewValue[i] = _value[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[] _value;</span><br><span class=\"line\">\t\t_cap = cap;</span><br><span class=\"line\">\t\t_value = newValue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tValueT* _value;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> _size&#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> _cap&#123; <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">iterator</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> ValueT value_type;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> ValueT&amp; reference;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> ValueT* pointer;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> std::bidirectional_iterator_tag iterator_category;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> <span class=\"type\">ptrdiff_t</span> difference_type;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> iterator _Self;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> ValueT <span class=\"type\">const</span>* _Link_const_type;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">iterator</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">iterator</span>(ValueT* v)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_v = v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treference <span class=\"keyword\">operator</span>*()</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> *_v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpointer <span class=\"keyword\">operator</span>-&gt;() <span class=\"type\">const</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> &amp;(<span class=\"keyword\">operator</span>*());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_Self <span class=\"keyword\">operator</span>++()</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t++_v;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_Self <span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_Self ret = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t\t++_v;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_Self&amp; <span class=\"keyword\">operator</span>--()</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t--_v;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_Self <span class=\"keyword\">operator</span>--(<span class=\"type\">int</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_Self ret = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t\t--_v;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> iterator&amp; o)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _v == o._v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"type\">const</span> iterator&amp; o)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _v != o._v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_Self <span class=\"keyword\">operator</span>+(<span class=\"type\">size_t</span> n)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t++_v;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_Self <span class=\"keyword\">operator</span>-(<span class=\"type\">size_t</span> n)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t--_v;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">size_t</span> <span class=\"keyword\">operator</span>-(<span class=\"type\">const</span> iterator&amp; o)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _v - o._v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\tValueT* _v;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">iterator <span class=\"title\">begin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">iterator</span>(_value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">iterator <span class=\"title\">end</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">iterator</span>(_value + _size);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(pop)  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// INCLUDE_WS_VECTOR_ITERATOR_HPP</span></span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"自定义动态数组-迭代器（ws-vector-iterator）\"><a href=\"#自定义动态数组-迭代器（ws-vector-iterator）\" class=\"headerlink\" title=\"自定义动态数组-迭代器（ws_vector_iterator）\"></a>自定义动态数组-迭代器（ws_vector_iterator）</h1><h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> INCLUDE_WS_VECTOR_ITERATOR_HPP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_WS_VECTOR_ITERATOR_HPP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;ws_utilities.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(push)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(disable:6385)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(disable:6386)</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> ValueT&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ws_vector</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>(<span class=\"type\">size_t</span> cap)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cap &gt; <span class=\"number\">0</span>) _cap = cap;</span><br><span class=\"line\">\t\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>(<span class=\"type\">const</span> ValueT&amp; value, <span class=\"type\">size_t</span> size)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (size--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">push_back</span>(value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">ws_vector</span>(ws_vector&amp; v) <span class=\"keyword\">noexcept</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t*<span class=\"keyword\">this</span> = v;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t_value = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 在数组的最后添加一个数据</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;需要添加的值&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_size == _cap)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_expand_cap(_cap &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_value[_size++] = value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 去掉数组最后一个元素</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t--_size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 重设容器大小</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;size&quot;&gt;容器大小&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"type\">size_t</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size &lt; _cap)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_size = size;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (size &gt;= _cap)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_expand_cap(size &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 从容器擦除指定位置的元素</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">erase</span><span class=\"params\">(<span class=\"type\">size_t</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &gt;= _size) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = index; i &lt; _size; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_value[i] = _value[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 将内容与 other 的交换</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">swap</span><span class=\"params\">(ws_vector&amp; other)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tws_vector&lt;ValueT&gt; tmp = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t*<span class=\"keyword\">this</span> = other;</span><br><span class=\"line\">\t\tother = tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 从容器擦除所有元素。此调用后 size() 返回零</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (_value)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span>[] _value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t_cap = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 预分配集合容量</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;cap&quot;&gt;容量大小&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reserve</span><span class=\"params\">(<span class=\"type\">size_t</span> cap)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cap &lt;= _cap || cap &gt; <span class=\"built_in\">max_size</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t_expand_cap(cap);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 集合中是否包含指定值</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;value&quot;&gt;需要检测的值&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;若包含，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">contains</span><span class=\"params\">(ValueT value)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> index = _size;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (index--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (value == _value[index])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 判断集合是否为空</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;若为空，则为true；反之，为false&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _size == <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取集合中元素个数</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;元素个数&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _size;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取集合的最大存储能力</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;集合的最大存储能力&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">max_size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> std::numeric_limits&lt;<span class=\"type\">size_t</span>&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 集合已分配空间的大小</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;当前分配存储的容量&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">size_t</span> <span class=\"title\">capacity</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _cap;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 返回位于指定位置 index 的元素的引用，有边界检查</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;index处元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\">ValueT&amp; <span class=\"title\">at</span><span class=\"params\">(<span class=\"type\">size_t</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= _size) <span class=\"keyword\">throw</span>(std::<span class=\"built_in\">out_of_range</span>(<span class=\"string\">&quot;Parameter access out of range.&quot;</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _value[index];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 返回位于指定位置 index 的元素的引用，无边界检查</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;index处元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\">\tValueT&amp; <span class=\"keyword\">operator</span>[](<span class=\"type\">size_t</span> index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _value[index];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取容器首元素的引用</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;容器首元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\">ValueT&amp; <span class=\"title\">front</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _value[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取容器最后一个元素的引用</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;容器最后一个元素的引用&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\">ValueT&amp; <span class=\"title\">back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _value[_size - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 获取指向作为元素存储工作的底层数组的指针</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;元素存储工作的底层数组的指针&lt;/returns&gt;</span></span><br><span class=\"line\">\t<span class=\"function\">ValueT* <span class=\"title\">data</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _value;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// 重载赋值运算符</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;param name=&quot;other&quot;&gt;提供赋值数据的容器对象&lt;/param&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\">\tws_vector&amp; <span class=\"keyword\">operator</span>=(ws_vector&amp; other)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == &amp;other) <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[] _value;</span><br><span class=\"line\">\t\t_size = other._size;</span><br><span class=\"line\">\t\t_cap = other._cap;</span><br><span class=\"line\">\t\t_value = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS ValueT[_cap];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; _size; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_value[i] = other._value[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">ws_vector</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">void</span> _expand_cap(<span class=\"type\">size_t</span> cap)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tValueT* newValue = <span class=\"keyword\">new</span> DEBUG_CHECK_MEMORY_LEAKS ValueT[cap];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; _size; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tnewValue[i] = _value[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">delete</span>[] _value;</span><br><span class=\"line\">\t\t_cap = cap;</span><br><span class=\"line\">\t\t_value = newValue;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tValueT* _value;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> _size&#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> _cap&#123; <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">iterator</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> ValueT value_type;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> ValueT&amp; reference;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> ValueT* pointer;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> std::bidirectional_iterator_tag iterator_category;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> <span class=\"type\">ptrdiff_t</span> difference_type;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> iterator _Self;</span><br><span class=\"line\">\t\t<span class=\"keyword\">typedef</span> ValueT <span class=\"type\">const</span>* _Link_const_type;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">iterator</span>() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">iterator</span>(ValueT* v)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_v = v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treference <span class=\"keyword\">operator</span>*()</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> *_v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpointer <span class=\"keyword\">operator</span>-&gt;() <span class=\"type\">const</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> &amp;(<span class=\"keyword\">operator</span>*());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_Self <span class=\"keyword\">operator</span>++()</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t++_v;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_Self <span class=\"keyword\">operator</span>++(<span class=\"type\">int</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_Self ret = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t\t++_v;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_Self&amp; <span class=\"keyword\">operator</span>--()</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t--_v;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_Self <span class=\"keyword\">operator</span>--(<span class=\"type\">int</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t_Self ret = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t\t--_v;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"type\">const</span> iterator&amp; o)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _v == o._v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"type\">const</span> iterator&amp; o)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _v != o._v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_Self <span class=\"keyword\">operator</span>+(<span class=\"type\">size_t</span> n)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t++_v;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_Self <span class=\"keyword\">operator</span>-(<span class=\"type\">size_t</span> n)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t--_v;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">size_t</span> <span class=\"keyword\">operator</span>-(<span class=\"type\">const</span> iterator&amp; o)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> _v - o._v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t\tValueT* _v;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">iterator <span class=\"title\">begin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">iterator</span>(_value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">iterator <span class=\"title\">end</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">iterator</span>(_value + _size);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> <span class=\"keyword\">warning</span>(pop)  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// INCLUDE_WS_VECTOR_ITERATOR_HPP</span></span></span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clgbl83ri0001w07k0dq0eem1","category_id":"clgbl83rp0004w07kaxjc2nqq","_id":"clgbl83s1000iw07k8pyh91lt"},{"post_id":"clgbl83rn0003w07kgb6ibrpr","category_id":"clgbl83rw000cw07k74f1bhs5","_id":"clgbl83s6000rw07k6a6yf2sw"},{"post_id":"clgbl83s3000mw07k5jsgdq6w","category_id":"clgbl83s1000jw07khi0m6swv","_id":"clgbl83s9000yw07k534nco5a"},{"post_id":"clgbl83rs0007w07k941ua0c1","category_id":"clgbl83s1000jw07khi0m6swv","_id":"clgbl83sb0011w07k4p1x77od"},{"post_id":"clgbl83ru0009w07kal6ce0yi","category_id":"clgbl83s6000sw07k17a1514s","_id":"clgbl83sb0012w07kbdhs7i4d"},{"post_id":"clgbl83s9000xw07kc3ti6g6c","category_id":"clgbl83s1000jw07khi0m6swv","_id":"clgbl83sd0015w07k4t336k9k"},{"post_id":"clgbl83rw000bw07k3t7sbhri","category_id":"clgbl83sa000zw07kgu9ugyu8","_id":"clgbl83se0018w07k74vp8fkh"},{"post_id":"clgbl83ry000fw07ka1783tq1","category_id":"clgbl83sb0013w07k5mkgcwjr","_id":"clgbl83sf001cw07k8t5xdknq"},{"post_id":"clgbl83s0000hw07kcglt0i68","category_id":"clgbl83s1000jw07khi0m6swv","_id":"clgbl83sg001gw07k88du8vyo"},{"post_id":"clgbl83s5000pw07k8m2db0es","category_id":"clgbl83sf001bw07k1eqhdrd9","_id":"clgbl83sh001kw07k9t955ho4"},{"post_id":"clgbl83s8000vw07kd1djciqy","category_id":"clgbl83sa000zw07kgu9ugyu8","_id":"clgbl83si001nw07k7vyt7sao"},{"post_id":"clgbl83sz0021w07khts8344i","category_id":"clgbl83s1000jw07khi0m6swv","_id":"clgbl83t00024w07k57pegtij"}],"PostTag":[{"post_id":"clgbl83ri0001w07k0dq0eem1","tag_id":"clgbl83rr0005w07k2j1eexme","_id":"clgbl83s4000nw07kaqdzf6i5"},{"post_id":"clgbl83ri0001w07k0dq0eem1","tag_id":"clgbl83rw000dw07k4elegswe","_id":"clgbl83s6000qw07kexc0a57w"},{"post_id":"clgbl83rn0003w07kgb6ibrpr","tag_id":"clgbl83s2000kw07k8v22b0gn","_id":"clgbl83s9000ww07khr0q2huq"},{"post_id":"clgbl83rs0007w07k941ua0c1","tag_id":"clgbl83s7000tw07k1gzmch4a","_id":"clgbl83sd0016w07ka2wsafxs"},{"post_id":"clgbl83rs0007w07k941ua0c1","tag_id":"clgbl83sa0010w07kaq8nds2s","_id":"clgbl83se0017w07k2ofi8axw"},{"post_id":"clgbl83ru0009w07kal6ce0yi","tag_id":"clgbl83s7000tw07k1gzmch4a","_id":"clgbl83sg001ew07k4e2damq1"},{"post_id":"clgbl83ru0009w07kal6ce0yi","tag_id":"clgbl83se0019w07kdmocad6c","_id":"clgbl83sg001fw07k8ji4e9pf"},{"post_id":"clgbl83rw000bw07k3t7sbhri","tag_id":"clgbl83s7000tw07k1gzmch4a","_id":"clgbl83sh001jw07kduj41z7a"},{"post_id":"clgbl83ry000fw07ka1783tq1","tag_id":"clgbl83sg001hw07k0jy39fed","_id":"clgbl83si001mw07k2pe7chki"},{"post_id":"clgbl83s0000hw07kcglt0i68","tag_id":"clgbl83sh001lw07k63uw25qi","_id":"clgbl83sj001qw07kh0uw8rlp"},{"post_id":"clgbl83s0000hw07kcglt0i68","tag_id":"clgbl83si001ow07k6ppmdbch","_id":"clgbl83sj001rw07kfau31ot3"},{"post_id":"clgbl83s3000mw07k5jsgdq6w","tag_id":"clgbl83sh001lw07k63uw25qi","_id":"clgbl83sj001tw07kdl672fbd"},{"post_id":"clgbl83s5000pw07k8m2db0es","tag_id":"clgbl83sh001lw07k63uw25qi","_id":"clgbl83sk001ww07kh3y2g2on"},{"post_id":"clgbl83s5000pw07k8m2db0es","tag_id":"clgbl83sk001uw07kfoz72hpq","_id":"clgbl83sl001xw07k8rhney9k"},{"post_id":"clgbl83s8000vw07kd1djciqy","tag_id":"clgbl83sh001lw07k63uw25qi","_id":"clgbl83sl001zw07kac9ddxg1"},{"post_id":"clgbl83s9000xw07kc3ti6g6c","tag_id":"clgbl83sh001lw07k63uw25qi","_id":"clgbl83sl0020w07k4bh8fze8"},{"post_id":"clgbl83sz0021w07khts8344i","tag_id":"clgbl83sh001lw07k63uw25qi","_id":"clgbl83t00022w07k2lxpaf9r"},{"post_id":"clgbl83sz0021w07khts8344i","tag_id":"clgbl83si001ow07k6ppmdbch","_id":"clgbl83t00023w07k2nxvarey"}],"Tag":[{"name":"hexo","_id":"clgbl83rr0005w07k2j1eexme"},{"name":"butterfly","_id":"clgbl83rw000dw07k4elegswe"},{"name":"git","_id":"clgbl83s2000kw07k8v22b0gn"},{"name":"golang","_id":"clgbl83s7000tw07k1gzmch4a"},{"name":"数据结构","_id":"clgbl83sa0010w07kaq8nds2s"},{"name":"reflect","_id":"clgbl83se0019w07kdmocad6c"},{"name":"图片","_id":"clgbl83sg001hw07k0jy39fed"},{"name":"cpp","_id":"clgbl83sh001lw07k63uw25qi"},{"name":"iterator","_id":"clgbl83si001ow07k6ppmdbch"},{"name":"gtest","_id":"clgbl83sk001uw07kfoz72hpq"}]}}